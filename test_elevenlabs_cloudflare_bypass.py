#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ElevenLabs TTS —Å –æ–±—Ö–æ–¥–æ–º Cloudflare —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
"""

import os
import sys
import json
import asyncio
import aiohttp
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = Path(__file__).resolve().parent
sys.path.insert(0, str(PROJECT_ROOT))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = PROJECT_ROOT / '.env'
if env_file.exists():
    load_dotenv(env_file)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_file}")
else:
    print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")

class ElevenLabsCloudflareBypass:
    """–¢–µ—Å—Ç–µ—Ä ElevenLabs —Å –æ–±—Ö–æ–¥–æ–º Cloudflare"""
    
    def __init__(self):
        self.api_keys = self._collect_api_keys()
        self.voices = self._load_voices()
        
        # –ü—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
        self.proxies = [
            "http://43.156.66.39:8080",      # –°–∏–Ω–≥–∞–ø—É—Ä
            "http://65.21.34.102:80",        # –§–∏–Ω–ª—è–Ω–¥–∏—è
            "http://103.156.75.213:8787",    # –ò–Ω–¥–æ–Ω–µ–∑–∏—è
            "http://109.135.16.145:8789",    # –ë–µ–ª—å–≥–∏—è
            "http://47.89.184.18:3128",      # –°–®–ê
        ]
        
    def _collect_api_keys(self) -> list:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª—é—á–∏ ElevenLabs –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        keys = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        base_key = os.getenv('ELEVEN_API') or os.getenv('ELEVEN_API_KEY')
        if base_key:
            keys.append(base_key.strip())
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        for i in range(2, 11):
            key = os.getenv(f'ELEVEN_API{i}')
            if key:
                keys.append(key.strip())
        
        print(f"üîë –ù–∞–π–¥–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π ElevenLabs")
        return keys
    
    def _load_voices(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞"""
        voices_file = PROJECT_ROOT / 'data' / 'eleven_voices_ru.json'
        if voices_file.exists():
            with open(voices_file, 'r', encoding='utf-8') as f:
                voices = json.load(f)
                print(f"üé§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(voices)} —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤")
                return voices
        else:
            print("‚ùå –§–∞–π–ª —Å –≥–æ–ª–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
    
    async def test_proxy_with_cloudflare_bypass(self, proxy: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å –æ–±—Ö–æ–¥–æ–º Cloudflare"""
        print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏: {proxy}")
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
        headers = {
            "Accept": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Upgrade-Insecure-Requests": "1",
            "Sec-Fetch-Dest": "document",
            "Sec-Fetch-Mode": "navigate",
            "Sec-Fetch-Site": "none",
            "Cache-Control": "max-age=0"
        }
        
        try:
            async with aiohttp.ClientSession(
                headers=headers,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as session:
                # –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
                async with session.get(
                    "http://httpbin.org/ip",
                    proxy=proxy
                ) as response:
                    if response.status == 200:
                        ip_data = await response.json()
                        print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! IP: {ip_data.get('origin')}")
                        
                        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º ElevenLabs
                        return await self._test_elevenlabs_with_proxy(session, proxy)
                    else:
                        print(f"‚ùå –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            return False
    
    async def _test_elevenlabs_with_proxy(self, session: aiohttp.ClientSession, proxy: str) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ElevenLabs —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        
        if not self.api_keys or not self.voices:
            return False
        
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è ElevenLabs
        eleven_headers = {
            "Accept": "application/json",
            "xi-api-key": self.api_keys[0],
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
            "Accept-Language": "en-US,en;q=0.9",
            "Accept-Encoding": "gzip, deflate, br",
            "DNT": "1",
            "Connection": "keep-alive",
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "cross-site"
        }
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤
            async with session.get(
                "https://api.elevenlabs.io/v1/voices",
                headers=eleven_headers,
                proxy=proxy
            ) as response:
                
                print(f"üìä ElevenLabs API —Å—Ç–∞—Ç—É—Å: {response.status}")
                
                if response.status == 200:
                    voices_data = await response.json()
                    voices = voices_data.get('voices', [])
                    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(voices)} –≥–æ–ª–æ—Å–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏!")
                    return True
                elif response.status == 403:
                    print("‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å (403)")
                    return False
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ ElevenLabs: {e}")
            return False
    
    async def test_elevenlabs_tts_with_cloudflare_bypass(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—á–∏ —Å –æ–±—Ö–æ–¥–æ–º Cloudflare —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
        print("\nüé§ –¢–µ—Å—Ç: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ ElevenLabs —Å –æ–±—Ö–æ–¥–æ–º Cloudflare")
        print("=" * 60)
        
        if not self.api_keys or not self.voices:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤!")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å
        voice = self.voices[0]
        print(f"üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å: {voice.get('name')} ({voice.get('voice_id')})")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç ElevenLabs TTS —Å –æ–±—Ö–æ–¥–æ–º Cloudflare!"
        print(f"üìù –¢–µ–∫—Å—Ç: {test_text}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ —Å —Ä–µ—Ç—Ä–∞—è–º–∏
        for i, proxy in enumerate(self.proxies):
            print(f"\nüîç –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏ {i+1}/{len(self.proxies)}: {proxy}")
            
            # –†–µ—Ç—Ä–∞–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
            for retry in range(3):
                print(f"  üîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry + 1}/3...")
                
                try:
                    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ Cloudflare
                    headers = {
                        "Accept": "audio/mpeg",
                        "Content-Type": "application/json",
                        "xi-api-key": self.api_keys[0],
                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
                        "Accept-Language": "en-US,en;q=0.9",
                        "Accept-Encoding": "gzip, deflate, br",
                        "DNT": "1",
                        "Connection": "keep-alive",
                        "Sec-Fetch-Dest": "empty",
                        "Sec-Fetch-Mode": "cors",
                        "Sec-Fetch-Site": "cross-site"
                    }
                    
                    data = {
                        "text": test_text,
                        "model_id": "eleven_multilingual_v2",
                        "voice_settings": {
                            "stability": 0.5,
                            "similarity_boost": 0.5
                        }
                    }
                    
                    async with aiohttp.ClientSession(
                        headers=headers,
                        timeout=aiohttp.ClientTimeout(total=60)
                    ) as session:
                        async with session.post(
                            f"https://api.elevenlabs.io/v1/text-to-speech/{voice.get('voice_id')}",
                            headers=headers,
                            json=data,
                            proxy=proxy
                        ) as response:
                            
                            print(f"  üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                            
                            if response.status == 200:
                                audio_data = await response.read()
                                print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞—É–¥–∏–æ! –†–∞–∑–º–µ—Ä: {len(audio_data)} bytes")
                                
                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
                                os.makedirs("test_audio", exist_ok=True)
                                audio_file = f"test_audio/elevenlabs_proxy_{i+1}_retry_{retry+1}.mp3"
                                with open(audio_file, "wb") as f:
                                    f.write(audio_data)
                                print(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {audio_file}")
                                
                                return True
                            elif response.status == 403:
                                print("  ‚ùå Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å (403)")
                                if retry < 2:
                                    print("  ‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                                    await asyncio.sleep(2)
                            else:
                                error_text = await response.text()
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                                print(f"  üìÑ –û—Ç–≤–µ—Ç: {error_text[:100]}...")
                                if retry < 2:
                                    print("  ‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                                    await asyncio.sleep(2)
                                
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞: {e}")
                    if retry < 2:
                        print("  ‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        await asyncio.sleep(2)
        
        print("‚ùå –í—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–±–æ–π—Ç–∏ Cloudflare")
        return False
    
    async def test_all_proxies_cloudflare_bypass(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏ –Ω–∞ –æ–±—Ö–æ–¥ Cloudflare —Å —Ä–µ—Ç—Ä–∞—è–º–∏"""
        print("\nüîç –¢–µ—Å—Ç: –û–±—Ö–æ–¥ Cloudflare —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–∫—Å–∏ —Å —Ä–µ—Ç—Ä–∞—è–º–∏")
        print("=" * 60)
        
        working_proxies = []
        
        for i, proxy in enumerate(self.proxies):
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏ {i+1}/{len(self.proxies)}: {proxy}")
            
            # –†–µ—Ç—Ä–∞–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
            success = False
            for retry in range(3):
                print(f"  üîÑ –ü–æ–ø—ã—Ç–∫–∞ {retry + 1}/3...")
                
                if await self.test_proxy_with_cloudflare_bypass(proxy):
                    working_proxies.append(proxy)
                    print(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy} —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ElevenLabs!")
                    success = True
                    break
                else:
                    print(f"  ‚ùå –ü—Ä–æ–∫—Å–∏ {proxy} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ElevenLabs (–ø–æ–ø—ã—Ç–∫–∞ {retry + 1})")
                    if retry < 2:
                        print("  ‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...")
                        await asyncio.sleep(2)
            
            if not success:
                print(f"‚ùå –ü—Ä–æ–∫—Å–∏ {proxy} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å ElevenLabs –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(working_proxies)}/{len(self.proxies)} –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Å ElevenLabs")
        
        for proxy in working_proxies:
            print(f"  ‚úÖ {proxy}")
        
        return len(working_proxies) > 0

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs TTS —Å –æ–±—Ö–æ–¥–æ–º Cloudflare")
    print("=" * 80)
    
    tester = ElevenLabsCloudflareBypass()
    
    if not tester.api_keys:
        print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π ElevenLabs! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        return
    
    if not tester.voices:
        print("‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤! –ó–∞–ø—É—Å—Ç–∏—Ç–µ fetch_eleven_voices.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–û–±—Ö–æ–¥ Cloudflare —á–µ—Ä–µ–∑ –≤—Å–µ –ø—Ä–æ–∫—Å–∏", tester.test_all_proxies_cloudflare_bypass),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —Å –æ–±—Ö–æ–¥–æ–º Cloudflare", tester.test_elevenlabs_tts_with_cloudflare_bypass)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*80}")
        print(f"üß™ {test_name}")
        print('='*80)
        
        try:
            result = await test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–®–ï–õ")
                
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print('='*80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"{test_name}: {status}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! ElevenLabs —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±—Ö–æ–¥–æ–º Cloudflare!")
    elif passed > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    else:
        print("‚ùå ElevenLabs –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ —Å –æ–±—Ö–æ–¥–æ–º Cloudflare.")

if __name__ == "__main__":
    asyncio.run(main())
