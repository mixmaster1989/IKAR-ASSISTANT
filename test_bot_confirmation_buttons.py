#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ "–±–æ—Ç"
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞/–ù–µ—Ç"
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(str(Path(__file__).parent / "backend"))

async def test_bot_confirmation_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ö–ù–û–ü–û–ö –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –ë–û–¢–ê")
    print("=" * 50)
    
    try:
        from api.smart_bot_trigger import SmartBotTrigger
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger = SmartBotTrigger()
        print("‚úÖ SmartBotTrigger —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
        assert hasattr(trigger, 'pending_confirmations'), "‚ùå –ü–æ–ª–µ pending_confirmations –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        assert hasattr(trigger, 'confirmation_timeout'), "‚ùå –ü–æ–ª–µ confirmation_timeout –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        assert trigger.confirmation_timeout == 15, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞–π–º–∞—É—Ç: {trigger.confirmation_timeout}"
        print("‚úÖ –ù–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        assert hasattr(trigger, 'send_confirmation_buttons'), "‚ùå –ú–µ—Ç–æ–¥ send_confirmation_buttons –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(trigger, 'handle_confirmation_callback'), "‚ùå –ú–µ—Ç–æ–¥ handle_confirmation_callback –Ω–µ –Ω–∞–π–¥–µ–Ω"
        assert hasattr(trigger, 'process_confirmed_trigger'), "‚ùå –ú–µ—Ç–æ–¥ process_confirmed_trigger –Ω–µ –Ω–∞–π–¥–µ–Ω"
        print("‚úÖ –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        test_cases = [
            ("–±–æ—Ç", True),
            ("–ë–û–¢", True),
            ("–ø—Ä–∏–≤–µ—Ç –±–æ—Ç", True),
            ("–±–æ—Ç, –∫–∞–∫ –¥–µ–ª–∞?", True),
            ("—Ä–æ–±–æ—Ç", False),
            ("–±–æ—Ç—ã", False),
            ("–±–æ—Ç–æ–≤", False),
            ("–±–æ—Ç–Ω–∞—Ä–∏—Å—É–π", False),
        ]
        
        print("\nüéØ –¢–µ—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞:")
        for text, expected in test_cases:
            result = trigger.is_triggered(text)
            status = "‚úÖ" if result == expected else "‚ùå"
            print(f"  {status} '{text}' -> {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected})")
            assert result == expected, f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è '{text}': {result} != {expected}"
        
        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º cooldown
        print("\n‚è∞ –¢–µ—Å—Ç cooldown:")
        chat_id = "test_chat_123"
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏
        assert not trigger.is_cooldown_active(chat_id), "Cooldown –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω"
        print("  ‚úÖ –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - cooldown –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger.update_trigger_time(chat_id)
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        assert trigger.is_cooldown_active(chat_id), "Cooldown –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω"
        print("  ‚úÖ –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - cooldown –∞–∫—Ç–∏–≤–µ–Ω")
        
        print("‚úÖ Cooldown —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ callback –¥–∞–Ω–Ω—ã—Ö
        print("\nüîß –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è callback –¥–∞–Ω–Ω—ã—Ö:")
        import uuid
        confirmation_id = str(uuid.uuid4())[:8]
        
        yes_callback = f"bot_confirm_yes_{confirmation_id}"
        no_callback = f"bot_confirm_no_{confirmation_id}"
        
        assert yes_callback.startswith("bot_confirm_yes_"), "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–ª—è '–î–∞'"
        assert no_callback.startswith("bot_confirm_no_"), "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–ª—è '–ù–µ—Ç'"
        print(f"  ‚úÖ Callback '–î–∞': {yes_callback}")
        print(f"  ‚úÖ Callback '–ù–µ—Ç': {no_callback}")
        
        print("‚úÖ Callback –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üìã –°–∏—Å—Ç–µ–º–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_telegram_polling_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å telegram_polling.py"""
    print("\nüîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° TELEGRAM_POLLING")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ telegram_polling.py
        with open('backend/api/telegram_polling.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        required_elements = [
            'bot_confirm_',
            'handle_confirmation_callback',
            'process_confirmed_trigger',
            'answer_callback_query'
        ]
        
        for element in required_elements:
            if element in content:
                print(f"  ‚úÖ {element} –Ω–∞–π–¥–µ–Ω –≤ telegram_polling.py")
            else:
                print(f"  ‚ùå {element} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ telegram_polling.py")
                return False
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å telegram_polling.py –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –°–ò–°–¢–ï–ú–´ –ö–ù–û–ü–û–ö –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    test1_result = await test_bot_confirmation_system()
    
    # –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    test2_result = await test_telegram_polling_integration()
    
    print("\n" + "=" * 60)
    if test1_result and test2_result:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
        print("1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç '–±–æ—Ç' –≤ –≥—Ä—É–ø–ø–µ")
        print("2. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ 'ü§ñ –¢—ã –º–µ–Ω—è –∑–≤–∞–ª?' —Å –∫–Ω–æ–ø–∫–∞–º–∏ ‚úÖ –î–∞ / ‚ùå –ù–µ—Ç")
        print("3. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–î–∞' - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞")
        print("4. –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ '–ù–µ—Ç' - –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç")
        print("5. –ß–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç—Å—è")
        return 0
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
