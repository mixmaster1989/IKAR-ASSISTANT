#!/usr/bin/env python3
"""
–¢–µ—Å—Ç ElevenLabs TTS –±–µ–∑ –ø—Ä–æ–∫—Å–∏ (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
"""

import os
import sys
import json
import asyncio
import aiohttp
from pathlib import Path
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = Path(__file__).resolve().parent
sys.path.insert(0, str(PROJECT_ROOT))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_file = PROJECT_ROOT / '.env'
if env_file.exists():
    load_dotenv(env_file)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_file}")
else:
    print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_file}")

class ElevenLabsDirectTester:
    """–¢–µ—Å—Ç–µ—Ä ElevenLabs –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    
    def __init__(self):
        self.api_keys = self._collect_api_keys()
        self.voices = self._load_voices()
        
    def _collect_api_keys(self) -> list:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–ª—é—á–∏ ElevenLabs –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        keys = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        base_key = os.getenv('ELEVEN_API') or os.getenv('ELEVEN_API_KEY')
        if base_key:
            keys.append(base_key.strip())
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        for i in range(2, 11):
            key = os.getenv(f'ELEVEN_API{i}')
            if key:
                keys.append(key.strip())
        
        print(f"üîë –ù–∞–π–¥–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π ElevenLabs")
        return keys
    
    def _load_voices(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞"""
        voices_file = PROJECT_ROOT / 'data' / 'eleven_voices_ru.json'
        if voices_file.exists():
            with open(voices_file, 'r', encoding='utf-8') as f:
                voices = json.load(f)
                print(f"üé§ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(voices)} —Ä—É—Å—Å–∫–∏—Ö –≥–æ–ª–æ—Å–æ–≤")
                return voices
        else:
            print("‚ùå –§–∞–π–ª —Å –≥–æ–ª–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return []
    
    async def test_elevenlabs_voices_direct(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ ElevenLabs –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        print("\nüé§ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤ ElevenLabs (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)")
        print("=" * 60)
        
        if not self.api_keys:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π ElevenLabs!")
            return False
        
        url = "https://api.elevenlabs.io/v1/voices"
        headers = {
            "Accept": "application/json",
            "xi-api-key": self.api_keys[0]
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    url,
                    headers=headers,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response:
                    
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                    
                    if response.status == 200:
                        voices_data = await response.json()
                        voices = voices_data.get('voices', [])
                        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(voices)} –≥–æ–ª–æ—Å–æ–≤!")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥–æ–ª–æ—Å–æ–≤
                        for i, voice in enumerate(voices[:5]):
                            print(f"  {i+1}. {voice.get('name')} ({voice.get('voice_id')}) - {voice.get('category')}")
                        
                        return True
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                        print(f"üìÑ –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_elevenlabs_tts_direct(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ—á–∏ ElevenLabs –±–µ–∑ –ø—Ä–æ–∫—Å–∏"""
        print("\nüé§ –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ ElevenLabs (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)")
        print("=" * 60)
        
        if not self.api_keys or not self.voices:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤!")
            return False
        
        # –í—ã–±–∏—Ä–∞–µ–º –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
        female_voice = next((v for v in self.voices if v.get('gender') == 'female'), self.voices[0])
        print(f"üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å: {female_voice.get('name')} ({female_voice.get('voice_id')})")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç ElevenLabs TTS –±–µ–∑ –ø—Ä–æ–∫—Å–∏. –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
        print(f"üìù –¢–µ–∫—Å—Ç: {test_text}")
        
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{female_voice.get('voice_id')}"
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": self.api_keys[0]
        }
        
        data = {
            "text": test_text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.5,
                "similarity_boost": 0.5
            }
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    url,
                    headers=headers,
                    json=data,
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    print(f"üìä –°—Ç–∞—Ç—É—Å: {response.status}")
                    
                    if response.status == 200:
                        audio_data = await response.read()
                        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞—É–¥–∏–æ! –†–∞–∑–º–µ—Ä: {len(audio_data)} bytes")
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
                        os.makedirs("test_audio", exist_ok=True)
                        audio_file = f"test_audio/elevenlabs_direct_test.mp3"
                        with open(audio_file, "wb") as f:
                            f.write(audio_data)
                        print(f"üíæ –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {audio_file}")
                        
                        return True
                    else:
                        error_text = await response.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status}")
                        print(f"üìÑ –û—Ç–≤–µ—Ç: {error_text[:200]}...")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    async def test_multiple_voices(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞"""
        print("\nüé§ –¢–µ—Å—Ç 3: –†–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞ ElevenLabs")
        print("=" * 60)
        
        if not self.api_keys or not self.voices:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤!")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –≥–æ–ª–æ—Å–∞
        test_voices = self.voices[:3]
        test_text = "–¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"
        
        results = []
        
        for i, voice in enumerate(test_voices):
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–æ–ª–æ—Å {i+1}/3: {voice.get('name')} ({voice.get('gender')})")
            
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.post(
                        f"https://api.elevenlabs.io/v1/text-to-speech/{voice.get('voice_id')}",
                        headers={
                            "Accept": "audio/mpeg",
                            "Content-Type": "application/json",
                            "xi-api-key": self.api_keys[0]
                        },
                        json={
                            "text": test_text,
                            "model_id": "eleven_multilingual_v2"
                        },
                        timeout=aiohttp.ClientTimeout(total=30)
                    ) as response:
                        
                        if response.status == 200:
                            audio_data = await response.read()
                            print(f"‚úÖ –ì–æ–ª–æ—Å {voice.get('name')} —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–∞–∑–º–µ—Ä: {len(audio_data)} bytes")
                            results.append((voice.get('name'), True, len(audio_data)))
                        else:
                            print(f"‚ùå –ì–æ–ª–æ—Å {voice.get('name')} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.status}")
                            results.append((voice.get('name'), False, 0))
                            
            except Exception as e:
                print(f"‚ùå –ì–æ–ª–æ—Å {voice.get('name')} –æ—à–∏–±–∫–∞: {e}")
                results.append((voice.get('name'), False, 0))
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        working_voices = [r for r in results if r[1]]
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(working_voices)}/{len(test_voices)} –≥–æ–ª–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        for voice_name, success, size in results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"  {status} {voice_name} - {size} bytes")
        
        return len(working_voices) > 0
    
    async def test_performance(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        print("\nüé§ –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ElevenLabs")
        print("=" * 60)
        
        if not self.api_keys or not self.voices:
            print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤!")
            return False
        
        import time
        
        voice = self.voices[0]
        test_text = "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ElevenLabs"
        
        print(f"üé§ –ì–æ–ª–æ—Å: {voice.get('name')}")
        print(f"üìù –¢–µ–∫—Å—Ç: {test_text}")
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"https://api.elevenlabs.io/v1/text-to-speech/{voice.get('voice_id')}",
                    headers={
                        "Accept": "audio/mpeg",
                        "Content-Type": "application/json",
                        "xi-api-key": self.api_keys[0]
                    },
                    json={
                        "text": test_text,
                        "model_id": "eleven_multilingual_v2"
                    },
                    timeout=aiohttp.ClientTimeout(total=60)
                ) as response:
                    
                    if response.status == 200:
                        audio_data = await response.read()
                        end_time = time.time()
                        
                        duration = end_time - start_time
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—Ä–µ–º—è: {duration:.2f}s, –†–∞–∑–º–µ—Ä: {len(audio_data)} bytes")
                        print(f"üìà –°–∫–æ—Ä–æ—Å—Ç—å: {len(audio_data)/duration:.0f} bytes/sec")
                        
                        return True
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {response.status}")
                        return False
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs TTS (–ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)")
    print("=" * 80)
    
    tester = ElevenLabsDirectTester()
    
    if not tester.api_keys:
        print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π ElevenLabs! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª.")
        return
    
    if not tester.voices:
        print("‚ùå –ù–µ—Ç –≥–æ–ª–æ—Å–æ–≤! –ó–∞–ø—É—Å—Ç–∏—Ç–µ fetch_eleven_voices.py")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    tests = [
        ("–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤", tester.test_elevenlabs_voices_direct),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏", tester.test_elevenlabs_tts_direct),
        ("–†–∞–∑–Ω—ã–µ –≥–æ–ª–æ—Å–∞", tester.test_multiple_voices),
        ("–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", tester.test_performance)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*80}")
        print(f"üß™ {test_name}")
        print('='*80)
        
        try:
            result = await test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–®–ï–õ")
                
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print('='*80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"{test_name}: {status}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏! ElevenLabs —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    elif passed > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    else:
        print("‚ùå ElevenLabs –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.")

if __name__ == "__main__":
    asyncio.run(main())
