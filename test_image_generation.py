#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ß–∞—Ç—É–º–±–µ
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É: –ø—Ä–æ–º–ø—Ç—ã ‚Üí LLM ‚Üí JSON ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
"""

import sys
import os
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
env_path = Path(__file__).parent / '.env'
if env_path.exists():
    load_dotenv(env_path)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
else:
    print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s'
)

logger = logging.getLogger("test_image_generation")

async def test_env_loading():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    required_vars = [
        "OPENROUTER_API_KEY",
        "TELEGRAM_BOT_TOKEN", 
        "STABLE_HORDE_API_KEY",
        "HF_API_KEY"
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.environ.get(var, "")
        if value and value != "your_openrouter_api_key":
            print(f"‚úÖ {var}: {'*' * 8}{value[-4:] if len(value) > 4 else value}")
        else:
            print(f"‚ùå {var}: –ù–ï –ù–ê–°–¢–†–û–ï–ù")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        print("   –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return False
    else:
        print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True

async def test_prompt_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    try:
        from api.smart_bot_trigger import SmartBotTrigger
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger = SmartBotTrigger()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        mock_context = {
            'time_info': {'datetime': '2025-08-15 17:00:00', 'weekday': '–ø—è—Ç–Ω–∏—Ü–∞', 'time_of_day': 'afternoon'},
            'recent_messages': [],
            'recent_responses': [],
            'relevant_chunks': [],
            'current_topic': '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
            'participant_names': {},
            'dialogue_context': ''
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = trigger._build_system_prompt(
            mock_context['time_info'],
            mock_context['recent_responses'], 
            mock_context['current_topic']
        )
        
        print(f"üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ({len(system_prompt)} —Å–∏–º–≤–æ–ª–æ–≤):")
        if "–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô" in system_prompt:
            print("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ")
        else:
            print("‚ùå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ù–ï –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_message = trigger._format_recent_messages([], {})
        print(f"üìù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(user_message)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"   {user_message[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
        return False

async def test_llm_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å LLM"""
    print("\nüîç –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM")
    
    try:
        from api.smart_bot_trigger import SmartBotTrigger
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞
        trigger = SmartBotTrigger()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é LLM –∫–ª–∏–µ–Ω—Ç–∞
        if hasattr(trigger, '_llm_client') and trigger._llm_client:
            print("‚úÖ LLM –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        else:
            print("‚ö†Ô∏è LLM –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π
        from backend.config import OPENROUTER_API_KEYS
        if OPENROUTER_API_KEYS:
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ {len(OPENROUTER_API_KEYS)} OpenRouter API –∫–ª—é—á–µ–π")
        else:
            print("‚ùå OpenRouter API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM: {e}")
        return False

async def test_image_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ JSON –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    try:
        from utils.robust_json_parser import parse_image_json
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã LLM
        test_cases = [
            {
                'name': 'JSON –≤ markdown –±–ª–æ–∫–µ',
                'response': '–í–æ—Ç —Ç–≤–æ–π –∫–æ—Ç! ```json{"description": "–º–∏–ª—ã–π —Ä—ã–∂–∏–π –∫–æ—Ç —Å–∏–¥–∏—Ç –Ω–∞ –æ–∫–Ω–µ"}```',
                'expected': True
            },
            {
                'name': 'JSON –±–µ–∑ markdown',
                'response': '–í–æ—Ç —Ç–≤–æ–π –∫–æ—Ç! {"description": "–º–∏–ª—ã–π —Ä—ã–∂–∏–π –∫–æ—Ç —Å–∏–¥–∏—Ç –Ω–∞ –æ–∫–Ω–µ"}',
                'expected': True
            },
            {
                'name': '–ë–µ–∑ JSON',
                'response': '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
                'expected': False
            }
        ]
        
        for test_case in test_cases:
            print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º: {test_case['name']}")
            result = parse_image_json(test_case['response'])
            
            if result and 'description' in result:
                print(f"‚úÖ JSON –Ω–∞–π–¥–µ–Ω: {result['description'][:50]}...")
                if test_case['expected']:
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
                else:
                    print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            else:
                print("‚ùå JSON –Ω–µ –Ω–∞–π–¥–µ–Ω")
                if not test_case['expected']:
                    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
                else:
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –ù–ï —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è–º")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return False

async def test_image_generation_flow():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ñ–ª–æ—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç 5: –ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    try:
        from api.telegram_core import parse_and_generate_image
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å JSON
        test_response = """–í–æ—Ç —Ç–≤–æ–π –∫–æ—Ç! 

```json
{"description": "–º–∏–ª—ã–π —Ä—ã–∂–∏–π –∫–æ—Ç —Å–∏–¥–∏—Ç –Ω–∞ –æ–∫–Ω–µ, —Å–æ–ª–Ω–µ—á–Ω—ã–π —Å–≤–µ—Ç, —É—é—Ç–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞"}
```"""
        
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º parse_and_generate_image...")
        print(f"üìù –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {test_response[:100]}...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º chat_id
        test_chat_id = "-1002686615681"  # –ì—Ä—É–ø–ø–∞ –ê–ù–¢–ò–õ–û–ü–ê
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é (–≤ —Ç–µ—Å—Ç–µ –æ–Ω–∞ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
        result = await parse_and_generate_image(test_response, test_chat_id)
        
        print(f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result[:100]}...")
        
        if result and result != test_response:
            print("‚úÖ JSON —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞")
        else:
            print("‚ö†Ô∏è JSON –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–ª–æ—É: {e}")
        return False

async def test_typing_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ '–ø–µ—á–∞—Ç–∞–µ—Ç'"""
    print("\nüîç –¢–µ—Å—Ç 6: –°—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç'")
    
    try:
        from api.telegram_core import send_chat_action
        
        # –¢–µ—Å—Ç–æ–≤—ã–π chat_id
        test_chat_id = "-1002686615681"  # –ì—Ä—É–ø–ø–∞ –ê–ù–¢–ò–õ–û–ü–ê
        
        print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ '–ø–µ—á–∞—Ç–∞–µ—Ç'...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        statuses = [
            ("typing", "‚å®Ô∏è –ü–µ—á–∞—Ç–∞–µ—Ç..."),
            ("upload_photo", "üì∏ –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ...")
        ]
        
        for action, description in statuses:
            print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º: {description}")
            success = await send_chat_action(test_chat_id, action)
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if success else '‚ùå –û—à–∏–±–∫–∞'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ß–∞—Ç—É–º–±–µ...")
    print("=" * 60)
    
    tests = [
        ("–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_env_loading),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤", test_prompt_generation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM", test_llm_integration),
        ("–ü–∞—Ä—Å–∏–Ω–≥ JSON", test_image_parsing),
        ("–ü–æ–ª–Ω—ã–π —Ñ–ª–æ—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", test_image_generation_flow),
        ("–°—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç'", test_typing_status)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
        return False

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
