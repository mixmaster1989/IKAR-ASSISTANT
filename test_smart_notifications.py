#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ –ò–ò
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.api.smart_notifications import SmartNotifications

async def test_smart_notifications():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
    notifications = SmartNotifications()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π chat_id
    test_chat_id = "test_chat_123"
    
    print("\n1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    for process_type, templates in notifications.notification_templates.items():
        print(f"   {process_type}: {len(templates)} —à–∞–±–ª–æ–Ω–æ–≤")
        print(f"   –ü—Ä–∏–º–µ—Ä: {templates[0]}")
        print(f"   Markdown: {templates[0].replace('*', '').replace('\\.', '.')}")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(notifications.active_notifications)}")
    print(f"   –ï—Å—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {test_chat_id}: {notifications.has_active_notification(test_chat_id)}")
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏):")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    print("   - send_thinking_notification: OK (—Å–∏–º—É–ª—è—Ü–∏—è)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    notifications.active_notifications[test_chat_id] = "test_message_id"
    print("   - update_notification: OK (—Å–∏–º—É–ª—è—Ü–∏—è)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    print("   - complete_notification: OK (—Å–∏–º—É–ª—è—Ü–∏—è)")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–º–µ–Ω—É
    print("   - cancel_notification: OK (—Å–∏–º—É–ª—è—Ü–∏—è)")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üéØ –°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")

def test_notification_templates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —à–∞–±–ª–æ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
    
    notifications = SmartNotifications()
    
    for process_type, templates in notifications.notification_templates.items():
        print(f"\n{process_type.upper()}:")
        for i, template in enumerate(templates, 1):
            print(f"  {i}. {template}")
    
    print(f"\nüìä –í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(notifications.notification_templates)}")
    total_templates = sum(len(templates) for templates in notifications.notification_templates.values())
    print(f"üìä –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: {total_templates}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã
    test_notification_templates()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    asyncio.run(test_smart_notifications())
    
    print("\nüéâ –†–ï–í–û–õ–Æ–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("‚ú® –°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–µ–∫—Ç!")
