#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ x-ai/grok-4-fast:free —Å —Ç–≤–æ–∏–º –∫–ª—é—á–æ–º
"""

import asyncio
import aiohttp
import json

async def test_grok_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å x-ai/grok-4-fast:free"""
    
    # –¢–≤–æ–π –∫–ª—é—á
    test_key = "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"
    key_suffix = test_key[-10:] if len(test_key) > 10 else test_key
    
    print(f"üîç –¢–ï–°–¢ –ú–û–î–ï–õ–ò x-ai/grok-4-fast:free")
    print("=" * 50)
    print(f"üîë –ö–ª—é—á: ...{key_suffix}")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    base_url = "https://openrouter.ai/api/v1"
    headers = {
        "Authorization": f"Bearer {test_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/ikar-project/ikar",
        "X-Title": "IKAR Test"
    }
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    payload = {
        "model": "x-ai/grok-4-fast:free",
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            }
        ],
        "max_tokens": 10,
        "temperature": 0.3
    }
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {payload['model']}")
    print(f"üì§ –ó–∞–ø—Ä–æ—Å: {payload['messages'][0]['content']}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status}")
                
                response_text = await response.text()
                print(f"üì• –û—Ç–≤–µ—Ç: {response_text}")
                
                if response.status == 200:
                    try:
                        response_data = json.loads(response_text)
                        if 'choices' in response_data and response_data['choices']:
                            content = response_data['choices'][0]['message']['content']
                            print(f"‚úÖ –£–°–ü–ï–•! –û—Ç–≤–µ—Ç: {content}")
                            return True
                        else:
                            print("‚ö†Ô∏è –ù–µ—Ç choices –≤ –æ—Ç–≤–µ—Ç–µ")
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                else:
                    print(f"‚ùå –û–®–ò–ë–ö–ê {response.status}")
                    try:
                        error_data = json.loads(response_text)
                        print(f"üì• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                    except:
                        print(f"üì• –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_text}")
                        
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        import traceback
        print(f"üì• Traceback: {traceback.format_exc()}")
    
    return False

if __name__ == "__main__":
    result = asyncio.run(test_grok_model())
    if result:
        print("\nüéâ –ú–û–î–ï–õ–¨ x-ai/grok-4-fast:free –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("\nüí• –ú–û–î–ï–õ–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
