#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π OpenRouter
"""

import asyncio
import aiohttp
import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent / "backend"))

from backend.config import Config, get_all_openrouter_keys

async def test_key_auth(key, key_index):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    
    key_suffix = key[-10:] if len(key) > 10 else key
    print(f"üîë –ö–ª—é—á #{key_index + 1} (...{key_suffix})")
    
    # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    base_url = "https://openrouter.ai/api/v1"
    headers = {
        "Authorization": f"Bearer {key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/ikar-project/ikar",
        "X-Title": "IKAR Test"
    }
    
    payload = {
        "model": "deepseek/deepseek-r1-0528:free",
        "messages": [{"role": "user", "content": "Hi"}],
        "max_tokens": 5,
        "temperature": 0.3
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                
                response_text = await response.text()
                
                if response.status == 200:
                    print(f"   ‚úÖ –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù - —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    return True, "working"
                elif response.status == 401:
                    print(f"   ‚ùå –ù–ï –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù - User not found")
                    return False, "auth_failed"
                elif response.status == 429:
                    print(f"   ‚ö†Ô∏è  –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù - Rate limit")
                    return True, "rate_limited"
                elif response.status == 402:
                    print(f"   ‚ö†Ô∏è  –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù - No credits")
                    return True, "no_credits"
                else:
                    print(f"   ‚ùì –°—Ç–∞—Ç—É—Å {response.status}: {response_text[:100]}")
                    return False, f"status_{response.status}"
                    
    except Exception as e:
        print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
        return False, "exception"

async def test_all_keys():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –≤—Å–µ—Ö –∫–ª—é—á–µ–π"""
    
    print("üîç –¢–ï–°–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò –í–°–ï–• –ö–õ–Æ–ß–ï–ô")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏
    config = Config()
    api_keys = get_all_openrouter_keys()
    
    if not api_keys:
        print("‚ùå –ù–ï–¢ –ö–õ–Æ–ß–ï–ô!")
        return
    
    print(f"üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {len(api_keys)}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
    auth_results = []
    
    for i, key in enumerate(api_keys):
        is_auth, status = await test_key_auth(key, i)
        auth_results.append((i + 1, is_auth, status))
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await asyncio.sleep(0.5)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò")
    print("=" * 50)
    
    authenticated = [r for r in auth_results if r[1]]
    not_authenticated = [r for r in auth_results if not r[1]]
    
    print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(authenticated)}")
    print(f"‚ùå –ù–ï –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(not_authenticated)}")
    
    if authenticated:
        print(f"\nüéâ –†–ê–ë–û–ß–ò–ï –ö–õ–Æ–ß–ò:")
        for key_num, is_auth, status in authenticated:
            print(f"   #{key_num} - {status}")
    
    if not_authenticated:
        print(f"\nüí• –ù–ï–ò–°–ü–†–ê–í–ù–´–ï –ö–õ–Æ–ß–ò:")
        for key_num, is_auth, status in not_authenticated:
            print(f"   #{key_num} - {status}")
    
    return auth_results

if __name__ == "__main__":
    asyncio.run(test_all_keys())
