#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–∞ OpenRouter —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
"""

import asyncio
import aiohttp
import json
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent / "backend"))

from backend.config import Config, get_all_openrouter_keys

async def test_single_key():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–ª—é—á —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    
    print("üîç –¢–ï–°–¢ –û–î–ù–û–ì–û –ö–õ–Æ–ß–ê OPENROUTER")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏
    config = Config()
    api_keys = get_all_openrouter_keys()
    
    if not api_keys:
        print("‚ùå –ù–ï–¢ –ö–õ–Æ–ß–ï–ô!")
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∫–ª—é—á
    test_key = api_keys[0]
    key_suffix = test_key[-10:] if len(test_key) > 10 else test_key
    
    print(f"üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á: ...{key_suffix}")
    print(f"üìä –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {len(api_keys)}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    base_url = "https://openrouter.ai/api/v1"
    headers = {
        "Authorization": f"Bearer {test_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/ikar-project/ikar",
        "X-Title": "IKAR Test"
    }
    
    payload = {
        "model": "deepseek/deepseek-r1-0528:free",
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            }
        ],
        "max_tokens": 10,
        "temperature": 0.3
    }
    
    print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏: {payload['model']}")
    print(f"üì§ Payload: {json.dumps(payload, indent=2, ensure_ascii=False)}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{base_url}/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                print(f"üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: {dict(response.headers)}")
                
                # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
                response_text = await response.text()
                print(f"üì• –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response_text}")
                
                if response.status == 200:
                    try:
                        response_data = json.loads(response_text)
                        print(f"‚úÖ –£–°–ü–ï–•! –û—Ç–≤–µ—Ç: {response_data}")
                        
                        if 'choices' in response_data and response_data['choices']:
                            content = response_data['choices'][0]['message']['content']
                            print(f"üéâ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {content}")
                        else:
                            print("‚ö†Ô∏è –ù–µ—Ç choices –≤ –æ—Ç–≤–µ—Ç–µ")
                            
                    except json.JSONDecodeError as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                        print(f"üì• –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç: {response_text}")
                        
                else:
                    print(f"‚ùå –û–®–ò–ë–ö–ê HTTP {response.status}")
                    print(f"üì• –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {response_text}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É
                    try:
                        error_data = json.loads(response_text)
                        print(f"üì• –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                    except:
                        print("üì• –û—à–∏–±–∫–∞ –Ω–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ")
                        
    except asyncio.TimeoutError:
        print("‚ùå –¢–ê–ô–ú–ê–£–¢ - –∑–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
    except Exception as e:
        print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {type(e).__name__}: {e}")
        import traceback
        print(f"üì• Traceback: {traceback.format_exc()}")

if __name__ == "__main__":
    asyncio.run(test_single_key())
