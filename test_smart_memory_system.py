"""
üß™ Comprehensive —Ç–µ—Å—Ç—ã –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import asyncio
import logging
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s'
)

logger = logging.getLogger("test_smart_memory")

class MockLLMClient:
    """–ú–æ–∫ LLM –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    async def chat_completion(self, user_message: str, system_prompt: str = "", **kwargs) -> str:
        """–ú–æ–∫–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã LLM"""
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∂–∞—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        if "JSON —Ä–µ–∑—é–º–µ" in user_message or "–†–ê–ó–ì–û–í–û–† –í –ì–†–£–ü–ü–ï" in user_message:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ —Ä–µ–∑—é–º–µ
            if "–ø—Ä–æ–µ–∫—Ç" in user_message.lower():
                return json.dumps({
                    "topic": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                    "summary": "–ö–æ–º–∞–Ω–¥–∞ –æ–±—Å—É–∂–¥–∞–ª–∞ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–ª–∏ –∑–∞–¥–∞—á–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –¥–µ–¥–ª–∞–π–Ω—ã. –ò–≤–∞–Ω –≤–∑—è–ª –Ω–∞ —Å–µ–±—è backend, –ú–∞—Ä–∏—è - frontend.",
                    "importance": 0.8,
                    "key_points": ["—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á", "–¥–µ–¥–ª–∞–π–Ω—ã –ø—Ä–æ–µ–∫—Ç–∞", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è"],
                    "participants_activity": {"user1": "–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á–∏", "user2": "–ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ —Ä–µ—à–µ–Ω–∏—è"}
                })
            elif "–≤—Å—Ç—Ä–µ—á–∞" in user_message.lower():
                return json.dumps({
                    "topic": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏",
                    "summary": "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00 –≤ –æ—Ñ–∏—Å–µ. –û–±—Å—É–∂–¥–∞–ª–∏ –ø–æ–≤–µ—Å—Ç–∫—É –¥–Ω—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
                    "importance": 0.7,
                    "key_points": ["–≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏", "–º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", "–ø–æ–≤–µ—Å—Ç–∫–∞ –¥–Ω—è"],
                    "participants_activity": {"user1": "–ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤—Ä–µ–º—è", "user2": "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞ —É—á–∞—Å—Ç–∏–µ"}
                })
            elif "–æ–±–µ–¥" in user_message.lower():
                return json.dumps({
                    "topic": "–ü–ª–∞–Ω—ã –Ω–∞ –æ–±–µ–¥",
                    "summary": "–ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–∞–ª–∞ –≥–¥–µ –ø–æ–æ–±–µ–¥–∞—Ç—å, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–∞—Ñ–µ. –†–µ—à–∏–ª–∏ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –≤ 13:00.",
                    "importance": 0.4,
                    "key_points": ["–≤—ã–±–æ—Ä –∫–∞—Ñ–µ", "–≤—Ä–µ–º—è –æ–±–µ–¥–∞"],
                    "participants_activity": {"user1": "–ø—Ä–µ–¥–ª–æ–∂–∏–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã", "user2": "–≤—ã–±—Ä–∞–ª–∞ –∫–∞—Ñ–µ"}
                })
            else:
                return json.dumps({
                    "topic": "–û–±—â–µ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ",
                    "summary": "–£—á–∞—Å—Ç–Ω–∏–∫–∏ –æ–±—Å—É–∂–¥–∞–ª–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–π –æ–±—Å—Ç–∞–Ω–æ–≤–∫–µ.",
                    "importance": 0.3,
                    "key_points": ["–æ–±—â–µ–Ω–∏–µ", "–æ–±–º–µ–Ω –º–Ω–µ–Ω–∏—è–º–∏"],
                    "participants_activity": {"user1": "–∞–∫—Ç–∏–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª", "user2": "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –±–µ—Å–µ–¥—É"}
                })
        
        # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
        else:
            responses = [
                "ü§ñ –ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É, —á—Ç–æ –≤—ã –æ–±—Å—É–∂–¥–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–µ—â–∏. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –°—É–¥—è –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É, —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ. –ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
                "üî• –û—Ç–ª–∏—á–Ω–∞—è –±–µ—Å–µ–¥–∞! –ú–æ–≥—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ –ø–æ —Ç–µ–º–µ.",
                "üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ê —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥ –∫ —ç—Ç–æ–º—É –≤–æ–ø—Ä–æ—Å—É?",
                "üìä –°—É–¥—è –ø–æ –∏—Å—Ç–æ—Ä–∏–∏, —ç—Ç–∞ —Ç–µ–º–∞ –≤–∞—Å —á–∞—Å—Ç–æ –≤–æ–ª–Ω—É–µ—Ç. –ï—Å—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å?"
            ]
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            import hashlib
            hash_val = int(hashlib.md5(user_message.encode()).hexdigest(), 16)
            return responses[hash_val % len(responses)]

class SmartMemoryTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.mock_llm = MockLLMClient()
        self.test_chat_id = "test_chat_123"
        self.test_users = ["user_alice", "user_bob", "user_charlie"]
        
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º comprehensive —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏")
        
        try:
            # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            await self.test_system_initialization()
            
            # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
            await self.test_message_storage()
            
            # –¢–µ—Å—Ç 3: –ù–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            await self.test_night_optimization()
            
            # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º
            await self.test_smart_retrieval()
            
            # –¢–µ—Å—Ç 5: –£–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –±–æ—Ç–∞
            await self.test_smart_bot_trigger()
            
            # –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.test_integration()
            
            logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            raise
    
    async def test_system_initialization(self):
        """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîß –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã")
        
        import sys
        import os
        sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))
        
        from memory.smart_memory_manager import get_smart_memory_manager
        from memory.night_optimizer import get_night_optimizer
        from memory.smart_retriever import get_smart_retriever
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        memory_manager = get_smart_memory_manager()
        smart_retriever = get_smart_retriever(memory_manager)
        night_optimizer = get_night_optimizer(memory_manager, self.mock_llm)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = memory_manager.get_stats()
        assert isinstance(stats, dict), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    
    async def test_message_storage(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üìù –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        from memory.smart_memory_manager import get_smart_memory_manager
        memory_manager = get_smart_memory_manager()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        test_messages = self.generate_synthetic_messages()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in test_messages:
            success = memory_manager.add_group_message(
                self.test_chat_id, 
                msg['user_id'], 
                msg['content'], 
                msg['timestamp']
            )
            assert success, f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg['content']}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_messages = memory_manager.get_recent_messages(self.test_chat_id, limit=10)
        assert len(recent_messages) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è"
        
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø–æ–ª—É—á–µ–Ω–æ {len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    async def test_night_optimization(self):
        """–¢–µ—Å—Ç –Ω–æ—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("üåô –¢–µ—Å—Ç 3: –ù–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        from memory.night_optimizer import get_night_optimizer
        from memory.smart_memory_manager import get_smart_memory_manager
        
        memory_manager = get_smart_memory_manager()
        night_optimizer = get_night_optimizer(memory_manager, self.mock_llm)
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
        result = await night_optimizer.force_optimize_chat(self.test_chat_id)
        
        assert result['status'] in ['success', 'no_messages'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {result}"
        
        if result['status'] == 'success':
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result['message']}")
        else:
            logger.info("‚ÑπÔ∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞)")
    
    async def test_smart_retrieval(self):
        """–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º"""
        logger.info("üîç –¢–µ—Å—Ç 4: –£–º–Ω—ã–π –ø–æ–∏—Å–∫")
        
        from memory.smart_retriever import get_smart_retriever
        from memory.smart_memory_manager import get_smart_memory_manager
        
        memory_manager = get_smart_memory_manager()
        smart_retriever = get_smart_retriever(memory_manager)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
        relevant_chunks = await smart_retriever.find_relevant_chunks(
            self.test_chat_id, 
            "–ø—Ä–æ–µ–∫—Ç —Ä–∞–±–æ—Ç–∞ –∑–∞–¥–∞—á–∏", 
            "–æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ
        current_time = time.time()
        for chunk_data in relevant_chunks:
            age_days = (current_time - chunk_data.chunk.created_at) / (24 * 3600)
            threshold = memory_manager.calculate_relevance_threshold(age_days)
            
            assert chunk_data.relevance_score >= threshold, \
                f"–ß–∞–Ω–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–æ–π—Ç–∏ –ø–æ—Ä–æ–≥: {chunk_data.relevance_score} < {threshold}"
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(relevant_chunks)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞
        stats = await smart_retriever.get_retriever_stats(self.test_chat_id)
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞: {stats}")
    
    async def test_smart_bot_trigger(self):
        """–¢–µ—Å—Ç —É–º–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –±–æ—Ç–∞"""
        logger.info("ü§ñ –¢–µ—Å—Ç 5: –£–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –±–æ—Ç–∞")
        
        from api.smart_bot_trigger import process_smart_bot_trigger
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        response = await process_smart_bot_trigger(
            self.test_chat_id,
            "–ü—Ä–∏–≤–µ—Ç –±–æ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "user_alice"
        )
        
        assert response is not None, "–¢—Ä–∏–≥–≥–µ—Ä –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç"
        assert len(response) > 0, "–û—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        logger.info(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª: {response[:50]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º cooldown
        response2 = await process_smart_bot_trigger(
            self.test_chat_id,
            "–±–æ—Ç, –µ—â–µ –≤–æ–ø—Ä–æ—Å",
            "user_bob"
        )
        
        assert "cooldown" in response2.lower() or "–∞–∫—Ç–∏–≤–µ–Ω" in response2.lower(), \
            "–î–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å cooldown"
        
        logger.info("‚úÖ Cooldown —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    async def test_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üîó –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        from memory.memory_integration import get_memory_integration
        
        integration = get_memory_integration()
        await integration.initialize()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        success = integration.add_group_message(
            self.test_chat_id,
            "user_test",
            "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é",
            time.time()
        )
        
        assert success, "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context = await integration.get_smart_context_for_bot(
            self.test_chat_id,
            "—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
            "user_test"
        )
        
        assert isinstance(context, dict), "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        assert 'time_info' in context, "–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await integration.get_memory_stats(self.test_chat_id)
        assert isinstance(stats, dict), "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
        
        logger.info("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    def generate_synthetic_messages(self) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        base_time = time.time() - (7 * 24 * 3600)  # 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
        
        messages = [
            # –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥)
            {"user_id": "user_alice", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞ —Å –ø—Ä–æ–µ–∫—Ç–æ–º?", "timestamp": base_time},
            {"user_id": "user_bob", "content": "–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ backend —á–∞—Å—Ç—å—é", "timestamp": base_time + 300},
            {"user_id": "user_charlie", "content": "–ê —è –¥–µ–ª–∞—é frontend", "timestamp": base_time + 600},
            {"user_id": "user_alice", "content": "–û—Ç–ª–∏—á–Ω–æ! –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º –¥–µ–¥–ª–∞–π–Ω?", "timestamp": base_time + 900},
            {"user_id": "user_bob", "content": "–î—É–º–∞—é, –∫ –∫–æ–Ω—Ü—É –Ω–µ–¥–µ–ª–∏ —É—Å–ø–µ–µ–º", "timestamp": base_time + 1200},
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏ (3 –¥–Ω—è –Ω–∞–∑–∞–¥)
            {"user_id": "user_charlie", "content": "–ù—É–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è –∏ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", "timestamp": base_time + (4 * 24 * 3600)},
            {"user_id": "user_alice", "content": "–î–∞–≤–∞–π—Ç–µ –∑–∞–≤—Ç—Ä–∞ –≤ 18:00?", "timestamp": base_time + (4 * 24 * 3600) + 300},
            {"user_id": "user_bob", "content": "–ú–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è?", "timestamp": base_time + (4 * 24 * 3600) + 600},
            {"user_id": "user_alice", "content": "–í –æ—Ñ–∏—Å–µ, –≤ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–æ–π", "timestamp": base_time + (4 * 24 * 3600) + 900},
            
            # –û–±—Å—É–∂–¥–µ–Ω–∏–µ –æ–±–µ–¥–∞ (1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥)
            {"user_id": "user_bob", "content": "–ö—Ç–æ –∏–¥–µ—Ç –Ω–∞ –æ–±–µ–¥?", "timestamp": base_time + (6 * 24 * 3600)},
            {"user_id": "user_charlie", "content": "–Ø —Å –≤–∞–º–∏! –ö—É–¥–∞ –ø–æ–π–¥–µ–º?", "timestamp": base_time + (6 * 24 * 3600) + 300},
            {"user_id": "user_alice", "content": "–ï—Å—Ç—å –Ω–æ–≤–æ–µ –∫–∞—Ñ–µ —Ä—è–¥–æ–º", "timestamp": base_time + (6 * 24 * 3600) + 600},
            {"user_id": "user_bob", "content": "–ó–≤—É—á–∏—Ç —Ö–æ—Ä–æ—à–æ, –≤ 13:00?", "timestamp": base_time + (6 * 24 * 3600) + 900},
            
            # –ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å–µ–≥–æ–¥–Ω—è)
            {"user_id": "user_alice", "content": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ –≤—Å–µ–º!", "timestamp": time.time() - 3600},
            {"user_id": "user_charlie", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?", "timestamp": time.time() - 3000},
            {"user_id": "user_bob", "content": "–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", "timestamp": time.time() - 2400},
            {"user_id": "user_alice", "content": "–¢–æ–≥–¥–∞ –∑–∞ –¥–µ–ª–æ!", "timestamp": time.time() - 1800},
        ]
        
        return messages

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = SmartMemoryTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main())