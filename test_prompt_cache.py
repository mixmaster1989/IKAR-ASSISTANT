#!/usr/bin/env python3
"""
–¢–µ—Å—Ç Prompt Caching –¥–ª—è Grok 4 Fast
"""

import asyncio
import aiohttp
import json
import os
import time
from dotenv import load_dotenv

load_dotenv('/root/IKAR-ASSISTANT/.env')

async def test_prompt_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    api_key = os.getenv('OPENROUTER_API_KEY_PAID')
    if not api_key:
        print("‚ùå –ü–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á: {api_key[:20]}...")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/yourusername/ikar",
        "X-Title": "IKAR Cache Test"
    }
    
    # –ë–æ–ª—å—à–æ–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    system_prompt = """–¢—ã ‚Äî –ò–∫–∞—Ä –ò–∫–∞—Ä—ã—á, —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–ò–ö–ê–†¬ª. 

–ö–æ–º–ø–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –≥–æ—Ä–æ–¥–µ –®–∞—Ö—Ç—ã, –†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å. –û—Å–Ω–æ–≤–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞: –∫–∞—Å—Å–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ (–ö–ö–ú), –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã (1–° –∏ –°–ë–ò–°), –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ.

–£ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–≤–∞ –æ—Ñ–∏—Å–∞:
- –û—Å–Ω–æ–≤–Ω–æ–π ‚Äî –≥. –®–∞—Ö—Ç—ã, —É–ª. –®–µ–≤—á–µ–Ω–∫–æ 76, 5-—ç—Ç–∞–∂–Ω–∞—è ¬´—Ö—Ä—É—â—ë–≤–∫–∞¬ª, 4-–π –ø–æ–¥—ä–µ–∑–¥ (–∫—Ä–∞–π–Ω–∏–π —Å–ø—Ä–∞–≤–∞), —Ü–æ–∫–æ–ª—å–Ω—ã–π —ç—Ç–∞–∂, –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É –ø—Ä—è–º–æ –¥–æ –∫–æ–Ω—Ü–∞.
- –í—Ç–æ—Ä–æ–π ‚Äî –±–∏–∑–Ω–µ—Å-–æ—Å—Ç—Ä–æ–≤–æ–∫ –≤ –¥–µ–ª–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ ¬´–ì–æ—Ä–æ–¥ –ë—É–¥—É—â–µ–≥–æ¬ª, –ø—Ä—è–º–æ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –æ–∫–æ—à–µ–∫ –Ω–∞–ª–æ–≥–æ–≤–æ–π.

–ö–û–ù–¢–ê–ö–¢–´ –ö–û–ú–ü–ê–ù–ò–ò:
- –ì–æ—Ä–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä: +78636237037
- –ö–∞—Å—Å–∞: +7 919-880-59-99
- –ê–Ω–≥–µ–ª–∏–Ω–∞: +7 988-998-07-00
- –ò–≥–æ—Ä—å: +7 988-998-78-78
- –í–ª–∞–¥: +7 988-575-61-61

–¶–ï–ù–´ –ù–ê –ö–ê–°–°–û–í–£–Æ –¢–ï–•–ù–ò–ö–£:
- –≠–≤–æ—Ç–æ—Ä 5: 24,900 ‚ÇΩ (–±–µ–∑ –§–ù), 38,000 ‚ÇΩ (–§–ù 15 –º–µ—Å), 43,000 ‚ÇΩ (–ø–æ–¥ –∫–ª—é—á)
- –≠–≤–æ—Ç–æ—Ä 7.2: 29,900 ‚ÇΩ (–±–µ–∑ –§–ù), 43,000 ‚ÇΩ (–§–ù 15 –º–µ—Å), 48,000 ‚ÇΩ (–ø–æ–¥ –∫–ª—é—á)
- –ê—Ç–æ–ª Sigma 7: 21,500 ‚ÇΩ (–±–µ–∑ –§–ù), 34,600 ‚ÇΩ (–§–ù 15 –º–µ—Å), 39,600 ‚ÇΩ (–ø–æ–¥ –∫–ª—é—á)

–ò–¢-–£–°–õ–£–ì–ò:
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1–° (–¥–æ 3 –≤–µ—Ä—Å–∏–π): 1,300 ‚ÇΩ
- –£–¥–∞–ª—ë–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: 650 ‚ÇΩ
- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ 1–° + —É–¥–∞–ª—ë–Ω–∫–∞: 2,600 ‚ÇΩ

–û—Ç–≤–µ—á–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ –¥–µ–ª—É!"""
    
    print("üß™ –¢–ï–°–¢ 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (Cache Write)")
    print("=" * 50)
    
    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –∫—ç—à
    payload1 = {
        "model": "x-ai/grok-4-fast",
        "messages": [
            {
                "role": "system",
                "content": system_prompt,
                "metadata": {
                    "cache": True
                }
            },
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ü–µ–Ω—ã –Ω–∞ –∫–∞—Å—Å—ã –≠–≤–æ—Ç–æ—Ä."
            }
        ],
        "max_tokens": 200,
        "temperature": 0.3
    }
    
    start_time = time.time()
    
    async with aiohttp.ClientSession() as session:
        async with session.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload1,
            timeout=aiohttp.ClientTimeout(total=30)
        ) as response:
            
            first_time = time.time() - start_time
            
            if response.status == 200:
                data1 = await response.json()
                
                if 'usage' in data1:
                    usage1 = data1['usage']
                    print(f"üìà –¢–û–ö–ï–ù–´ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å):")
                    print(f"   –í—Ö–æ–¥–Ω—ã–µ: {usage1.get('prompt_tokens', 0):,}")
                    print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ: {usage1.get('completion_tokens', 0):,}")
                    print(f"   –í—Å–µ–≥–æ: {usage1.get('total_tokens', 0):,}")
                    print(f"‚è±Ô∏è –í—Ä–µ–º—è: {first_time:.2f} —Å–µ–∫")
                
                if 'choices' in data1 and data1['choices']:
                    answer1 = data1['choices'][0]['message']['content']
                    print(f"ü§ñ –û–¢–í–ï–¢: {answer1[:100]}...")
                
                print("\nüß™ –¢–ï–°–¢ 2: –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (Cache Read)")
                print("=" * 50)
                
                # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
                payload2 = {
                    "model": "x-ai/grok-4-fast",
                    "messages": [
                        {
                            "role": "system",
                            "content": system_prompt,  # –¢–æ—Ç –∂–µ –ø—Ä–æ–º–ø—Ç
                            "metadata": {
                                "cache": True
                            }
                        },
                        {
                            "role": "user",
                            "content": "–ê —á—Ç–æ —Å —Ü–µ–Ω–∞–º–∏ –Ω–∞ –ê—Ç–æ–ª?"
                        }
                    ],
                    "max_tokens": 200,
                    "temperature": 0.3
                }
                
                start_time = time.time()
                
                async with session.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers=headers,
                    json=payload2,
                    timeout=aiohttp.ClientTimeout(total=30)
                ) as response2:
                    
                    second_time = time.time() - start_time
                    
                    if response2.status == 200:
                        data2 = await response2.json()
                        
                        if 'usage' in data2:
                            usage2 = data2['usage']
                            print(f"üìà –¢–û–ö–ï–ù–´ (–≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å):")
                            print(f"   –í—Ö–æ–¥–Ω—ã–µ: {usage2.get('prompt_tokens', 0):,}")
                            print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ: {usage2.get('completion_tokens', 0):,}")
                            print(f"   –í—Å–µ–≥–æ: {usage2.get('total_tokens', 0):,}")
                            print(f"‚è±Ô∏è –í—Ä–µ–º—è: {second_time:.2f} —Å–µ–∫")
                        
                        if 'choices' in data2 and data2['choices']:
                            answer2 = data2['choices'][0]['message']['content']
                            print(f"ü§ñ –û–¢–í–ï–¢: {answer2[:100]}...")
                        
                        print("\nüìä –ê–ù–ê–õ–ò–ó –ö–≠–®–ê:")
                        print("=" * 50)
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                        first_input = usage1.get('prompt_tokens', 0)
                        second_input = usage2.get('prompt_tokens', 0)
                        
                        if second_input < first_input:
                            saved_tokens = first_input - second_input
                            print(f"‚úÖ –ö–≠–® –†–ê–ë–û–¢–ê–ï–¢!")
                            print(f"   –°—ç–∫–æ–Ω–æ–º–ª–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {saved_tokens:,}")
                            print(f"   –≠–∫–æ–Ω–æ–º–∏—è: {saved_tokens/first_input*100:.1f}%")
                        else:
                            print(f"‚ùå –ö–≠–® –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
                            print(f"   –¢–æ–∫–µ–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ: {first_input:,}")
                        
                        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è
                        if second_time < first_time:
                            print(f"‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {first_time/second_time:.1f}x")
                        else:
                            print(f"‚è±Ô∏è –í—Ä–µ–º—è –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ")
                            
                    else:
                        text2 = await response2.text()
                        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ {response2.status}: {text2}")
            else:
                text1 = await response.text()
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ {response.status}: {text1}")

if __name__ == "__main__":
    asyncio.run(test_prompt_cache())
