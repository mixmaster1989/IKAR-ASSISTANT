"""
ü§ñ Auto Image Recognition - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º, –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏—é
"""

import logging
import os
import asyncio
from typing import Optional, Dict, Any
from pathlib import Path

logger = logging.getLogger("chatumba.auto_image_recognition")

class AutoImageRecognition:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    
    def __init__(self):
        self.recognition_in_progress = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.analyzer = None
        
    async def process_image_automatically(self, chat_id: str, message: Dict[str, Any], 
                                        download_telegram_file, send_telegram_message) -> bool:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
            download_telegram_file: –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            send_telegram_message: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞—Ç–∞, False –µ—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–æ
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
            photos = message.get("photo", [])
            if not photos:
                return False
                
            # –ë–µ—Ä–µ–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
            photo = photos[-1]
            file_id = photo.get("file_id")
            message_id = message.get("message_id", 0)
            
            if not file_id:
                return False
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            processing_key = f"{chat_id}_{message_id}_{file_id}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if processing_key in self.recognition_in_progress:
                logger.debug(f"üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {processing_key} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
                return True
                
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.recognition_in_progress.add(processing_key)
            
            try:
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                asyncio.create_task(self._process_image_async(
                    chat_id, message_id, file_id, message, 
                    download_telegram_file, send_telegram_message, processing_key
                ))
                
                logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ: {chat_id}_{message_id}")
                return True
                
            except Exception as e:
                # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.recognition_in_progress.discard(processing_key)
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_image_automatically: {e}")
            return False
    
    async def _process_image_async(self, chat_id: str, message_id: int, file_id: str, 
                                 message: Dict[str, Any], download_telegram_file, 
                                 send_telegram_message, processing_key: str):
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if self.analyzer is None:
                from api.telegram_vision import get_image_analyzer
                self.analyzer = get_image_analyzer()
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            local_path = await download_telegram_file(file_id)
            if not local_path:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_id}")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–ø—Ç–∞
            chat_type = message.get("chat", {}).get("type", "private")
            if chat_type in ("group", "supergroup"):
                prompt = "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏? –û–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."
            else:
                prompt = "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏? –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–µ—Ç–∞–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫."
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_id}")
            description = await self.analyzer.analyze_image(local_path, prompt)
            
            if description:
                # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤
                clean_description = self._clean_description(description)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await self._save_image_description_to_history(
                    chat_id, message_id, clean_description, message
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø—ã)
                if chat_type in ("group", "supergroup"):
                    await self._send_recognition_notification(
                        chat_id, clean_description, send_telegram_message
                    )
                
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {chat_id}_{message_id}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_id}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(local_path)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ _process_image_async: {e}")
        finally:
            # –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö
            self.recognition_in_progress.discard(processing_key)
    
    def _clean_description(self, description: str) -> str:
        """–û—á–∏—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å–æ–≤ –∏ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å—ã
            prefixes_to_remove = [
                "[–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑]",
                "–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
                "–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:",
                "–Ø –≤–∏–∂—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:",
                "üëÅÔ∏è",
                "**–Ø –≤–∏–∂—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:**"
            ]
            
            clean_desc = description
            for prefix in prefixes_to_remove:
                clean_desc = clean_desc.replace(prefix, "").strip()
            
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            clean_desc = "\n".join(line.strip() for line in clean_desc.split("\n") if line.strip())
            
            return clean_desc
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è: {e}")
            return description
    
    async def _save_image_description_to_history(self, chat_id: str, message_id: int, 
                                               description: str, original_message: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            from memory.sqlite import sqlite_storage
            from datetime import datetime
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            from_user = original_message.get("from", {})
            user_id = str(from_user.get("id", ""))
            timestamp = original_message.get("date", int(datetime.now().timestamp()))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
            content = f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {description}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é
            sqlite_storage.save_group_message(
                chat_id=chat_id,
                message_id=message_id,
                user_id=user_id,
                msg_type="image_description",
                content=content,
                timestamp=timestamp
            )
            
            # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            try:
                from memory.memory_integration import get_memory_integration
                integration = get_memory_integration()
                if integration.initialized:
                    integration.add_group_message(chat_id, user_id, content, timestamp)
                    logger.debug(f"üíæ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏: {chat_id}")
            except Exception as e:
                logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏: {e}")
            
            logger.info(f"üíæ –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é: {chat_id}_{message_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
    
    async def _send_recognition_notification(self, chat_id: str, description: str, 
                                           send_telegram_message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≤ –≥—Ä—É–ø–ø—É —Å –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥"""
        try:
            notification = "ü§ñ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∞–µ–º message_id
            sent_msg_id = await send_telegram_message(chat_id, notification)
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
            if isinstance(sent_msg_id, int):
                async def _auto_delete_notification():
                    try:
                        await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞
                        from .telegram_core import delete_telegram_message
                        await delete_telegram_message(chat_id, sent_msg_id)
                        logger.debug(f"üßπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ {sent_msg_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞ {chat_id}")
                    except Exception as e:
                        # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                        logger.debug(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {sent_msg_id}: {e}")
                
                asyncio.create_task(_auto_delete_notification())
                logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {sent_msg_id} —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        return {
            "processing_count": len(self.recognition_in_progress),
            "processing_keys": list(self.recognition_in_progress),
            "analyzer_initialized": self.analyzer is not None
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
auto_image_recognition = AutoImageRecognition()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def process_image_automatically(chat_id: str, message: Dict[str, Any], 
                                    download_telegram_file, send_telegram_message) -> bool:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return await auto_image_recognition.process_image_automatically(
        chat_id, message, download_telegram_file, send_telegram_message
    )




