"""
üß† Smart Notifications - –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ò–ò
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –ò–∫–∞—Ä —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥—É–º–∞–µ—Ç
"""

import asyncio
import logging
from typing import Dict, Any, Optional
from datetime import datetime

logger = logging.getLogger("chatumba.smart_notifications")

class SmartNotifications:
    """–°–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å—Ç–∞—Ç—É—Å–µ —Ä–∞–±–æ—Ç—ã –ò–ò"""
    
    def __init__(self):
        self.notification_templates = {
            "thinking": [
                "üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
                "üí≠ –î—É–º–∞—é –Ω–∞–¥ –ª—É—á—à–∏–º –æ—Ç–≤–µ—Ç–æ–º...",
                "üîç –ò–∑—É—á–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...",
                "‚ö° –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
                "üéØ –§–æ—Ä–º–∏—Ä—É—é –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç..."
            ],
            "memory_search": [
                "üìö –ò—â—É –≤ –ø–∞–º—è—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
                "üîé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã...",
                "üíæ –û–±—Ä–∞—â–∞—é—Å—å –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...",
                "üß© –°–æ–±–∏—Ä–∞—é –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–∞–º—è—Ç–∏...",
                "üìñ –ò–∑—É—á–∞—é –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è..."
            ],
            "generating_image": [
                "üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Å...",
                "üñºÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç...",
                "‚ú® –†–∏—Å—É—é –∫–∞—Ä—Ç–∏–Ω—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...",
                "üé≠ –°–æ–∑–¥–∞—é —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...",
                "üåà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫—Ä–∞—Å–æ—á–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É..."
            ],
            "generating_voice": [
                "üé§ –°–æ–∑–¥–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...",
                "üó£Ô∏è –û–∑–≤—É—á–∏–≤–∞—é —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Å...",
                "üéµ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ...",
                "üîä –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç...",
                "üéß –°–æ–∑–¥–∞—é –∑–≤—É–∫–æ–≤–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ..."
            ],
            "analyzing_crypto": [
                "üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...",
                "üí∞ –ò–∑—É—á–∞—é —Ä—ã–Ω–æ—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã...",
                "üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...",
                "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω...",
                "üíé –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏..."
            ],
            "processing_emotion": [
                "üòä –í—ã–±–∏—Ä–∞—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é...",
                "üé≠ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ...",
                "üí´ –°–æ–∑–¥–∞—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞...",
                "üåü –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω...",
                "üé™ –ì–æ—Ç–æ–≤–ª—é —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ..."
            ],
            "finalizing": [
                "‚ú® –ó–∞–≤–µ—Ä—à–∞—é —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...",
                "üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞...",
                "üöÄ –ì–æ—Ç–æ–≤–ª—é –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ...",
                "üí´ –ü—Ä–∏–º–µ–Ω—è—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏...",
                "üéâ –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!"
            ]
        }
        
        self.active_notifications: Dict[str, str] = {}
    
    async def send_thinking_notification(self, chat_id: str, process_type: str = "thinking") -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –º—ã—à–ª–µ–Ω–∏—è"""
        try:
            from .telegram_core import send_telegram_message
            
            if process_type not in self.notification_templates:
                process_type = "thinking"
            
            import random
            message = random.choice(self.notification_templates[process_type])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ—Ü–µ—Å—Å–∞
            message += " ‚è≥"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            message_id = await send_telegram_message(chat_id, message)
            
            if message_id:
                self.active_notifications[chat_id] = message_id
                logger.info(f"üß† –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ '{process_type}' –≤ —á–∞—Ç {chat_id}")
                return message_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º—ã—à–ª–µ–Ω–∏–∏: {e}")
        
        return None
    
    async def update_notification(self, chat_id: str, new_message: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            from .telegram_core import edit_telegram_message
            
            if chat_id not in self.active_notifications:
                return False
            
            message_id = self.active_notifications[chat_id]
            new_message += " ‚è≥"
            
            success = await edit_telegram_message(chat_id, message_id, new_message)
            
            if success:
                logger.info(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}: {new_message}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return False
    
    async def complete_notification(self, chat_id: str, final_message: str = "‚úÖ –ì–æ—Ç–æ–≤–æ!") -> bool:
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        try:
            from .telegram_core import edit_telegram_message, delete_telegram_message
            
            if chat_id not in self.active_notifications:
                return False
            
            message_id = self.active_notifications[chat_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await edit_telegram_message(chat_id, message_id, final_message)
            
            if success:
                # –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)
                await delete_telegram_message(chat_id, message_id)
                
                # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                del self.active_notifications[chat_id]
                
                logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return False
    
    async def cancel_notification(self, chat_id: str) -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        try:
            from .telegram_core import delete_telegram_message
            
            if chat_id not in self.active_notifications:
                return False
            
            message_id = self.active_notifications[chat_id]
            success = await delete_telegram_message(chat_id, message_id)
            
            if success:
                del self.active_notifications[chat_id]
                logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
                return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return False
    
    def get_active_notification(self, chat_id: str) -> Optional[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞"""
        return self.active_notifications.get(chat_id)
    
    def has_active_notification(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞"""
        return chat_id in self.active_notifications

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
smart_notifications = SmartNotifications()
