import time
import logging
import re
import asyncio
import tempfile
import os
from pathlib import Path
from backend.memory.sqlite import sqlite_storage
from backend.vision.image_generator import image_generator, translate_prompt_to_english

logger = logging.getLogger("chatumba.group_image_trigger")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ chat_id
last_image_trigger_time = {}

class GroupImageTrigger:
    def __init__(self):
        self.cooldown_sec = 120  # 2 –º–∏–Ω—É—Ç—ã cooldown –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.trigger_word = "–∫–∞—Ä—Ç–∏–Ω–∫–∞:"
        
    async def try_trigger(self, chat_id: str, message_text: str, send_telegram_photo):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            send_telegram_photo: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ ("–±–æ—Ç–Ω–∞—Ä–∏—Å—É–π" –≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ)
        if self.trigger_word not in message_text.lower():
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ cooldown
        now = time.time()
        last_time = last_image_trigger_time.get(chat_id, 0)
        if now - last_time < self.cooldown_sec:
            logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] Cooldown –¥–ª—è —á–∞—Ç–∞ {chat_id}, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º.")
            return True  # –£–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–µ–¥–∞–≤–Ω–æ, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º
        
        last_image_trigger_time[chat_id] = now
        logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –°—Ä–∞–±–æ—Ç–∞–ª —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ —Å–ª–æ–≤—É '{self.trigger_word}' –≤ —á–∞—Ç–µ {chat_id}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        prompt = self._extract_prompt(message_text)
        
        if not prompt:
            # –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            await self._send_instruction_message(chat_id, send_telegram_photo)
            return True
            
        logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –ò–∑–≤–ª–µ—á–µ–Ω –ø—Ä–æ–º–ø—Ç: '{prompt}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await self._generate_and_send_image(chat_id, prompt, send_telegram_photo)
        
        return True
    
    def _extract_prompt(self, message_text: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã:
        - "–∫–∞—Ä—Ç–∏–Ω–∫–∞: –∫–æ—Ç –Ω–∞ –∫—Ä—ã—à–µ"
        - "–ö–ê–†–¢–ò–ù–ö–ê: –∫–æ—Ç –Ω–∞ –∫—Ä—ã—à–µ"
        - "–≠–π, –∫–∞—Ä—Ç–∏–Ω–∫–∞: –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç"
        
        Args:
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            str: –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        """
        
        # –ò—â–µ–º —Å–ª–æ–≤–æ "–∫–∞—Ä—Ç–∏–Ω–∫–∞:" –∏ –≤—Å—ë —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        pattern = r'–∫–∞—Ä—Ç–∏–Ω–∫–∞:\s*(.+?)(?:\s*$|[.!?])'
        match = re.search(pattern, message_text.lower())
        
        if match:
            prompt = match.group(1).strip()
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
            prompt = re.sub(r'[.!?]*$', '', prompt).strip()
            return prompt
        
        return ""
    
    async def _send_instruction_message(self, chat_id: str, send_telegram_photo):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ç—Ä–∏–≥–≥–µ—Ä–∞.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            send_telegram_photo: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram
        """
        instruction = (
            "üé® –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
            "**–∫–∞—Ä—Ç–∏–Ω–∫–∞:** [–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è]\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –∫–∞—Ä—Ç–∏–Ω–∫–∞: –∫–æ—Ç –Ω–∞ –∫—Ä—ã—à–µ\n"
            "‚Ä¢ –∫–∞—Ä—Ç–∏–Ω–∫–∞: –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º\n"
            "‚Ä¢ –∫–∞—Ä—Ç–∏–Ω–∫–∞: –∫–∏–±–µ—Ä–ø–∞–Ω–∫ –≥–æ—Ä–æ–¥\n\n"
            "‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-5 –º–∏–Ω—É—Ç"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ send_telegram_message
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞
            from api.telegram_core import send_telegram_message
            await send_telegram_message(chat_id, instruction)
        except Exception as e:
            logger.error(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
    
    async def _generate_and_send_image(self, chat_id: str, prompt: str, send_telegram_photo):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            prompt: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            send_telegram_photo: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –≤ Telegram
        """
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            from api.telegram_core import send_telegram_message
            await send_telegram_message(
                chat_id, 
                f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...\n‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-5 –º–∏–Ω—É—Ç..."
            )
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            english_prompt = await translate_prompt_to_english(prompt)
            logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{english_prompt}'")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            image_bytes = await image_generator(
                prompt=english_prompt,
                model="text2img",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å DeepAI
                width=512,
                height=512,
                timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è DeepAI
            )
            
            if not image_bytes:
                logger.error(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                await send_telegram_message(
                    chat_id, 
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: '{prompt}'\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = Path(tempfile.gettempdir()) / "chatumba_images"
            temp_dir.mkdir(exist_ok=True)
            
            image_filename = f"generated_{chat_id}_{int(time.time())}.png"
            image_path = temp_dir / image_filename
            
            with open(image_path, 'wb') as f:
                f.write(image_bytes)
            
            logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {image_path}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Telegram
            caption = f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{prompt}'"
            await send_telegram_photo(chat_id, str(image_path), caption)
            
            logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
            asyncio.create_task(self._cleanup_temp_file(image_path, delay=600))
            
        except Exception as e:
            logger.error(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            try:
                from api.telegram_core import send_telegram_message
                await send_telegram_message(
                    chat_id, 
                    f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
            except:
                pass  # –ï—Å–ª–∏ –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—à–∏–±–∫–∏ –Ω–µ —É–¥–∞–ª–∞—Å—å
    
    async def _cleanup_temp_file(self, file_path: Path, delay: int = 600):
        """
        –£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
            delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        await asyncio.sleep(delay)
        try:
            if file_path.exists():
                file_path.unlink()
                logger.info(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {file_path}")
        except Exception as e:
            logger.warning(f"[–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï-–¢–†–ò–ì–ì–ï–†] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}")

# –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
group_image_trigger = GroupImageTrigger() 