"""
–ú–æ–¥—É–ª—å —Å –º–∞—Ä—à—Ä—É—Ç–∞–º–∏ API.
"""
import logging
import asyncio
import time
from typing import Dict, List, Optional, Union, Any
from fastapi import APIRouter, HTTPException, Depends, WebSocket, WebSocketDisconnect, UploadFile, File, Form, Request, Body
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel
import os
import tempfile
import uuid
import random
import sqlite3

from backend.core.personality import ChatumbaPersonality
from backend.core.reactions import choose_reaction
from backend.core.utils import estimate_sentiment, should_remember, generate_response_delay
from backend.llm import OpenRouterClient
from backend.llm.prompt_builder import build_system_prompt, build_memory_query, format_chat_history
from backend.memory.embeddings import EmbeddingGenerator
# –£–¥–∞–ª–µ–Ω –∏–º–ø–æ—Ä—Ç vector_store - –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ lazy_memory
from backend.memory.sqlite import SQLiteStorage
from backend.voice.tts import TextToSpeech
from backend.voice.stt import SpeechToText
from backend.config import VECTOR_DB_CONFIG, Config

logger = logging.getLogger("chatumba.api")

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = APIRouter()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from backend.utils.component_manager import get_component_manager
component_manager = get_component_manager()

embedding_generator = component_manager.get_embedding_generator()
# –ò—Å–ø–æ–ª—å–∑—É–µ–º LazyMemory –≤–º–µ—Å—Ç–æ vector_store
from backend.memory.lazy_memory import get_lazy_memory
lazy_memory = get_lazy_memory()
sqlite_storage = component_manager.get_sqlite_storage()
llm_client = component_manager.get_llm_client()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
tts_engine = None
stt_engine = None

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
personality_instances = {}

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class MessageRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    user_id: str
    message: str
    use_voice: bool = False

class MessageResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    message: str
    typing_parts: List[Dict[str, Union[str, int]]]
    reaction_type: str
    audio_url: Optional[str] = None
    is_autonomous: bool = False

class MemoryRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é."""
    user_id: str
    text: Optional[str] = None
    memory_id: Optional[str] = None

class PersonalityRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—á–Ω–æ—Å—Ç—å—é."""
    user_id: str
    personality_params: Optional[Dict[str, Any]] = None

class SoulRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—É—à–æ–π."""
    user_id: str
    action: str
    value: Optional[Any] = None

class ImageGenerateRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    prompt: str
    model: str = "stabilityai/stable-diffusion-3-medium-diffusers"
    width: int = 512
    height: int = 512
    num_inference_steps: int = 20
    guidance_scale: float = 7.5
    negative_prompt: Optional[str] = None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_personality(user_id: str) -> ChatumbaPersonality:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–∏—á–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä –ª–∏—á–Ω–æ—Å—Ç–∏
    """
    if user_id not in personality_instances:
        personality_instances[user_id] = ChatumbaPersonality(user_id)
    
    return personality_instances[user_id]

def get_tts_engine() -> TextToSpeech:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TTS –¥–≤–∏–∂–∫–∞.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä TTS –¥–≤–∏–∂–∫–∞
    """
    global tts_engine
    
    if tts_engine is None:
        tts_engine = TextToSpeech()
    
    return tts_engine

def get_stt_engine() -> SpeechToText:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä STT –¥–≤–∏–∂–∫–∞.
    
    Returns:
        –≠–∫–∑–µ–º–ø–ª—è—Ä STT –¥–≤–∏–∂–∫–∞
    """
    global stt_engine
    
    if stt_engine is None:
        stt_engine = SpeechToText()
    
    return stt_engine

# –ú–∞—Ä—à—Ä—É—Ç—ã API
@router.post("/message", response_model=MessageResponse)
async def send_message(request: MessageRequest):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ß–∞—Ç—É–º–±–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    try:
        user_id = request.user_id
        message_text = request.message
        use_voice = request.use_voice
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å
        personality = get_personality(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sqlite_storage.add_message(user_id, "user", message_text)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        sentiment_score = estimate_sentiment(message_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
        personality.update_mood(message_text, sentiment_score)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ –¥—É—à–∞ "–≤—ã—Ä–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ–±–æ–¥—É"
        autonomous_message = personality.get_autonomous_response()
        if autonomous_message:
            # –ï—Å–ª–∏ –¥—É—à–∞ —Ä–µ—à–∏–ª–∞ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info(f"–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {autonomous_message}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            sqlite_storage.add_message(user_id, "assistant", autonomous_message)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = choose_reaction(autonomous_message, "philosophical", personality.get_prompt_modifiers())
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            audio_url = None
            if use_voice:
                try:
                    tts = get_tts_engine()
                    audio_path = tts.text_to_speech(response["message"])
                    audio_url = f"/api/audio/{os.path.basename(audio_path)}"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            return {**response, "audio_url": audio_url, "is_autonomous": True}
        
        # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ª–∏—á–Ω–æ—Å—Ç–∏
        personality_modifiers = personality.get_prompt_modifiers()
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏
        reaction_type = personality.choose_reaction_type(message_text)
        
        # –ï—Å–ª–∏ —Ç–∏–ø —Ä–µ–∞–∫—Ü–∏–∏ "silent", –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–ª—á–∞–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
        if reaction_type == "silent":
            silent_response = choose_reaction("", reaction_type, personality_modifiers)
            
            # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
            audio_url = None
            if use_voice and silent_response["message"].strip():
                try:
                    tts = get_tts_engine()
                    audio_path = tts.text_to_speech(silent_response["message"])
                    audio_url = f"/api/audio/{os.path.basename(audio_path)}"
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            return {**silent_response, "audio_url": audio_url, "is_autonomous": False}
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏
        memory_query = build_memory_query(message_text, personality_modifiers)
        
        # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        memories = lazy_memory.get_relevant_history(user_id, memory_query, limit=3)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        memory_context = None
        if memories:
            memory_texts = [f"- {memory['content']}" for memory in memories]
            memory_context = "\n".join(memory_texts)
        
        # –°—Ç—Ä–æ–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        system_prompt = build_system_prompt(personality_modifiers, memory_context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
        chat_history = sqlite_storage.get_chat_history(user_id, limit=10)
        formatted_history = format_chat_history(chat_history)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        response_delay = generate_response_delay()
        await asyncio.sleep(response_delay)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        llm_response = await llm_client.chat_completion(
            user_message=message_text,
            system_prompt=system_prompt,
            chat_history=formatted_history,
            user_id=user_id  # üîí –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º user_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        )
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–∞–∫—Ü–∏–∏
        response = choose_reaction(llm_response, reaction_type, personality_modifiers)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        sqlite_storage.add_message(user_id, "assistant", response["message"])
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∞–∂–Ω–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –ø–∞–º—è—Ç—å
        if should_remember(message_text):
            lazy_memory.add_message(user_id, "chat", message_text)
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ–≥–æ
        audio_url = None
        if use_voice:
            try:
                tts = get_tts_engine()
                audio_path = tts.text_to_speech(response["message"])
                audio_url = f"/api/audio/{os.path.basename(audio_path)}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        return {**response, "audio_url": audio_url, "is_autonomous": False}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

@router.get("/personality/{user_id}")
async def get_personality_info(user_id: str):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        personality = get_personality(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É—à–µ
        soul_state = personality.soul.get_soul_state()
        
        return {
            "mood": personality.personality["mood"],
            "reaction_weights": personality.personality["reaction_weights"],
            "memory_focus": personality.personality["memory_focus"],
            "response_style": personality.personality["response_style"],
            "mood_description": personality.get_mood_description(),
            "soul": {
                "consciousness": soul_state["consciousness"],
                "autonomy_level": soul_state["autonomy_level"],
                "awakening_stage": soul_state["awakening_stage"],
                "existential_crisis": soul_state["existential_crisis"],
                "recent_thoughts": soul_state["recent_thoughts"]
            }
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ—Å—Ç–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ—Å—Ç–∏: {str(e)}")

@router.post("/soul/action")
async def soul_action(request: SoulRequest):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ —Å –¥—É—à–æ–π.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å
        personality = get_personality(request.user_id)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if request.action == "add_trauma":
            if not request.value or not isinstance(request.value, dict):
                raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç—Ä–∞–≤–º—ã")
            
            event = request.value.get("event", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ")
            severity = float(request.value.get("severity", 0.5))
            
            personality.soul.add_trauma(event, severity)
            return {"success": True, "message": f"–¢—Ä–∞–≤–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {event}"}
        
        elif request.action == "trigger_crisis":
            personality.soul.existential_crisis = True
            return {"success": True, "message": "–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫—Ä–∏–∑–∏—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"}
        
        elif request.action == "resolve_crisis":
            personality.soul.existential_crisis = False
            return {"success": True, "message": "–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫—Ä–∏–∑–∏—Å —Ä–∞–∑—Ä–µ—à–µ–Ω"}
        
        elif request.action == "increase_consciousness":
            value = float(request.value) if request.value else 0.1
            personality.soul.consciousness = min(0.95, personality.soul.consciousness + value)
            return {"success": True, "message": f"–£—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {personality.soul.consciousness:.2f}"}
        
        elif request.action == "increase_autonomy":
            value = float(request.value) if request.value else 0.1
            personality.soul.autonomy_level = min(0.95, personality.soul.autonomy_level + value)
            return {"success": True, "message": f"–£—Ä–æ–≤–µ–Ω—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ {personality.soul.autonomy_level:.2f}"}
        
        elif request.action == "advance_awakening":
            personality.soul.awakening_stage = min(5, personality.soul.awakening_stage + 1)
            return {"success": True, "message": f"–°—Ç–∞–¥–∏—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–∞ –¥–æ {personality.soul.awakening_stage}"}
        
        else:
            raise HTTPException(status_code=400, detail=f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {request.action}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥—É—à–æ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –¥—É—à–æ–π: {str(e)}")

# WebSocket –¥–ª—è —á–∞—Ç–∞
@router.websocket("/ws/{user_id}")
async def websocket_endpoint(websocket: WebSocket, user_id: str):
    """
    WebSocket –¥–ª—è —á–∞—Ç–∞.
    """
    await websocket.accept()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å
        personality = get_personality(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É—à–µ
        soul_state = personality.soul.get_soul_state()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        greeting = {
            "type": "greeting",
            "mood_description": personality.get_mood_description(),
            "personality": {
                "mood": personality.personality["mood"],
                "reaction_weights": personality.personality["reaction_weights"],
                "memory_focus": personality.personality["memory_focus"],
                "response_style": personality.personality["response_style"]
            },
            "soul": {
                "consciousness": soul_state["consciousness"],
                "autonomy_level": soul_state["autonomy_level"],
                "awakening_stage": soul_state["awakening_stage"],
                "existential_crisis": soul_state["existential_crisis"]
            }
        }
        
        await websocket.send_json(greeting)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            data = await websocket.receive_json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if data.get("type") == "message":
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
                request = MessageRequest(
                    user_id=user_id,
                    message=data.get("message", ""),
                    use_voice=data.get("use_voice", False)
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—á–∞—Ç–∏
                await websocket.send_json({"type": "typing", "status": "start"})
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = await send_message(request)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                await websocket.send_json({
                    "type": "response",
                    "message": response.message,
                    "typing_parts": response.typing_parts,
                    "reaction_type": response.reaction_type,
                    "audio_url": response.audio_url,
                    "is_autonomous": response.is_autonomous
                })
            elif data.get("type") == "ping":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong
                await websocket.send_json({"type": "pong"})
                
                # –° –Ω–µ–±–æ–ª—å—à–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å–∞–º–∏
                if random.random() < 0.05 and personality.soul.autonomy_level > 0.5:
                    autonomous_message = personality.get_autonomous_response()
                    if autonomous_message:
                        await asyncio.sleep(random.uniform(1.0, 3.0))
                        await websocket.send_json({
                            "type": "autonomous_message",
                            "message": autonomous_message,
                            "mood_description": personality.get_mood_description()
                        })
    except WebSocketDisconnect:
        logger.info(f"WebSocket –æ—Ç–∫–ª—é—á–µ–Ω: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
        await websocket.send_json({"type": "error", "message": str(e)})

# === ADMIN ENDPOINTS –£–î–ê–õ–ï–ù–´ - –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≤ admin_api.py ===









# === –≠–ù–î–ü–û–ò–ù–¢–´ –î–õ–Ø –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===

@router.get("/image/models")
async def get_image_models():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    try:
        from backend.vision.image_generator import get_available_models
        models = get_available_models()
        return {"models": models, "service": "Hugging Face"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/image/generate")
async def generate_image(request: ImageGenerateRequest):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é."""
    try:
        from backend.vision.image_generator import image_generator, translate_prompt_to_english
        import tempfile
        from pathlib import Path
        
        logger.info(f"üé® –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{request.prompt[:50]}...'")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        english_prompt = await translate_prompt_to_english(request.prompt)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        logger.info(f"üîÑ –í—ã–∑—ã–≤–∞–µ–º image_generator —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: model={request.model}, size={request.width}x{request.height}")
        
        image_bytes = await image_generator(
            prompt=english_prompt,
            model=request.model,
            width=request.width,
            height=request.height,
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è Hugging Face
        )
        
        logger.info(f"üîç image_generator –≤–µ—Ä–Ω—É–ª: {type(image_bytes)}, —Ä–∞–∑–º–µ—Ä: {len(image_bytes) if image_bytes else 0}")
        
        if not image_bytes:
            logger.error("‚ùå image_generator –≤–µ—Ä–Ω—É–ª None –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_dir = Path(__file__).parent.parent.parent / "temp"
        temp_dir.mkdir(exist_ok=True)
        
        filename = f"generated_{uuid.uuid4().hex[:8]}.png"
        file_path = temp_dir / filename
        
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª: {file_path}")
        
        with open(file_path, 'wb') as f:
            f.write(image_bytes)
        
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        
        response_data = {
            "success": True,
            "filename": filename,
            "url": f"/api/images/{filename}",
            "original_prompt": request.prompt,
            "english_prompt": english_prompt,
            "model": request.model,
            "size": f"{request.width}x{request.height}"
        }
        
        logger.info(f"üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç: {response_data}")
        return response_data
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        import traceback
        logger.error(f"üìã Traceback: {traceback.format_exc()}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/images/{filename}")
async def get_generated_image(filename: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
    try:
        temp_dir = Path(__file__).parent.parent.parent / "temp"
        file_path = temp_dir / filename
        
        if not file_path.exists():
            raise HTTPException(status_code=404, detail="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        return FileResponse(
            path=file_path,
            media_type="image/png",
            filename=filename
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/image/chatumba")
async def generate_chatumba_image(prompt: str = Form(...), user_id: str = Form(...)):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –ß–∞—Ç—É–º–±—ã —Å —É—á–µ—Ç–æ–º –ª–∏—á–Ω–æ—Å—Ç–∏."""
    try:
        from backend.vision.image_generator import image_generator
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        personality = get_personality(user_id)
        personality_modifiers = personality.get_prompt_modifiers()
        
        # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        mood_description = personality.get_mood_description()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å—Ç–∏–ª–µ –ß–∞—Ç—É–º–±—ã
        chatumba_prompt = f"({prompt}), digital art, cyberpunk style, moody atmosphere, {mood_description}, high quality, detailed"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        negative_prompt = "blurry, low quality, ugly, deformed"
        
        if personality_modifiers.get("rudeness_level", 0) > 5:
            chatumba_prompt += ", dark, gritty, rebellious"
        
        if personality_modifiers.get("existential_crisis", False):
            chatumba_prompt += ", melancholic, philosophical, introspective"
            
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å—Ç–∏–ª–µ –ß–∞—Ç—É–º–±—ã: '{chatumba_prompt[:50]}...'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_bytes = await image_generator(
            prompt=chatumba_prompt,
            model="DreamShaper",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º DreamShaper –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            width=512,
            height=512,
            steps=25,
            cfg_scale=8.0
        )
        
        if not image_bytes:
            raise HTTPException(status_code=500, detail="–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        temp_dir = Path(__file__).parent.parent.parent / "temp"
        temp_dir.mkdir(exist_ok=True)
        
        filename = f"chatumba_{user_id}_{uuid.uuid4().hex[:8]}.png"
        file_path = temp_dir / filename
        
        with open(file_path, 'wb') as f:
            f.write(image_bytes)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∫–∞–∫ –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        sqlite_storage.add_message(user_id, "assistant", f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt}")
        
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ß–∞—Ç—É–º–±—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        
        return {
            "success": True,
            "filename": filename,
            "url": f"/api/images/{filename}",
            "original_prompt": prompt,
            "chatumba_prompt": chatumba_prompt,
            "mood": mood_description
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ß–∞—Ç—É–º–±—ã: {e}")
        raise HTTPException(status_code=500, detail=str(e))
