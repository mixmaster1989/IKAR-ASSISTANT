import logging
import json
import asyncio
from backend.api.telegram_core import send_telegram_message_with_buttons, send_telegram_message, delete_telegram_message
from api.telegram_vision import get_image_analyzer
from backend.memory.sqlite import sqlite_storage

logger = logging.getLogger("chatumba.telegram.photo_handler")

async def send_photo_recognition_buttons(chat_id, message_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ: –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç."""
    buttons = [
        [{"text": "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "callback_data": f"photo_img_{message_id}"}],
        [{"text": "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç", "callback_data": f"photo_text_{message_id}"}]
    ]
    sent_msg_id = await send_telegram_message_with_buttons(
        chat_id,
        "–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å —ç—Ç–∏–º —Ñ–æ—Ç–æ?",
        buttons
    )
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    if isinstance(sent_msg_id, int):
        async def _auto_delete():
            try:
                await asyncio.sleep(10)
                await delete_telegram_message(chat_id, sent_msg_id)
            except Exception:
                # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                pass
        asyncio.create_task(_auto_delete())

async def handle_photo_callback(callback_query, callback_data, chat_id, message_id, user_id, temp_dir, download_telegram_file):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ñ–æ—Ç–æ: –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç.
    message_id –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ callback_data (photo_img_12345), –∞ –Ω–µ –∏–∑ callback_query['message']['message_id']!
    """
    # –ü–æ–ª—É—á–∞–µ–º message_id –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, photo_text_10996)
    if callback_data.startswith("photo_img_"):
        real_message_id = int(callback_data.replace("photo_img_", ""))
        from api.telegram_crypto_processing import process_telegram_photo_with_crypto_detection
        logger.info(f"[DEBUG] get_pending_photo: chat_id={chat_id}, message_id={real_message_id}")
        photo_message = sqlite_storage.get_pending_photo(chat_id, real_message_id)
        logger.info(f"[DEBUG] get_pending_photo result: {'FOUND' if photo_message else 'NOT FOUND'}")
        if photo_message:
            await send_telegram_message(chat_id, "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", None)
            await process_telegram_photo_with_crypto_detection(photo_message, chat_id, user_id, temp_dir, download_telegram_file, send_telegram_message)
            sqlite_storage.delete_pending_photo(chat_id, real_message_id)
        else:
            await send_telegram_message(chat_id, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ")
        return True
    elif callback_data.startswith("photo_text_"):
        real_message_id = int(callback_data.replace("photo_text_", ""))
        logger.info(f"[DEBUG] get_pending_photo: chat_id={chat_id}, message_id={real_message_id}")
        photo_message = sqlite_storage.get_pending_photo(chat_id, real_message_id)
        logger.info(f"[DEBUG] get_pending_photo result: {'FOUND' if photo_message else 'NOT FOUND'}")
        if photo_message:
            photos = photo_message.get("photo", [])
            if not photos:
                await send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")
                return True
            photo = photos[-1]
            file_id = photo.get("file_id")
            if not file_id:
                await send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id —Ñ–æ—Ç–æ.")
                return True
            local_path = await download_telegram_file(file_id)
            if not local_path:
                await send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.")
                return True
            analyzer = get_image_analyzer()
            prompt = "–ù–∞–π–¥–∏ –∏ –≤—ã–ø–∏—à–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {\"text\": \"...\"}"
            result = await analyzer.analyze_image(local_path, prompt)
            text = None
            if result:
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –∏–∑ utils/robust_json_parser.py
                    from utils.robust_json_parser import robust_json_parser

                    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏
                    processed_result = result.strip()

                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ", –∏—â–µ–º JSON –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ
                    if processed_result.startswith("–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"):
                        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ JSON (```json –∏–ª–∏ {)
                        json_start = processed_result.find("```json")
                        if json_start == -1:
                            json_start = processed_result.find("{")
                        if json_start != -1:
                            processed_result = processed_result[json_start:]

                    # –°–£–ü–ï–† –ü–†–û–°–¢–û–ô –ü–û–î–•–û–î: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º JSON, –±–µ—Ä–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–≤—ã—á–∫–æ–π
                    if '"text":' in processed_result:
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                        logger.info(f"[PHOTO TEXT] –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò: {processed_result[:500]}...")

                        # –ò—â–µ–º –ø–µ—Ä–≤—É—é –∫–∞–≤—ã—á–∫—É –ø–æ—Å–ª–µ "text":
                        text_pos = processed_result.find('"text":')
                        if text_pos != -1:
                            # –ò—â–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É –ø–æ—Å–ª–µ "text":
                            start_quote = processed_result.find('"', text_pos + 7)
                            if start_quote != -1:
                                # –ë–µ—Ä–µ–º –í–ï–°–¨ —Ç–µ–∫—Å—Ç –æ—Ç –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–π –∫–∞–≤—ã—á–∫–∏ –¥–æ –ö–û–ù–¶–ê –æ—Ç–≤–µ—Ç–∞
                                # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã –≤–æ–∑—å–º–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–∞–º –µ—Å—Ç—å –∫–∞–≤—ã—á–∫–∏
                                raw_text = processed_result[start_quote + 1:].strip()

                                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∫–∞–≤—ã—á–∫–æ–π - —É–±–∏—Ä–∞–µ–º –µ–µ
                                if raw_text.endswith('"'):
                                    raw_text = raw_text[:-1]

                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º escaped —Å–∏–º–≤–æ–ª—ã
                                text = raw_text.replace('\\n', '\n').replace('\\t', '\t').replace('\\"', '"').replace('\\\\', '\\')

                                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã (}, ``` –∏ —Ç.–¥.)
                                text = text.split('}')[0].split('```')[0].strip()

                                logger.info(f"[PHOTO TEXT] –°–£–ü–ï–† –ü–†–û–°–¢–û–ô –ü–ê–†–°–ò–ù–ì –°–†–ê–ë–û–¢–ê–õ! –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
                                logger.info(f"[PHOTO TEXT] –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤: {text[:300]}...")

                                if text.strip():
                                    await send_telegram_message(chat_id, f"üìù <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n{text}", "HTML")
                                    return True

                    # –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
                    json_objects = robust_json_parser(processed_result)

                    # –ò—â–µ–º –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º "text"
                    for obj in json_objects:
                        if isinstance(obj, dict) and "text" in obj:
                            text = obj["text"].strip()
                            logger.info(f"[PHOTO TEXT] –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –≤ JSON: {text[:100]}...")
                            break

                    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ JSON –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    if not text:
                        logger.info(f"[PHOTO TEXT] JSON –æ–±—ä–µ–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã: {len(json_objects)}")
                        for i, obj in enumerate(json_objects[:3]):  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—ä–µ–∫—Ç–∞
                            logger.info(f"[PHOTO TEXT] –û–±—ä–µ–∫—Ç {i}: {obj}")
                        logger.info(f"[PHOTO TEXT] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {processed_result[:300]}...")

                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø—Ä—è–º—É—é —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏
                        try:
                            import json
                            # –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π JSON
                            if processed_result.strip().startswith('{'):
                                direct_json = json.loads(processed_result.strip())
                                if isinstance(direct_json, dict) and "text" in direct_json:
                                    text = direct_json["text"].strip()
                                    logger.info(f"[PHOTO TEXT] –ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ä–∞–±–æ—Ç–∞–ª! –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç: {text[:100]}...")
                        except Exception as e:
                            logger.error(f"[PHOTO TEXT] –ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

                        # Fallback: –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å, –Ω–æ –µ—Å—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ processed_result
                        if not text and len(processed_result.strip()) > 50:
                            # –ò—â–µ–º —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É –∫–∞–≤—ã—á–∫–∞–º–∏ –ø–æ—Å–ª–µ "text": (—É–ª—É—á—à–µ–Ω–Ω—ã–π regex)
                            import re
                            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞, –≤–∫–ª—é—á–∞—è –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π
                            text_match = re.search(r'"text"\s*:\s*"((?:[^"\\]|\\.)*)"', processed_result, re.DOTALL)
                            if text_match:
                                text = text_match.group(1).strip()
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º escaped —Å–∏–º–≤–æ–ª—ã
                                text = text.replace('\\n', '\n').replace('\\t', '\t').replace('\\"', '"').replace('\\\\', '\\')
                                logger.info(f"[PHOTO TEXT] Regex fallback —Å—Ä–∞–±–æ—Ç–∞–ª! –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤: {text[:100]}...")
                            else:
                                logger.error(f"[PHOTO TEXT] Regex fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")

                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π fallback: –µ—Å–ª–∏ regex –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –º–µ–∂–¥—É –∫–∞–≤—ã—á–∫–∞–º–∏
                            if not text:
                                # –ò—â–µ–º –≤—Å–µ –º–µ–∂–¥—É –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞–≤—ã—á–∫–æ–π –ø–æ—Å–ª–µ "text":
                                text_start = processed_result.find('"text": "')
                                if text_start != -1:
                                    text_start += 9  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º '"text": "'
                                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–∞–≤—ã—á–∫—É –≤ —Å—Ç—Ä–æ–∫–µ
                                    text_end = processed_result.rfind('"', text_start)
                                    if text_end != -1:
                                        raw_text = processed_result[text_start:text_end]
                                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º escaped —Å–∏–º–≤–æ–ª—ã
                                        text = raw_text.replace('\\n', '\n').replace('\\t', '\t').replace('\\"', '"').replace('\\\\', '\\')
                                        logger.info(f"[PHOTO TEXT] Raw fallback —Å—Ä–∞–±–æ—Ç–∞–ª! –ù–∞–π–¥–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π {len(text)} —Å–∏–º–≤–æ–ª–æ–≤: {text[:100]}...")
                                    else:
                                        logger.error(f"[PHOTO TEXT] –í—Å–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å!")

                    # Fallback: –µ—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                    if not text and result.strip():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                        if "[–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑]" in result:
                            # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç
                            text = result.replace("[–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑]", "").strip()
                        elif len(result.strip()) > 10:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ markdown –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                            import re
                            # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É
                            clean_text = re.sub(r'```json\s*', '', result)
                            clean_text = re.sub(r'```\s*', '', clean_text)
                            clean_text = clean_text.strip()
                            if clean_text and not clean_text.startswith('{'):
                                text = clean_text

                except Exception as e:
                    logger.error(f"[PHOTO TEXT] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}. –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {result[:200]}...")
                    # –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø–æ–ª–µ–∑–Ω—ã–π —Ç–µ–∫—Å—Ç
                    if "[–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑]" in result:
                        text = result.replace("[–õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑]", "").strip()
            if text:
                await send_telegram_message(chat_id, f"üìù <b>–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n\n{text}", "HTML")
            else:
                await send_telegram_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")
            import os
            try:
                os.remove(local_path)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            sqlite_storage.delete_pending_photo(chat_id, real_message_id)
        else:
            await send_telegram_message(chat_id, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ")
        return True
    return False 