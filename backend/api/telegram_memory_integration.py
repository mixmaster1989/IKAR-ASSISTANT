"""
üì± Telegram Memory Integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegram —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —É–º–Ω—ã–º —Ç—Ä–∏–≥–≥–µ—Ä–æ–º
"""

import logging
from typing import Dict, Any, Optional

logger = logging.getLogger("chatumba.telegram_memory")

class TelegramMemoryIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Telegram —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.memory_integration = None
        self.initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–º—è—Ç—å—é"""
        try:
            from memory.memory_integration import get_memory_integration
            self.memory_integration = get_memory_integration()
            
            if not self.memory_integration.initialized:
                await self.memory_integration.initialize()
            
            self.initialized = True
            logger.info("‚úÖ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞–º—è—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            raise
    
    def save_group_message(self, chat_id: str, user_id: str, content: str, timestamp: float = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –≤ —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏"""
        if not self.initialized or not self.memory_integration:
            logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
            success = self.memory_integration.add_group_message(chat_id, user_id, content, timestamp)
            
            if success:
                logger.debug(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å: {chat_id} | {content[:50]}...")
            
            return success
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {e}")
            return False
    
    async def handle_smart_bot_trigger(self, chat_id: str, message_text: str, user_id: str, 
                                      is_quote: bool = False, quoted_message_id: int = None, 
                                      is_mention: bool = False) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –±–æ—Ç–∞ (–æ–±—ã—á–Ω—ã–π, —á–µ—Ä–µ–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ @username)"""
        if not self.initialized:
            logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return None
        
        try:
            from api.smart_bot_trigger import process_smart_bot_trigger
            
            # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.save_group_message(chat_id, user_id, message_text)
            
            # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            response = await process_smart_bot_trigger(chat_id, message_text, user_id, is_quote, quoted_message_id, is_mention)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return None
    
    async def get_memory_stats_for_chat(self, chat_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –¥–ª—è —á–∞—Ç–∞"""
        if not self.initialized or not self.memory_integration:
            return {}
        
        try:
            return await self.memory_integration.get_memory_stats(chat_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
_telegram_memory_integration = None

def get_telegram_memory_integration() -> TelegramMemoryIntegration:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    global _telegram_memory_integration
    if _telegram_memory_integration is None:
        _telegram_memory_integration = TelegramMemoryIntegration()
    return _telegram_memory_integration

async def initialize_telegram_memory_integration():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–º—è—Ç—å—é"""
    integration = get_telegram_memory_integration()
    await integration.initialize()
    return integration

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ telegram_polling.py
async def save_telegram_message_to_memory(chat_id: str, user_id: str, content: str, timestamp: float = None) -> bool:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram –≤ –ø–∞–º—è—Ç—å"""
    integration = get_telegram_memory_integration()
    return integration.save_group_message(chat_id, user_id, content, timestamp)

async def handle_telegram_bot_trigger(chat_id: str, message_text: str, user_id: str) -> Optional[str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –±–æ—Ç–∞ –≤ Telegram"""
    integration = get_telegram_memory_integration()
    return await integration.handle_smart_bot_trigger(chat_id, message_text, user_id)