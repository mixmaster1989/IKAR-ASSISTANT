"""
üìÅ Memory Export Trigger - –¢—Ä–∏–≥–≥–µ—Ä "–ü–ê–ú–Ø–¢–¨" –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –≥—Ä—É–ø–ø—ã
–°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —á–∞–Ω–∫–∞–º–∏ –ø–∞–º—è—Ç–∏ –≥—Ä—É–ø–ø—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram
"""

import re
import logging
import time
import os
from typing import Optional, Dict, Any, List
from datetime import datetime
from pathlib import Path

logger = logging.getLogger("chatumba.memory_export_trigger")

class MemoryExportTrigger:
    """–¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    
    def __init__(self):
        self.cooldown_sec = 300  # 5 –º–∏–Ω—É—Ç cooldown –º–µ–∂–¥—É —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏
        self.last_export_time = {}  # {chat_id: timestamp}
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
        self._memory_manager = None
        self._smart_retriever = None
        
    def is_triggered(self, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ "–ü–ê–ú–Ø–¢–¨" """
        pattern = r'\b–ü–ê–ú–Ø–¢–¨\b'
        match = re.search(pattern, message_text, re.IGNORECASE)
        
        if match:
            logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä '–ü–ê–ú–Ø–¢–¨' —Å—Ä–∞–±–æ—Ç–∞–ª: '{message_text[:50]}...'")
            return True
            
        return False
    
    def is_cooldown_active(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ cooldown –¥–ª—è —á–∞—Ç–∞"""
        now = time.time()
        last_time = self.last_export_time.get(chat_id, 0)
        
        if now - last_time < self.cooldown_sec:
            remaining = self.cooldown_sec - (now - last_time)
            logger.info(f"‚è∞ Cooldown –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining:.1f} —Å–µ–∫")
            return True
            
        return False
    
    def update_export_time(self, chat_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        self.last_export_time[chat_id] = time.time()
        logger.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    
    async def process_trigger(self, chat_id: str, message_text: str, user_id: str) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ "–ü–ê–ú–Ø–¢–¨"
        if not self.is_triggered(message_text):
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if self.is_cooldown_active(chat_id):
            return "‚è∞ Cooldown –∞–∫—Ç–∏–≤–µ–Ω (5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —ç–∫—Å–ø–æ—Ä—Ç–∞–º–∏ –ø–∞–º—è—Ç–∏)"
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.update_export_time(chat_id)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self._ensure_components_initialized()
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≥—Ä—É–ø–ø—ã
            file_path = await self._export_group_memory(chat_id)
            
            if file_path and os.path.exists(file_path):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –≥—Ä—É–ø–ø—É
                success = await self._send_memory_file(chat_id, file_path)
                
                if success:
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    try:
                        os.remove(file_path)
                        logger.info(f"üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω: {file_path}")
                    except:
                        pass
                    
                    return "üìÅ –≠–∫—Å–ø–æ—Ä—Ç –ø–∞–º—è—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω! –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É."
                else:
                    return "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏"
            else:
                return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–∞–º—è—Ç–∏"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ –≥—Ä—É–ø–ø—ã"
    
    async def _ensure_components_initialized(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        try:
            if self._memory_manager is None:
                from memory.smart_memory_manager import get_smart_memory_manager
                self._memory_manager = get_smart_memory_manager()
                logger.debug("üìä SmartMemoryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if self._smart_retriever is None:
                from memory.smart_retriever import get_smart_retriever
                self._smart_retriever = get_smart_retriever(self._memory_manager)
                logger.debug("üîç SmartRetriever –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    async def _export_group_memory(self, chat_id: str) -> Optional[str]:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –≥—Ä—É–ø–ø—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
        try:
            logger.info(f"üìÅ –ù–∞—á–∏–Ω–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≥—Ä—É–ø–ø—ã
            all_chunks = await self._get_all_group_chunks(chat_id)
            
            if not all_chunks:
                logger.warning(f"üì≠ –ù–µ—Ç —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                return None
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_chunks)} —á–∞–Ω–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_dir = Path(__file__).parent.parent.parent / "temp"
            temp_dir.mkdir(exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"memory_export_{chat_id}_{timestamp}.txt"
            file_path = temp_dir / filename
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
            content = self._format_memory_chunks(all_chunks, chat_id)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            logger.info(f"‚úÖ –§–∞–π–ª –ø–∞–º—è—Ç–∏ —Å–æ–∑–¥–∞–Ω: {file_path}")
            return str(file_path)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏: {e}")
            return None
    
    async def _get_all_group_chunks(self, chat_id: str) -> List[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –≥—Ä—É–ø–ø—ã"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ SmartRetriever –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤
            chunks = await self._smart_retriever.get_all_group_chunks(chat_id)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
            return chunks
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤: {e}")
            return []
    
    def _format_memory_chunks(self, chunks: List[Any], chat_id: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç"""
        try:
            content = []
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            content.append("=" * 80)
            content.append(f"üß† –≠–ö–°–ü–û–†–¢ –ü–ê–ú–Ø–¢–ò –ì–†–£–ü–ü–´ {chat_id}")
            content.append(f"üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            content.append(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
            content.append("=" * 80)
            content.append("")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            sorted_chunks = sorted(chunks, key=lambda x: x.created_at, reverse=True)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
            for i, chunk in enumerate(sorted_chunks, 1):
                content.append(f"üìù –ß–ê–ù–ö #{i}")
                content.append(f"üÜî ID: {chunk.id}")
                content.append(f"üìÖ –°–æ–∑–¥–∞–Ω: {datetime.fromtimestamp(chunk.created_at).strftime('%Y-%m-%d %H:%M:%S')}")
                content.append(f"‚è∞ –ü–µ—Ä–∏–æ–¥: {datetime.fromtimestamp(chunk.source_period_start).strftime('%d.%m %H:%M')} - {datetime.fromtimestamp(chunk.source_period_end).strftime('%d.%m %H:%M')}")
                content.append(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(chunk.participants)}")
                content.append(f"üìä –°–æ–æ–±—â–µ–Ω–∏–π: {chunk.message_count}")
                content.append(f"‚≠ê –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {chunk.relevance_base:.2f}")
                content.append(f"üè∑Ô∏è –¢–µ–º–∞: {chunk.topic}")
                content.append("")
                content.append("üìÑ –°–û–î–ï–†–ñ–ê–ù–ò–ï:")
                content.append("-" * 40)
                content.append(chunk.content)
                content.append("-" * 40)
                content.append("")
                content.append("=" * 80)
                content.append("")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            content.append("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            content.append(f"‚Ä¢ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ç–µ–º–∞–º
            topics = {}
            for chunk in chunks:
                topic = chunk.topic
                if topic not in topics:
                    topics[topic] = 0
                topics[topic] += 1
            
            content.append("‚Ä¢ –ü–æ —Ç–µ–º–∞–º:")
            for topic, count in sorted(topics.items(), key=lambda x: x[1], reverse=True):
                content.append(f"  - {topic}: {count} —á–∞–Ω–∫–æ–≤")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            participants = {}
            for chunk in chunks:
                for participant in chunk.participants:
                    if participant not in participants:
                        participants[participant] = 0
                    participants[participant] += 1
            
            content.append("‚Ä¢ –ü–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:")
            for participant, count in sorted(participants.items(), key=lambda x: x[1], reverse=True):
                content.append(f"  - {participant}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
            
            content.append("")
            content.append("=" * 80)
            content.append("ü§ñ –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω —Å–∏—Å—Ç–µ–º–æ–π IKAR (–ß–∞—Ç—É–º–±–∞)")
            content.append("=" * 80)
            
            return "\n".join(content)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞–Ω–∫–æ–≤: {e}")
            return f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
    
    async def _send_memory_file(self, chat_id: str, file_path: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–∞–º—è—Ç–∏ –≤ Telegram –≥—Ä—É–ø–ø—É"""
        try:
            from api.telegram_core import send_telegram_document
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
            success = await send_telegram_document(chat_id, file_path, "memory_export.txt")
            
            if success:
                logger.info(f"‚úÖ –§–∞–π–ª –ø–∞–º—è—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {chat_id}")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ –≥—Ä—É–ø–ø—É {chat_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        return {
            "active_chats": len(self.last_export_time),
            "cooldown_seconds": self.cooldown_sec,
            "last_exports": self.last_export_time.copy(),
            "components_initialized": {
                "memory_manager": self._memory_manager is not None,
                "smart_retriever": self._smart_retriever is not None
            }
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞
memory_export_trigger = MemoryExportTrigger()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def process_memory_export_trigger(chat_id: str, message_text: str, user_id: str) -> Optional[str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏"""
    return await memory_export_trigger.process_trigger(chat_id, message_text, user_id)
