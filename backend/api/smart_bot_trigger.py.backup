"""
ü§ñ Smart Bot Trigger - –£–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä "–±–æ—Ç" —Å –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å SmartMemoryManager, –≤—Ä–µ–º–µ–Ω–Ω—ã–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ–º –∏ –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
"""

import re
import logging
import time
import asyncio
import uuid
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

logger = logging.getLogger("chatumba.smart_bot_trigger")

class SmartBotTrigger:
    """–£–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞ '–±–æ—Ç' –≤ –≥—Ä—É–ø–ø–∞—Ö"""
    
    def __init__(self):
        self.cooldown_sec = 60  # 1 –º–∏–Ω—É—Ç–∞ cooldown –º–µ–∂–¥—É —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º–∏
        self.last_trigger_time = {}  # {chat_id: timestamp}
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏)
        self._memory_manager = None
        self._smart_retriever = None
        self._llm_client = None
        
        # –°–∏—Å—Ç–µ–º–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        self.pending_confirmations = {}  # {confirmation_id: {chat_id, user_id, message_text, context_data, message_id, timestamp}}
        self.confirmation_timeout = 15  # –¢–∞–π–º–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥
        
    def is_triggered(self, message_text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ "–±–æ—Ç" """
        pattern = r'\b–±–æ—Ç\b'
        match = re.search(pattern, message_text, re.IGNORECASE)
        
        if match:
            logger.info(f"üéØ –¢—Ä–∏–≥–≥–µ—Ä '–±–æ—Ç' —Å—Ä–∞–±–æ—Ç–∞–ª: '{message_text[:50]}...'")
            return True
            
        return False
    
    def is_cooldown_active(self, chat_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ cooldown –¥–ª—è —á–∞—Ç–∞"""
        now = time.time()
        last_time = self.last_trigger_time.get(chat_id, 0)
        
        if now - last_time < self.cooldown_sec:
            remaining = self.cooldown_sec - (now - last_time)
            logger.info(f"‚è∞ Cooldown –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}, –æ—Å—Ç–∞–ª–æ—Å—å {remaining:.1f} —Å–µ–∫")
            return True
            
        return False
    
    def update_trigger_time(self, chat_id: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        self.last_trigger_time[chat_id] = time.time()
        logger.info(f"üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
    async def send_confirmation_buttons(self, chat_id: str, user_id: str, message_text: str, 
                                       is_quote: bool = False, quoted_message_id: int = None) -> Optional[str]:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            from api.telegram_core import send_telegram_message_with_buttons, delete_telegram_message
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_id = str(uuid.uuid4())[:8]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            buttons = [
                [
                    {"text": "‚úÖ –î–∞", "callback_data": f"bot_confirm_yes_{confirmation_id}"},
                    {"text": "‚ùå –ù–µ—Ç", "callback_data": f"bot_confirm_no_{confirmation_id}"}
                ]
            ]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            message_id = await send_telegram_message_with_buttons(
                chat_id,
                "ü§ñ –¢—ã –º–µ–Ω—è –∑–≤–∞–ª?",
                buttons
            )
            
            if not message_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
                return None
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ pending confirmation
            self.pending_confirmations[confirmation_id] = {
                'chat_id': chat_id,
                'user_id': user_id,
                'message_text': message_text,
                'is_quote': is_quote,
                'quoted_message_id': quoted_message_id,
                'message_id': message_id,
                'timestamp': time.time()
            }
            
            logger.info(f"üîî –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}, ID: {confirmation_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            asyncio.create_task(self._delete_confirmation_after_timeout(confirmation_id, chat_id, message_id))
            
            return "CONFIRMATION_SENT"  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return None

    async def _delete_confirmation_after_timeout(self, confirmation_id: str, chat_id: str, message_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ —Ç–∞–π–º–∞—É—Ç–∞"""
        try:
            await asyncio.sleep(self.confirmation_timeout)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ pending confirmation
            if confirmation_id in self.pending_confirmations:
                from api.telegram_core import delete_telegram_message
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await delete_telegram_message(chat_id, message_id)
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                del self.pending_confirmations[confirmation_id]
                
                logger.info(f"‚è∞ –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {message_id}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–∞—É—Ç—É: {e}")

    async def handle_confirmation_callback(self, confirmation_id: str, answer: str) -> Optional[Dict[str, Any]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            if confirmation_id not in self.pending_confirmations:
                logger.warning(f"‚ö†Ô∏è Confirmation ID {confirmation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            confirmation_data = self.pending_confirmations[confirmation_id]
            chat_id = confirmation_data['chat_id']
            message_id = confirmation_data['message_id']
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            from api.telegram_core import delete_telegram_message
            await delete_telegram_message(chat_id, message_id)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ pending
            del self.pending_confirmations[confirmation_id]
            
            if answer == "no":
                logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ —á–∞—Ç–µ {chat_id}")
                return None
            
            # –ï—Å–ª–∏ "–¥–∞" - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ç—Ä–∏–≥–≥–µ—Ä –≤ —á–∞—Ç–µ {chat_id}")
            
            return confirmation_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return None

    async def process_confirmed_trigger(self, chat_id: str, message_text: str, user_id: str, 
                                       is_quote: bool = False, quoted_message_id: int = None) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä (–ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è '–î–∞')"""
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞
        self.update_trigger_time(chat_id)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self._ensure_components_initialized()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
            self._memory_manager.add_group_message(chat_id, user_id, message_text)
            
            # –°–æ–±–∏—Ä–∞–µ–º —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —É—á–µ—Ç–æ–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            context_data = await self._build_smart_context(chat_id, message_text, user_id, is_quote, quoted_message_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self._generate_smart_response(chat_id, context_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
            if response:
                context_hash = self._create_context_hash(context_data)
                self._memory_manager.add_bot_response(chat_id, response, context_hash)
            
            logger.info(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id} ({'—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' if is_quote else '–æ–±—ã—á–Ω—ã–π'})")
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return "ü§ñ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≥—Ä—É–ø–ø–µ?"

    
    async def process_trigger(self, chat_id: str, message_text: str, user_id: str, 
                            is_quote: bool = False, quoted_message_id: int = None) -> Optional[str]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–ª–æ–≤–æ "–±–æ—Ç" (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
        if not is_quote and not self.is_triggered(message_text):
            return None
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        if self.is_cooldown_active(chat_id):
            return None  # –ú–æ–ª—á–∏–º –ø—Ä–∏ cooldown
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        return await self.send_confirmation_buttons(chat_id, user_id, message_text, is_quote, quoted_message_id)
    async def _ensure_components_initialized(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        try:
            if self._memory_manager is None:
                from memory.smart_memory_manager import get_smart_memory_manager
                self._memory_manager = get_smart_memory_manager()
                logger.debug("üìä SmartMemoryManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if self._smart_retriever is None:
                from memory.smart_retriever import get_smart_retriever
                self._smart_retriever = get_smart_retriever(self._memory_manager)
                logger.debug("üîç SmartRetriever –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            if self._llm_client is None:
                from utils.component_manager import get_component_manager
                component_manager = get_component_manager()
                self._llm_client = component_manager.get_llm_client()
                logger.debug("üß† LLM Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    async def _build_smart_context(self, chat_id: str, message_text: str, user_id: str, 
                                  is_quote: bool = False, quoted_message_id: int = None) -> Dict[str, Any]:
        """–°–æ–±–∏—Ä–∞–µ—Ç —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            time_info = self._memory_manager.get_current_time_info()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            recent_messages = self._memory_manager.get_recent_messages(chat_id, limit=15)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ (–∑–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤)
            recent_responses = self._memory_manager.get_recent_bot_responses(chat_id, limit=3)
            
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏
            relevant_chunks = await self._smart_retriever.find_relevant_chunks(
                chat_id, message_text, context=""
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            current_topic = self._analyze_current_topic(recent_messages)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participant_names = await self._get_participant_names(chat_id, recent_messages)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –µ—Å–ª–∏ —ç—Ç–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            dialogue_context = ""
            if is_quote and quoted_message_id:
                from memory.dialogue_context import get_dialogue_context_manager
                dialogue_manager = get_dialogue_context_manager()
                dialogue_turns = dialogue_manager.get_recent_dialogue_context(chat_id, user_id, limit=5)
                dialogue_context = dialogue_manager.format_dialogue_context(dialogue_turns)
            
            return {
                'time_info': time_info,
                'recent_messages': recent_messages,
                'recent_responses': recent_responses,
                'relevant_chunks': relevant_chunks,
                'current_topic': current_topic,
                'participant_names': participant_names,
                'trigger_message': message_text,
                'trigger_user': user_id,
                'is_quote': is_quote,
                'quoted_message_id': quoted_message_id,
                'dialogue_context': dialogue_context
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {}
    
    def _analyze_current_topic(self, messages) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not messages:
            return "–æ–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–º—ã
        recent_texts = []
        for msg in messages[-3:]:
            if msg.content and not msg.content.startswith("/"):
                recent_texts.append(msg.content.lower())
        
        if not recent_texts:
            return "–æ–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
        
        combined_text = " ".join(recent_texts)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        topic_keywords = {
            "—Ä–∞–±–æ—Ç–∞": ["—Ä–∞–±–æ—Ç–∞", "–ø—Ä–æ–µ–∫—Ç", "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∞", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–∑–∞–¥–∞—á–∞"],
            "–ø–ª–∞–Ω—ã": ["–ø–ª–∞–Ω—ã", "–≤—Å—Ç—Ä–µ—á–∞", "–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è", "–≤—Ä–µ–º—è", "–∫–æ–≥–¥–∞"],
            "–ø—Ä–æ–±–ª–µ–º—ã": ["–ø—Ä–æ–±–ª–µ–º–∞", "–ø–æ–º–æ—â—å", "–≤–æ–ø—Ä–æ—Å", "–Ω–µ –∑–Ω–∞—é", "–∫–∞–∫", "–æ—à–∏–±–∫–∞"],
            "–µ–¥–∞": ["–µ–¥–∞", "–∫—É—à–∞—Ç—å", "–≥–æ—Ç–æ–≤–∏—Ç—å", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "–æ–±–µ–¥"],
            "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è": ["—Ñ–∏–ª—å–º", "—Å–µ—Ä–∏–∞–ª", "–º—É–∑—ã–∫–∞", "–∏–≥—Ä–∞", "—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"],
            "–ø–æ–≥–æ–¥–∞": ["–ø–æ–≥–æ–¥–∞", "–¥–æ–∂–¥—å", "—Å–æ–ª–Ω—Ü–µ", "—Ö–æ–ª–æ–¥–Ω–æ", "–∂–∞—Ä–∫–æ", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"]
        }
        
        for topic, keywords in topic_keywords.items():
            if any(keyword in combined_text for keyword in keywords):
                return topic
        
        return "–æ–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä"
    
    async def _get_participant_names(self, chat_id: str, messages) -> Dict[str, str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ SQLite"""
        try:
            from memory.sqlite import sqlite_storage
            
            names = {}
            unique_users = set(msg.user_id for msg in messages)
            
            for user_id in unique_users:
                name = sqlite_storage.get_group_user_name(chat_id, user_id)
                if name:
                    names[user_id] = name
                else:
                    names[user_id] = f"User_{user_id[-4:]}"
            
            return names
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return {}
    
    async def _generate_smart_response(self, chat_id: str, context_data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            time_info = context_data.get('time_info', {})
            recent_messages = context_data.get('recent_messages', [])
            recent_responses = context_data.get('recent_responses', [])
            relevant_chunks = context_data.get('relevant_chunks', [])
            current_topic = context_data.get('current_topic', '–æ–±—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä')
            participant_names = context_data.get('participant_names', {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = self._build_system_prompt(time_info, recent_responses, current_topic)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            conversation_context = self._format_recent_messages(recent_messages, participant_names)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å
            memory_context = ""
            if relevant_chunks:
                memory_context = self._smart_retriever.format_chunks_for_prompt(relevant_chunks, time_info)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_message = f"""–ö—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–±–æ—Ç' –≤ –≥—Ä—É–ø–ø–µ.

–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞: {current_topic}

{memory_context}

=== –ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
{conversation_context}

{context_data.get('dialogue_context', '')}

–í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –µ—Å—Ç—å –ø—Ä–æ—Å—å–±–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ JSON —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π –ø–∞–º—è—Ç—å —É–º–Ω–æ, –Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
            
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            logger.info(f"ü§ñ SYSTEM PROMPT: {system_prompt}")
            logger.info(f"ü§ñ USER MESSAGE: {user_message}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç" –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
            try:
                from .telegram_core import send_chat_action
                await send_chat_action(chat_id, "typing")
                logger.info(f"‚å®Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å '–ø–µ—á–∞—Ç–∞–µ—Ç' –≤ —á–∞—Ç {chat_id}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ '–ø–µ—á–∞—Ç–∞–µ—Ç': {e}")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self._llm_client.chat_completion(
                user_message=user_message,
                system_prompt=system_prompt,
                temperature=0.4,
                max_tokens=20000,
                frequency_penalty=0.5,
                presence_penalty=0.3
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
            if response:
                logger.info(f"ü§ñ –û–¢–í–ï–¢ LLM: {response}")
            
            if response and "–æ—à–∏–±–∫–∞" not in response.lower():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if "–∫–∞—Ä—Ç–∏–Ω" in response.lower() or "—Ä–∏—Å—É–Ω" in response.lower() or "–∏–∑–æ–±—Ä–∞–∂–µ–Ω" in response.lower():
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ"
                    try:
                        from .telegram_core import send_chat_action
                        await send_chat_action(chat_id, "upload_photo")
                        logger.info(f"üì∏ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å '–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ' –≤ —á–∞—Ç {chat_id}")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ '–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ': {e}")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    from api.telegram import parse_and_generate_image
                    processed_response = await parse_and_generate_image(response, chat_id)
                    return processed_response
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    return response
            else:
                return "ü§ñ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≥—Ä—É–ø–ø–µ?"
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "ü§ñ –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≥—Ä—É–ø–ø–µ?"
    
    def _build_system_prompt(self, time_info: Dict[str, Any], recent_responses: list, current_topic: str) -> str:
        """–°—Ç—Ä–æ–∏—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        
        current_time = time_info.get('datetime', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        weekday = time_info.get('weekday', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        time_of_day = time_info.get('time_of_day', 'day')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö
        anti_repeat_info = ""
        if recent_responses:
            responses_text = []
            for resp in recent_responses[:2]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 –æ—Ç–≤–µ—Ç–∞
                resp_time = datetime.fromtimestamp(resp.timestamp).strftime('%H:%M')
                responses_text.append(f"[{resp_time}] {resp.content[:100]}...")
            
            anti_repeat_info = f"""
–¢–í–û–ò –ü–û–°–õ–ï–î–ù–ò–ï –û–¢–í–ï–¢–´ (–ù–ï –ü–û–í–¢–û–†–Ø–ô–°–Ø!):
{chr(10).join(responses_text)}

–í–ê–ñ–ù–û: –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —ç—Ç–∏ –º—ã—Å–ª–∏ –∏ —Ñ—Ä–∞–∑—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–π –±–µ—Å–µ–¥—É –ø–æ-–Ω–æ–≤–æ–º—É!"""
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        time_hints = {
            'morning': "–°–µ–π—á–∞—Å —É—Ç—Ä–æ - –ª—é–¥–∏ –º–æ–≥—É—Ç –æ–±—Å—É–∂–¥–∞—Ç—å –ø–ª–∞–Ω—ã –Ω–∞ –¥–µ–Ω—å, —Ä–∞–±–æ—Ç—É.",
            'afternoon': "–°–µ–π—á–∞—Å –¥–µ–Ω—å - —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–∞–±–æ—á–∏–µ –≤–æ–ø—Ä–æ—Å—ã.",
            'evening': "–°–µ–π—á–∞—Å –≤–µ—á–µ—Ä - –ª—é–¥–∏ –º–æ–≥—É—Ç –æ–±—Å—É–∂–¥–∞—Ç—å –∏—Ç–æ–≥–∏ –¥–Ω—è, –ø–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä.",
            'night': "–°–µ–π—á–∞—Å –Ω–æ—á—å - –ª—é–¥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞–≤—à–∏–º–∏ –∏–ª–∏ –æ–±—Å—É–∂–¥–∞—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –ø–ª–∞–Ω—ã."
        }
        
        time_hint = time_hints.get(time_of_day, "")
        
        prompt = f"""–¢—ã ‚Äî –ß–∞—Ç—É–º–±–∞, —É–º–Ω—ã–π AI-–¥—Ä—É–≥ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.

–¢–ï–ö–£–©–ï–ï –í–†–ï–ú–Ø: {current_time} ({weekday})
{time_hint}

–¢–ï–ö–£–©–ê–Ø –¢–ï–ú–ê: {current_topic}

{anti_repeat_info}

–¢–í–û–ô –°–¢–ò–õ–¨:
- –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —É–º–µ—Å—Ç–Ω–æ
- –ë—É–¥—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è –∏ —Å–∏—Ç—É–∞—Ü–∏—é
- –ù–ï –ø–æ–≤—Ç–æ—Ä—è–π –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã

–ü–†–ê–í–ò–õ–ê –ü–ê–ú–Ø–¢–ò:
- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –¢–ï–ö–£–©–ï–ì–û —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—ã–≤–∞–π —Å—Ç–∞—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –ï—Å–ª–∏ –ø–∞–º—è—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–µ–∫—É—â–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–π –ø–∞–º—è—Ç—å
- –£—á–∏—Ç—ã–≤–∞–π –≤—Ä–µ–º—è: —Å—Ç–∞—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π

üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:
- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞ JSON:
```json
{{"description": "–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"}}
```
- –ï—Å–ª–∏ –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ (–∫–∞—Ä—Ç–∏–Ω–∫–∞, —Ä–∏—Å—É–Ω–æ–∫, —Ñ–æ—Ç–æ), –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —ç—Ç–æ
- JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ markdown –±–ª–æ–∫–µ ```json
"""

        prompt += """
üé§ –û–ó–í–£–ß–ö–ê (TTS):
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ–∑–≤—É—á–∏—Ç—å (—Å–ª–æ–≤–∞: "–æ–∑–≤—É—á—å", "–≥–æ–ª–æ—Å–æ–º", "–≥–æ–ª–æ—Å–æ–≤–æ–µ"), –¥–æ–±–∞–≤—å –í –ö–û–ù–ï–¶ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π SPEAK!{...} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–∑–≤—É—á–∫–∏.
–í–ê–ñ–ù–û: –í –ø–æ–ª–µ "text" —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û —Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å! –ù–µ –≤–µ—Å—å –æ—Ç–≤–µ—Ç!
–ü—Ä–∏–º–µ—Ä (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∂–µ–Ω—Å–∫–∞—è —Ä—É—Å—Å–∫–∞—è —Ä–µ—á—å):
SPEAK!{"speak": true, "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "tts": {"provider": "elevenlabs", "voice": {"gender": "female", "lang": "ru"}, "model_id": "eleven_multilingual_v2", "output_format": "mp3_44100_128", "stability": 0.25, "similarity_boost": 0.8, "style": "emotional", "use_speaker_boost": true}}
–ü—Ä–∏–º–µ—Ä (—Å–ø–æ–∫–æ–π–Ω–∞—è –º—É–∂—Å–∫–∞—è —Ä—É—Å—Å–∫–∞—è —Ä–µ—á—å):
SPEAK!{"speak": true, "text": "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!", "tts": {"provider": "elevenlabs", "voice": {"gender": "male", "lang": "ru"}, "model_id": "eleven_multilingual_v2", "output_format": "mp3_44100_128", "stability": 0.75, "similarity_boost": 0.7, "style": "conversational", "use_speaker_boost": false}}
–ü–æ—è—Å–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: stability ‚Äî –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å/—Ä–æ–≤–Ω–æ—Å—Ç—å, similarity_boost ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º–±—Ä–∞, style ‚Äî —Å—Ç–∏–ª—å —Ä–µ—á–∏ (narrative/conversational/emotional), use_speaker_boost ‚Äî –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å.

–í–´–ë–û–† –°–¢–ò–õ–Ø:
1. "narrative" - –ü–æ–≤–µ—Å—Ç–≤–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:
–†–æ–≤–Ω–∞—è, —Å–ø–æ–∫–æ–π–Ω–∞—è —Ä–µ—á—å
–ß–µ—Ç–∫–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
–°—Ç–∞–±–∏–ª—å–Ω–∞—è –∏–Ω—Ç–æ–Ω–∞—Ü–∏—è
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
üìñ –ß—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π - "–°–µ–≥–æ–¥–Ω—è –Ω–∞ —Ä—ã–Ω–∫–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ..."
üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π - "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ..."
üìä –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - "–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–æ—Å—Ç –Ω–∞ 15%..."
üéØ –î–µ–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - "–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ"
–ü—Ä–∏–º–µ—Ä –¥–ª—è –±–æ—Ç–∞:
"–¢—Ä–µ–π–¥–∏–Ω–≥ ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö..."
2. "conversational" - –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:
–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è, –∂–∏–≤–∞—è —Ä–µ—á—å
–ö–∞–∫ –≤ –æ–±—ã—á–Ω–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–µ
–õ–µ–≥–∫–∏–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω
–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
üí¨ –û–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ - "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
ü§ù –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã - "–î–∞, —è –ø–æ–Ω–∏–º–∞—é —Ç–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É..."
üòä –î—Ä—É–∂–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã - "–ü–æ–ø—Ä–æ–±—É–π –≤–æ—Ç —Ç–∞–∫..."
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è - "–° –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!"
–ü—Ä–∏–º–µ—Ä –¥–ª—è –±–æ—Ç–∞:
"–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —Ç–≤–æ—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ç—Ä–µ–π–¥–∏–Ω–≥–∞..."
3. "emotional" - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç:
–í—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ—á—å
–°–∏–ª—å–Ω—ã–µ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏
–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞
–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞
–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
üéµ –ü–µ—Å–Ω–∏ –∏ —Å—Ç–∏—Ö–∏ - "–ú—ã –ø–æ–æ–æ–π–¥–µ–µ–µ–µ–µ–µ–µ–µ–º –ø–æ –ø–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–æ–ª—é..."
üé≠ –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã - "–≠—Ç–æ –±—ã–ª–æ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ!"
üéâ –ü—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏—è - "–£—Ä–∞! –ú—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è - "–¢—ã –º–æ–∂–µ—à—å –≤—Å–µ!"
–ü—Ä–∏–º–µ—Ä –¥–ª—è –±–æ—Ç–∞:
"–¢—Ä–µ–µ–µ–µ–π–¥–∏–Ω–≥ –∑–æ–≤—ë—Ç, –≥—Ä–∞–∞–∞–∞—Ñ–∏–∫–∏ –ø–ª—è—à—É—Ç, –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Ä—ã–≤–∞–µ–º, –Ω–µ –∑–µ–≤–∞–∞–∞–∞–∞–π!"

–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:
- "male" - –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å (Clyde) - –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- "female" - –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å (Alice) - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –¥–µ–ª–æ–≤–æ–≥–æ –æ–±—â–µ–Ω–∏—è

–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É!"""

        return prompt
    
    def _format_recent_messages(self, messages, participant_names: Dict[str, str]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not messages:
            return "–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
        
        formatted_lines = []
        for msg in messages[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            if not msg.content or msg.content.startswith("/"):
                continue
                
            timestamp_str = datetime.fromtimestamp(msg.timestamp).strftime('%H:%M')
            user_name = participant_names.get(msg.user_id, f"User_{msg.user_id[-4:]}")
            
            formatted_lines.append(f"[{timestamp_str}] {user_name}: {msg.content}")
        
        return "\n".join(formatted_lines) if formatted_lines else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    
    def _create_context_hash(self, context_data: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ö—ç—à –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤"""
        try:
            import hashlib
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context_str = f"{context_data.get('current_topic', '')}"
            
            recent_messages = context_data.get('recent_messages', [])
            if recent_messages:
                last_messages = [msg.content for msg in recent_messages[-3:]]
                context_str += "".join(last_messages)
            
            return hashlib.md5(context_str.encode()).hexdigest()[:8]
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ö—ç—à–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return "default"
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∏–≥–≥–µ—Ä–∞"""
        return {
            "active_chats": len(self.last_trigger_time),
            "cooldown_seconds": self.cooldown_sec,
            "last_triggers": self.last_trigger_time.copy(),
            "components_initialized": {
                "memory_manager": self._memory_manager is not None,
                "smart_retriever": self._smart_retriever is not None,
                "llm_client": self._llm_client is not None
            }
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–∏–≥–≥–µ—Ä–∞
smart_bot_trigger = SmartBotTrigger()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def process_smart_bot_trigger(chat_id: str, message_text: str, user_id: str, 
                                   is_quote: bool = False, quoted_message_id: int = None) -> Optional[str]:
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ "–±–æ—Ç" (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ —á–µ—Ä–µ–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)"""
    return await smart_bot_trigger.process_trigger(chat_id, message_text, user_id, is_quote, quoted_message_id)