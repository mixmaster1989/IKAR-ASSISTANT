"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ-—Ñ—É–Ω–∫—Ü–∏–π Telegram –±–æ—Ç–∞.
–ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞.
"""

import logging
import asyncio
import aiohttp
import json
import re
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
from pathlib import Path

from backend.config import TELEGRAM_CONFIG
from backend.memory.sqlite import sqlite_storage
from backend.api.telegram.crypto_handler import (
    detect_crypto_content,
    extract_trading_pair_from_description,
    fetch_crypto_news,
    analyze_trading_chart
)
from backend.api.telegram.crypto.cryptosud import cryptosud_analysis

logger = logging.getLogger("chatumba.telegram_crypto_processing")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ö–†–ò–ü–¢–û–°–£–î–ê
pending_crypto_requests = {}

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç BingX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from utils.import_helper import get_bingx_client, get_crypto_integration


async def fetch_ultimate_crypto_data(crypto_terms):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.
    –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py
    """
    try:
        logger.info(f"[–ö–†–ò–ü–¢–û –î–ê–ù–ù–´–ï] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤: {crypto_terms[:5]}")
        
        # –ü–æ–ª—É—á–∞–µ–º BingX –∫–ª–∏–µ–Ω—Ç
        bingx_client = get_bingx_client()
        if not bingx_client:
            return {"error": "BingX –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∏–ø—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        crypto_integration = get_crypto_integration()
        if not crypto_integration:
            return {"error": "–ö—Ä–∏–ø—Ç–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
        trading_pair = extract_trading_pair_from_description("", crypto_terms)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å BingX
        bingx_data = await fetch_bingx_market_data(trading_pair)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news_data = await fetch_crypto_news(crypto_terms)
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        macro_data = await fetch_macro_economic_data()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        comprehensive_data = {
            'trading_pair': trading_pair,
            'bingx_data': bingx_data,
            'news': news_data,
            'macro_data': macro_data,
            'timestamp': datetime.now().isoformat(),
            'crypto_terms': crypto_terms
        }
        
        logger.info(f"[–ö–†–ò–ü–¢–û –î–ê–ù–ù–´–ï] –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {trading_pair}")
        return comprehensive_data
        
    except Exception as e:
        logger.error(f"[–ö–†–ò–ü–¢–û –î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"error": str(e)}


async def fetch_macro_economic_data():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
    –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py
    """
    try:
        logger.info("[–ú–ê–ö–†–û –î–ê–ù–ù–´–ï] –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        macro_data = {
            'dollar_index': 105.2,
            'oil_price': 85.3,
            'gold_price': 1950.0,
            'vix_index': 18.5,
            'fed_rate': 5.25,
            'inflation': 3.2,
            'unemployment': 3.8,
            'gdp_growth': 2.1
        }
        
        logger.info("[–ú–ê–ö–†–û –î–ê–ù–ù–´–ï] –ü–æ–ª—É—á–µ–Ω—ã –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ")
        return macro_data
        
    except Exception as e:
        logger.error(f"[–ú–ê–ö–†–û –î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}


async def fetch_bingx_market_data(trading_pair: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BingX.
    –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py
    """
    try:
        bingx_client = get_bingx_client()
        if not bingx_client:
            return {"error": "BingX –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        ticker = bingx_client.get_ticker_24hr(trading_pair)
        order_book = bingx_client.get_order_book(trading_pair, limit=50)
        recent_trades = bingx_client.get_recent_trades(trading_pair, limit=100)
        klines_1h = bingx_client.get_klines(trading_pair, interval='1h', limit=24)
        klines_4h = bingx_client.get_klines(trading_pair, interval='4h', limit=30)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        sentiment = bingx_client.analyze_market_sentiment(trading_pair, '1h')
        
        market_data = {
            'symbol': trading_pair,
            'timestamp': int(datetime.now().timestamp() * 1000),
            'ticker': ticker,
            'order_book': order_book,
            'recent_trades': recent_trades,
            'klines_1h': klines_1h,
            'klines_4h': klines_4h,
            'sentiment': sentiment
        }
        
        logger.info(f"[BINGX] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {trading_pair}")
        return market_data
        
    except Exception as e:
        logger.error(f"[BINGX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"error": str(e)}


def format_bingx_data_for_prompts(bingx_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BingX –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤.
    –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py
    """
    if not bingx_data or "error" in bingx_data:
        return "‚ùå –î–∞–Ω–Ω—ã–µ BingX –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    formatted = f"üìä **–î–ê–ù–ù–´–ï BINGX:**\n\n"
    
    # –¢–∏–∫–µ—Ä
    if "ticker" in bingx_data and bingx_data["ticker"]:
        ticker_data = bingx_data["ticker"].get("data", {})
        if ticker_data and isinstance(ticker_data, dict):
            formatted += f"üí∞ **–¢–ò–ö–ï–†:**\n"
            formatted += f"‚Ä¢ –¶–µ–Ω–∞: ${ticker_data.get('lastPrice', 'N/A')}\n"
            formatted += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {ticker_data.get('priceChangePercent', 'N/A')}%\n"
            formatted += f"‚Ä¢ –û–±—ä–µ–º 24—á: {ticker_data.get('volume', 'N/A')}\n"
            formatted += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 24—á: ${ticker_data.get('highPrice', 'N/A')}\n"
            formatted += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º 24—á: ${ticker_data.get('lowPrice', 'N/A')}\n\n"
    
    # –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫
    if "order_book" in bingx_data and bingx_data["order_book"]:
        order_book_data = bingx_data["order_book"].get("data", {})
        if order_book_data and isinstance(order_book_data, dict):
            bids = order_book_data.get("bids", [])
            asks = order_book_data.get("asks", [])
            
            formatted += f"üìã **–°–¢–ê–ö–ê–ù –ó–ê–Ø–í–û–ö:**\n"
            if bids:
                formatted += f"‚Ä¢ –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${bids[0][0]} ({bids[0][1]})\n"
            if asks:
                formatted += f"‚Ä¢ –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${asks[0][0]} ({asks[0][1]})\n"
            
            # –ì–ª—É–±–∏–Ω–∞ —Ä—ã–Ω–∫–∞
            bid_depth = sum(float(bid[1]) for bid in bids[:5]) if bids else 0
            ask_depth = sum(float(ask[1]) for ask in asks[:5]) if asks else 0
            formatted += f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ (—Ç–æ–ø-5): {bid_depth:.2f}\n"
            formatted += f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂ (—Ç–æ–ø-5): {ask_depth:.2f}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    if "recent_trades" in bingx_data and bingx_data["recent_trades"]:
        trades_data = bingx_data["recent_trades"].get("data", [])
        if trades_data and isinstance(trades_data, list) and len(trades_data) > 0:
            formatted += f"üîÑ **–ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:**\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            for i, trade in enumerate(trades_data[:5]):
                price = trade.get("price", "N/A")
                qty = trade.get("qty", "N/A")
                side = "üü¢" if trade.get("isBuyerMaker") else "üî¥"
                formatted += f"‚Ä¢ {side} ${price} ({qty})\n"
            formatted += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    if "sentiment" in bingx_data and bingx_data["sentiment"]:
        sentiment_data = bingx_data["sentiment"]
        formatted += f"üé≠ **–ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–ô:**\n"
        formatted += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment_data.get('sentiment', 'N/A')}\n"
        formatted += f"‚Ä¢ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {sentiment_data.get('strength', 'N/A')}\n\n"
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if "comprehensive_analysis" in bingx_data and bingx_data["comprehensive_analysis"]:
        comp_data = bingx_data["comprehensive_analysis"]
        if "analysis" in comp_data:
            analysis = comp_data["analysis"]
            formatted += f"üîç **–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n"
            formatted += f"‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {analysis.get('liquidity_score', 'N/A')}\n"
            formatted += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis.get('volatility_score', 'N/A')}%\n"
            formatted += f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {analysis.get('trend_strength', 'N/A')}\n"
            
            # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_resistance = analysis.get("support_resistance", {})
            if support_resistance:
                formatted += f"‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${support_resistance.get('nearest_support', 'N/A')}\n"
                formatted += f"‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${support_resistance.get('nearest_resistance', 'N/A')}\n"
            formatted += "\n"
    
    formatted += f"‚è∞ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {bingx_data.get('timestamp', 'N/A')}\n"
    formatted += f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {' + '.join(bingx_data.get('data_sources', ['BingX API']))}\n"
    
    return formatted


async def validate_price_from_apis(trading_pair, chart_price):
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ API.
    –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py
    """
    import aiohttp
    
    logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—É {chart_price} –¥–ª—è –ø–∞—Ä—ã {trading_pair}")
    
    validated_prices = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
    pair_mapping = {
        'PEPE/USDT': {'binance': 'PEPEUSDT', 'coingecko': 'pepe'},
        'BTC/USDT': {'binance': 'BTCUSDT', 'coingecko': 'bitcoin'},
        'ETH/USDT': {'binance': 'ETHUSDT', 'coingecko': 'ethereum'},
        'BNB/USDT': {'binance': 'BNBUSDT', 'coingecko': 'binancecoin'}
    }
    
    pair_info = pair_mapping.get(trading_pair.upper())
    if not pair_info:
        logger.warning(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞—Ä–∞: {trading_pair}")
        return chart_price, []
    
    async with aiohttp.ClientSession() as session:
        
        # 1. Binance API
        try:
            binance_symbol = pair_info['binance']
            url = f'https://api.binance.com/api/v3/ticker/price?symbol={binance_symbol}'
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    binance_price = float(data.get('price', 0))
                    validated_prices.append(('Binance', binance_price))
                    logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] Binance: {binance_price}")
        except Exception as e:
            logger.error(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –û—à–∏–±–∫–∞ Binance: {e}")
        
        # 2. CoinGecko API
        try:
            coingecko_id = pair_info['coingecko']
            url = f'https://api.coingecko.com/api/v3/simple/price?ids={coingecko_id}&vs_currencies=usd'
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    coingecko_price = data.get(coingecko_id, {}).get('usd', 0)
                    if coingecko_price:
                        validated_prices.append(('CoinGecko', coingecko_price))
                        logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] CoinGecko: {coingecko_price}")
        except Exception as e:
            logger.error(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –û—à–∏–±–∫–∞ CoinGecko: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if validated_prices:
        avg_price = sum(price for _, price in validated_prices) / len(validated_prices)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞
        if chart_price and chart_price > 0:
            deviation = abs(chart_price - avg_price) / avg_price * 100
            logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ì—Ä–∞—Ñ–∏–∫: {chart_price}, –°—Ä–µ–¥–Ω–µ–µ API: {avg_price:.8f}, –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}%")
            
            if deviation > 10:  # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10%
                logger.warning(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ë–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ API")
                return avg_price, validated_prices
        
        return chart_price or avg_price, validated_prices
    
    return chart_price, []


async def process_telegram_photo_with_crypto_detection(message, chat_id, user_id, temp_dir, download_telegram_file, send_telegram_message):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∫—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py
    """
    from backend.api.telegram_vision import process_telegram_photo
    from backend.api.telegram_core import send_telegram_message_with_buttons
    
    try:
        logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
        
        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        image_description = await process_telegram_photo(message, chat_id, user_id, temp_dir, download_telegram_file, send_telegram_message)
        
        logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ü–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ: {image_description[:100] if image_description else 'None'}...")
        
        if image_description:
            logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {image_description}")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç
            is_crypto, crypto_terms = detect_crypto_content(image_description)
            
            logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏: is_crypto={is_crypto}, terms={crypto_terms}")
            
            if is_crypto:
                logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] ‚úÖ –û–ë–ù–ê–†–£–ñ–ï–ù –ö–†–ò–ü–¢–û–ö–û–ù–¢–ï–ù–¢! –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
                logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {crypto_terms}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
                request_id = f"{chat_id}_{int(datetime.now().timestamp())}"
                pending_crypto_requests[request_id] = {
                    'chat_id': chat_id,
                    'image_description': image_description,
                    'crypto_terms': crypto_terms,
                    'message': message,
                    'timestamp': datetime.now()
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                buttons = [
                    [{"text": "‚úÖ –î–ê - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ö–†–ò–ü–¢–û–°–£–î", "callback_data": f"crypto_yes_{request_id}"}],
                    [{"text": "‚ùå –ù–ï–¢ - –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "callback_data": f"crypto_no_{request_id}"}]
                ]
                
                terms_text = ', '.join(crypto_terms[:5])
                confirmation_text = (
                    f"üîç **–û–ë–ù–ê–†–£–ñ–ï–ù –ö–†–ò–ü–¢–û–ì–†–ê–§!**\n\n"
                    f"üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã: {terms_text}\n\n"
                    f"‚ö†Ô∏è –ö–†–ò–ü–¢–û–°–£–î –ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç –º–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–æ–≤.\n"
                    f"–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑?"
                )
                
                await send_telegram_message_with_buttons(chat_id, confirmation_text, buttons)
                logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è {request_id}")
            else:
                logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] ‚ùå –ö—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –≥—Ä—É–ø–ø–µ {chat_id}")
        else:
            logger.warning(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        
        return image_description
        
    except Exception as e:
        logger.error(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –û—à–∏–±–∫–∞: {e}")
        return None


async def handle_crypto_callback(callback_query, callback_data, chat_id, message_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫—Ä–∏–ø—Ç–æ-—Ñ—É–Ω–∫—Ü–∏–π.
    –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∏–∑ telegram_polling.py
    """
    from backend.api.telegram_core import answer_callback_query, send_telegram_message
    
    try:
        if callback_data.startswith('crypto_'):
            action = callback_data.split('_')[1]
            
            if action == 'yes':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º request_id
                request_id = callback_data.split('_', 2)[2]
                
                if request_id in pending_crypto_requests:
                    request_data = pending_crypto_requests[request_id]
                    
                    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                    await answer_callback_query(callback_query["id"], "üîç –ó–∞–ø—É—Å–∫–∞—é –ö–†–ò–ü–¢–û–°–£–î –∞–Ω–∞–ª–∏–∑...")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
                    analysis_result = await cryptosud_analysis(
                        request_data['chat_id'],
                        request_data['image_description'],
                        request_data['crypto_terms']
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    await send_telegram_message(request_data['chat_id'], analysis_result)
                    
                    # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                    del pending_crypto_requests[request_id]
                    
                    logger.info(f"[–ö–†–ò–ü–¢–û CALLBACK] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {request_id}")
                else:
                    await answer_callback_query(callback_query["id"], "‚ùå –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª")
                    
            elif action == 'no':
                # –ò–∑–≤–ª–µ–∫–∞–µ–º request_id
                request_id = callback_data.split('_', 2)[2]
                
                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await answer_callback_query(callback_query["id"], "‚ùå –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ pending
                if request_id in pending_crypto_requests:
                    del pending_crypto_requests[request_id]
                
                logger.info(f"[–ö–†–ò–ü–¢–û CALLBACK] –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è {request_id}")
                
            else:
                await answer_callback_query(callback_query["id"], "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ callback: {e}")
        await answer_callback_query(callback_query["id"], "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")


def cleanup_old_crypto_requests():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∫—Ä–∏–ø—Ç–æ-–∑–∞–ø—Ä–æ—Å—ã (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)."""
    try:
        current_time = datetime.now()
        expired_requests = []
        
        for request_id, request_data in pending_crypto_requests.items():
            if current_time - request_data['timestamp'] > timedelta(hours=1):
                expired_requests.append(request_id)
        
        for request_id in expired_requests:
            del pending_crypto_requests[request_id]
        
        if expired_requests:
            logger.info(f"[–ö–†–ò–ü–¢–û –û–ß–ò–°–¢–ö–ê] –£–¥–∞–ª–µ–Ω–æ {len(expired_requests)} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
            
    except Exception as e:
        logger.error(f"[–ö–†–ò–ü–¢–û –û–ß–ò–°–¢–ö–ê] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}") 