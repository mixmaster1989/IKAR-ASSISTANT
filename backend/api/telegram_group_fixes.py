"""
–ú–æ–¥—É–ª—å —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram –±–æ—Ç–∞.
"""
import logging
import sqlite3
import time
from typing import List, Tuple, Optional

logger = logging.getLogger("chatumba.telegram")

async def handle_names_command(sqlite_storage, chat_id: str, from_user_id: str, send_telegram_message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /names.
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º–µ–Ω
    from backend.api.telegram_core import group_names_mode
    group_names_mode[chat_id] = 'collecting'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect(sqlite_storage.db_path)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO group_modes (chat_id, mode, last_updated) VALUES (?, ?, ?) ON CONFLICT(chat_id) DO UPDATE SET mode = ?, last_updated = ?',
            (chat_id, 'collecting', int(time.time()), 'collecting', int(time.time()))
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø—ã: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    await send_telegram_message(
        chat_id,
        "üîç <b>–†–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>@username –ò–º—è</code> –∏–ª–∏ <code>@user_id –ò–º—è</code>\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /nameslist - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞\n"
        "‚Ä¢ /namesdone - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –∏–º—ë–Ω\n"
        "‚Ä¢ /namescancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Å–±–æ—Ä –∏–º—ë–Ω",
        "HTML"
    )
    
    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {from_user_id}")

async def handle_nameslist_command(sqlite_storage, chat_id: str, send_telegram_message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /nameslist.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω
    try:
        conn = sqlite3.connect(sqlite_storage.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, name FROM group_user_names WHERE chat_id = ?', (chat_id,))
        names = cursor.fetchall()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω –≥—Ä—É–ø–ø—ã: {e}")
        names = []
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–º–µ–Ω
    if names:
        names_text = "\n".join([f"‚Ä¢ <code>{uid}</code>: <b>{name}</b>" for uid, name in names])
        await send_telegram_message(
            chat_id,
            f"üìã <b>–°–æ–±—Ä–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ ({len(names)}):</b>\n\n{names_text}",
            "HTML"
        )
    else:
        await send_telegram_message(
            chat_id,
            "‚ùå –ò–º–µ–Ω–∞ –µ—â—ë –Ω–µ —Å–æ–±—Ä–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç <code>@username –ò–º—è</code>",
            "HTML"
        )
    
    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ó–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω, –Ω–∞–π–¥–µ–Ω–æ: {len(names)}")

async def handle_namescancel_command(sqlite_storage, chat_id: str, send_telegram_message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /namescancel.
    """
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º
    from backend.api.telegram_core import group_names_mode
    if chat_id in group_names_mode:
        del group_names_mode[chat_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect(sqlite_storage.db_path)
        cursor = conn.cursor()
        cursor.execute('DELETE FROM group_modes WHERE chat_id = ?', (chat_id,))
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø—ã: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_telegram_message(
        chat_id,
        "‚ùå –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω –æ—Ç–º–µ–Ω—ë–Ω.",
        "HTML"
    )
    
    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω –æ—Ç–º–µ–Ω—ë–Ω")

async def handle_namesdone_command(sqlite_storage, chat_id: str, send_telegram_message, analyze_group_history):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /namesdone.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω
    try:
        conn = sqlite3.connect(sqlite_storage.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT user_id, name FROM group_user_names WHERE chat_id = ?', (chat_id,))
        names = cursor.fetchall()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º–µ–Ω –≥—Ä—É–ø–ø—ã: {e}")
        names = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º–µ–Ω–∞
    if not names:
        await send_telegram_message(
            chat_id,
            "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–º–µ–Ω–∏! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∏–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>@username –ò–º—è</code>",
            "HTML"
        )
        logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä –∏–º—ë–Ω, –Ω–æ –∏–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    from api.telegram_core import group_names_mode
    group_names_mode[chat_id] = 'active'
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∂–∏–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = sqlite3.connect(sqlite_storage.db_path)
        cursor = conn.cursor()
        cursor.execute(
            'INSERT INTO group_modes (chat_id, mode, last_updated) VALUES (?, ?, ?) ON CONFLICT(chat_id) DO UPDATE SET mode = ?, last_updated = ?',
            (chat_id, 'active', int(time.time()), 'active', int(time.time()))
        )
        conn.commit()
        conn.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ –≥—Ä—É–ø–ø—ã: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_telegram_message(
        chat_id,
        f"‚úÖ <b>–°–±–æ—Ä –∏–º—ë–Ω –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n\n–°–æ–±—Ä–∞–Ω–æ {len(names)} –∏–º—ë–Ω. –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥—Ä—É–ø–ø–æ–π.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /analyze - –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ\n"
        "‚Ä¢ /init - –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø—ã\n"
        "‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ <b>–ß–ê–¢–£–ú–ë–ê</b> –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ - –±—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
        "HTML"
    )
    
    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω –∑–∞–≤–µ—Ä—à—ë–Ω, —Å–æ–±—Ä–∞–Ω–æ {len(names)} –∏–º—ë–Ω")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É—à–∏
    await analyze_group_history(chat_id, reason='—Å–æ–∑–¥–∞–Ω–∏–µ –¥—É—à–∏')

async def handle_bot_added_to_group(chat_id: str, send_telegram_message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.
    """
    await send_telegram_message(
        chat_id,
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ß–∞—Ç—É–º–±–∞ - –±–æ—Ç —Å –¥—É—à–æ–π!</b>\n\n"
        "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –≤ –≥—Ä—É–ø–ø–µ:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /names –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –∏–º—ë–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        "2. –£–∫–∞–∂–∏—Ç–µ –∏–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>@username –ò–º—è</code>\n"
        "3. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω –∫–æ–º–∞–Ω–¥–æ–π /nameslist\n"
        "4. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Å–±–æ—Ä –∫–æ–º–∞–Ω–¥–æ–π /namesdone\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>–ß–ê–¢–£–ú–ë–ê</b> –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä—É–ø–ø—ã\n\n"
        "–Ø –±—É–¥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞—Ç–º–æ—Å—Ñ–µ—Ä—É –≤ –≥—Ä—É–ø–ø–µ –∏ —Å–æ–∑–¥–∞–º –≥—Ä—É–ø–ø–æ–≤—É—é –¥—É—à—É!",
        "HTML"
    )
    
    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")

async def process_name_assignment(sqlite_storage, chat_id: str, text: str, from_user: dict, message: dict, send_telegram_message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    import re
    match = re.match(r"@(\w+|\d+)\s+(.+)", text)
    if not match:
        await send_telegram_message(
            chat_id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>@username –ò–º—è</code>",
            "HTML"
        )
        return
    
    mention, name = match.groups()
    name = name.strip()
    from_user_id = from_user.get("id", "")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –ø–æ username –∏–ª–∏ —á–∏—Å–ª—É
    target_user_id = None
    
    # –ï—Å–ª–∏ —ç—Ç–æ user_id (—á–∏—Å–ª–æ)
    if mention.isdigit():
        target_user_id = mention
    else:
        # –ü–æ–∏—Å–∫ user_id –ø–æ username —Å—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã
        group_msgs = sqlite_storage.get_group_messages(chat_id)
        for msg in reversed(group_msgs):
            u = msg.get("user_id", "")
            uname = msg.get("username", "")
            if uname == mention or (msg.get("from_username") == mention):
                target_user_id = u
                break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º entities –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
        if not target_user_id and "entities" in message:
            for ent in message["entities"]:
                if ent.get("type") == "mention":
                    if text[ent["offset"]+1:ent["offset"]+ent["length"]] == mention:
                        target_user_id = from_user_id
                        break
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å user_id
    if not target_user_id:
        await send_telegram_message(
            chat_id,
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ @{mention}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            "HTML"
        )
        logger.warning(f"[–ì–†–£–ü–ü–ê {chat_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ @{mention}")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    sqlite_storage.set_group_user_name(chat_id, target_user_id, name)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await send_telegram_message(
        chat_id,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_user_id}</code> —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω –∫–∞–∫ <b>{name}</b>",
        "HTML"
    )
    
    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫—É {target_user_id}: {name}")

def load_group_modes_from_db(sqlite_storage):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–∂–∏–º—ã –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç—å.
    """
    try:
        conn = sqlite3.connect(sqlite_storage.db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='group_modes'")
        if not cursor.fetchone():
            logger.info("–¢–∞–±–ª–∏—Ü–∞ group_modes –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º...")
            cursor.execute('''
            CREATE TABLE IF NOT EXISTS group_modes (
                chat_id TEXT PRIMARY KEY,
                mode TEXT NOT NULL,
                last_updated INTEGER NOT NULL
            )
            ''')
            conn.commit()
            conn.close()
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º—ã
        cursor.execute('SELECT chat_id, mode FROM group_modes')
        modes = {row[0]: row[1] for row in cursor.fetchall()}
        conn.close()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        from api.telegram_core import group_names_mode
        group_names_mode.update(modes)
        
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(modes)} —Ä–µ–∂–∏–º–æ–≤ –≥—Ä—É–ø–ø –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return modes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∂–∏–º–æ–≤ –≥—Ä—É–ø–ø: {e}")
        return {}