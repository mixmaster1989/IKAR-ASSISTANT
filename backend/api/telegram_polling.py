"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram polling.
–í—ã–Ω–µ—Å–µ–Ω –∏–∑ telegram.py –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞.
"""
import logging
import asyncio
import os
import sqlite3
from datetime import datetime, timedelta
from backend.config import TELEGRAM_CONFIG
from pathlib import Path
import re
from backend.api.telegram_photo_handler import send_photo_recognition_buttons, handle_photo_callback
from backend.memory.sqlite import sqlite_storage
# STABLE: —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–∞

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ö–†–ò–ü–¢–û–°–£–î–ê
pending_crypto_requests = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
# pending_photo_messages –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, —Ç–µ–ø–µ—Ä—å –≤—Å—ë –≤ –ë–î

logger = logging.getLogger("chatumba.telegram_polling")

def cleanup_old_photo_messages():
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ –∏–∑ –ë–î (—Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)."""
    try:
        sqlite_storage.cleanup_old_pending_photos(3600)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î: {e}")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
from .telegram_vision import process_telegram_photo
from .telegram_core import answer_callback_query, send_telegram_message_with_buttons, send_telegram_message

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from .telegram.message_handler import send_evolution_report, neurosud_analysis
from .telegram.group_handler import show_collective_memory, show_full_chunks_with_buttons, handle_chunk_deletion, handle_chunk_view

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ-—Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –Ω–æ–≤–æ–≥–æ –º–æ–¥—É–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
from .telegram.crypto import (
    detect_crypto_content,
    extract_trading_pair_from_description,
    fetch_ultimate_crypto_data,
    fetch_macro_economic_data,
    fetch_bingx_market_data,
    format_bingx_data_for_prompts,
    validate_price_from_apis,
    fetch_crypto_news,
    analyze_trading_chart,
    cryptosud_analysis
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ telegram_crypto_processing
from .telegram_crypto_processing import (
    process_telegram_photo_with_crypto_detection,
    handle_crypto_callback
)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç BingX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from utils.import_helper import get_bingx_client, get_crypto_integration

# –ö—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω—ã —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –∏–∑ crypto_handler.py

# detect_crypto_content —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ crypto_handler.py

# extract_trading_pair_from_description —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ crypto_handler.py



# format_bingx_data_for_prompts —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ telegram_crypto_processing.py








# validate_price_from_apis —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ telegram_crypto_processing.py

# fetch_macro_economic_data —Ç–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –∏–∑ telegram_crypto_processing.py










# –§—É–Ω–∫—Ü–∏—è send_evolution_report –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ telegram/message_handler.py

# –§—É–Ω–∫—Ü–∏—è show_collective_memory –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ telegram/group_handler.py

# –§—É–Ω–∫—Ü–∏—è show_full_chunks_with_buttons –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ telegram/group_handler.py

# –§—É–Ω–∫—Ü–∏—è handle_chunk_view –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ telegram/group_handler.py

# –§—É–Ω–∫—Ü–∏—è neurosud_analysis –≤—ã–Ω–µ—Å–µ–Ω–∞ –≤ telegram/message_handler.py

async def telegram_polling():
    global monitoring_chat_id
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª polling –¥–ª—è Telegram."""
    from api.telegram_core import (
        get_updates, monitoring_chat_id, TELEGRAM_CONFIG, 
        get_personality, sqlite_storage, process_telegram_message,
        send_telegram_message, send_monitoring_report, send_autonomous_message,
        send_autonomous_channel_message, send_channel_startup_message,
        check_channel_permissions, download_telegram_file, get_stt_engine,
        temp_dir, group_names_mode, analyze_group_history, get_bot_info,
        send_telegram_message_with_buttons,
        answer_callback_query
    )
    from api.telegram_vision import process_telegram_photo
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ Telegram polling...")
    bot_info = await get_bot_info()
    bot_id = None
    if bot_info:
        bot_id = bot_info.get("id")
    while True:
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–æ—Ç–æ-—Å–æ–æ–±—â–µ–Ω–∏—è
            cleanup_old_photo_messages()
            
            updates = await get_updates()
            for update in updates:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
                if "callback_query" in update:
                    callback_query = update["callback_query"]
                    callback_data = callback_query.get("data", "")
                    chat_id = str(callback_query["message"]["chat"]["id"])
                    message_id = callback_query["message"]["message_id"]
                    from_user = callback_query.get("from", {})
                    user_id = str(from_user.get("id", ""))
                    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω callback: {callback_data} –≤ —á–∞—Ç–µ {chat_id}")
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ-–∫–Ω–æ–ø–æ–∫
                    if callback_data.startswith("photo_img_") or callback_data.startswith("photo_text_"):
                        handled = await handle_photo_callback(callback_query, callback_data, chat_id, message_id, user_id, temp_dir, download_telegram_file)
                        if handled:
                            continue
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ö–†–ò–ü–¢–û–°–£–î–ê
                    if callback_data.startswith("crypto_"):
                        await handle_crypto_callback(callback_query, callback_data, chat_id, message_id)
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞
                    if callback_data.startswith("bot_confirm_"):
                        try:
                            from api.smart_bot_trigger import smart_bot_trigger
                            
                            # –ü–∞—Ä—Å–∏–º callback_data: bot_confirm_yes_12345678 –∏–ª–∏ bot_confirm_no_12345678
                            parts = callback_data.split("_")
                            if len(parts) >= 4:
                                answer = parts[2]  # yes –∏–ª–∏ no
                                confirmation_id = parts[3]  # ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
                                confirmation_data = await smart_bot_trigger.handle_confirmation_callback(confirmation_id, answer)
                                
                                if answer == "yes" and confirmation_data:
                                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
                                    response = await smart_bot_trigger.process_confirmed_trigger(
                                        confirmation_data['chat_id'],
                                        confirmation_data['message_text'],
                                        confirmation_data['user_id'],
                                        confirmation_data['is_quote'],
                                        confirmation_data['quoted_message_id']
                                    )
                                    
                                    if response:
                                        from api.telegram_core import send_telegram_message
                                        await send_telegram_message(
                                            confirmation_data['chat_id'], 
                                            response, 
                                            save_dialogue=True, 
                                            user_message=confirmation_data['message_text'], 
                                            user_id=confirmation_data['user_id']
                                        )
                                
                                # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                                await answer_callback_query(callback_query["id"], "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ" if answer == "yes" else "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")
                                
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞: {e}")
                            await answer_callback_query(callback_query["id"], f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
                        continue
                    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏
                    if callback_data.startswith("delete_chunk_"):
                        try:
                            await handle_chunk_deletion(callback_query, callback_data, chat_id, message_id)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞: {e}")
                            await answer_callback_query(callback_query["id"], f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
                        continue
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏
                    if callback_data.startswith("view_chunk_"):
                        try:
                            await handle_chunk_view(callback_query, callback_data, chat_id, message_id)
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞–Ω–∫–∞: {e}")
                            await answer_callback_query(callback_query["id"], f"‚ùå –û—à–∏–±–∫–∞: {str(e)[:50]}")
                        continue
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ-–∫–Ω–æ–ø–æ–∫
                    if callback_data.startswith("photo_yes_"):
                        orig_message_id = callback_data.replace("photo_yes_", "")
                        await answer_callback_query(callback_query["id"], "–ó–∞–ø—É—Å–∫–∞—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ!")
                        # –î–æ—Å—Ç–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ë–î
                        photo_message = sqlite_storage.get_pending_photo(chat_id, int(orig_message_id))
                        if photo_message:
                            try:
                                await process_telegram_photo_with_crypto_detection(photo_message, chat_id, user_id, temp_dir, download_telegram_file, send_telegram_message)
                                sqlite_storage.delete_pending_photo(chat_id, int(orig_message_id))
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
                                await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                        else:
                            await send_telegram_message(chat_id, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ")
                        continue
                    elif callback_data.startswith("photo_no_"):
                        await answer_callback_query(callback_query["id"], "–û–∫, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ.")
                        continue
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
                if "channel_post" in update:
                    channel_post = update["channel_post"]
                    chat_id = str(channel_post["chat"]["id"])
                    chat_title = channel_post["chat"].get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª")
                    logger.info(f"üî•üî•üî• [–ö–ê–ù–ê–õ {chat_id}] –ù–ê–ô–î–ï–ù –ö–ê–ù–ê–õ: '{chat_title}' üî•üî•üî•")
                    logger.info(f"[–ö–ê–ù–ê–õ {chat_id}] –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {channel_post}")
                    continue
                
                if "message" in update:
                    message = update["message"]
                    chat_id = str(message["chat"]["id"])
                    chat_type = message["chat"].get("type", "private")
                    user_id = f"tg_{chat_id}"
                    
                    # === –ü–†–ò–í–ê–¢–ù–´–ï –ß–ê–¢–´ ===
                    if chat_type == "private":
                        from backend.api.telegram_private import handle_private_chat
                        await handle_private_chat(message, chat_id, user_id)
                        continue
                    
                    # === –ì–†–£–ü–ü–û–í–û–ô –ß–ê–¢ ===
                    if chat_type in ("group", "supergroup"):
                        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
                        logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥–ª—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
                        from_user = message.get("from", {})
                        from_user_id = from_user.get("id")
                        if bot_id and str(from_user_id) == str(bot_id):
                            continue  # –ù–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                        # 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
                        if "new_chat_members" in message:
                            for member in message["new_chat_members"]:
                                if bot_id and str(member.get("id")) == str(bot_id):
                                    await send_telegram_message(
                                        chat_id,
                                        "–†–µ–±—è—Ç–∞, —è –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ò–≥–æ—Ä–µ–º. –î–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–º—ë–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /names."
                                    )
                                    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
                                    break
                        # 2. –†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –∏–º—ë–Ω
                        if "text" in message:
                            text = message["text"].strip()
                            # === –ö–û–ú–ê–ù–î–ê /init ===
                            if text == "/init" and group_names_mode.get(chat_id) == 'active':
                                await send_telegram_message(chat_id, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –≥—Ä—É–ø–ø—ã...", None)
                                result = await analyze_group_history(chat_id, reason='init')
                                if result and isinstance(result, str):
                                    await send_telegram_message(chat_id, result, None)
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ó–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /init.")
                                continue
                            # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º active, –µ—Å–ª–∏ –∏–º–µ–Ω–∞ —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã ---
                            if group_names_mode.get(chat_id) != 'active':
                                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ user_id –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∏–º—ë–Ω
                                try:
                                    conn = sqlite3.connect(sqlite_storage.db_path)
                                    cursor = conn.cursor()
                                    cursor.execute('SELECT user_id FROM group_user_names WHERE chat_id = ?', (chat_id,))
                                    user_ids = [row[0] for row in cursor.fetchall()]
                                    conn.close()
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–º—ë–Ω —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
                                    user_ids = []
                                named_count = len(user_ids)
                                if named_count >= 1:
                                    group_names_mode[chat_id] = 'active'
                                    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω —Ä–µ–∂–∏–º 'active' (–Ω–∞–π–¥–µ–Ω–æ –∏–º—ë–Ω: {named_count})")
                                    # –£–ë–†–ê–ù –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
                            # –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∞ –∏–º—ë–Ω
                            if text == "/names":
                                group_names_mode[chat_id] = 'collecting'
                                await send_telegram_message(
                                    chat_id,
                                    "–û–∫, –∫–æ–≥–æ –∫–∞–∫ –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @username –ò–º—è (–∏–ª–∏ @user_id –ò–º—è)",
                                    None
                                )
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –í–∫–ª—é—á—ë–Ω —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω.")
                                continue
                            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –∏–º—ë–Ω
                            if text == "/namesdone":
                                group_names_mode[chat_id] = 'active'
                                await send_telegram_message(
                                    chat_id,
                                    "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —è –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å –≥—Ä—É–ø–ø–æ–π.",
                                    None
                                )
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω –∑–∞–≤–µ—Ä—à—ë–Ω.")
                                # –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –≥—Ä—É–ø–ø—ã –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥—É—à–∏
                                await analyze_group_history(chat_id, reason='—Å–æ–∑–¥–∞–Ω–∏–µ –¥—É—à–∏')
                                continue
                            # –Ø–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–∏
                            if text == "/analyze" and group_names_mode.get(chat_id) == 'active':
                                await send_telegram_message(chat_id, "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–∏—Ç—É–∞—Ü–∏—é –≤ –≥—Ä—É–ø–ø–µ...", None)
                                result = await analyze_group_history(chat_id, reason='—Ä—É—á–Ω–æ–π –≤—ã–∑–æ–≤')
                                if result and isinstance(result, str):
                                    await send_telegram_message(chat_id, result, None)
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ó–∞–ø—Ä–æ—à–µ–Ω –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /analyze.")
                                continue
                            
                            # –û—Ç—á–µ—Ç –æ–± —ç–≤–æ–ª—é—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
                            if text == "/–≠–í–û–õ–Æ–¶–ò–Ø" or text == "/—ç–≤–æ–ª—é—Ü–∏—è":
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ó–∞–ø—Ä–æ—à–µ–Ω –æ—Ç—á–µ—Ç –æ–± —ç–≤–æ–ª—é—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã")
                                await send_evolution_report(chat_id)
                                continue
                            
                            # –ù–ï–ô–†–û–°–£–î - –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–∞–∑–Ω—ã–º–∏ AI –º–æ–¥–µ–ª—è–º–∏
                            if "–ù–ï–ô–†–û–°–£–î" in text.upper() and group_names_mode.get(chat_id) == 'active':
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ó–∞–ø—É—Å–∫ –ù–ï–ô–†–û–°–£–î–ê –ø–æ –∫–æ–º–∞–Ω–¥–µ: {text}")
                                await neurosud_analysis(chat_id)
                                continue
                            
                            # –ö–æ–º–∞–Ω–¥–∞ –ß–ê–ù–ö–ò - –ø–æ–∫–∞–∑ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
                            if (text == "/–ß–ê–ù–ö–ò" or text == "/—á–∞–Ω–∫–∏") and group_names_mode.get(chat_id) == 'active':
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ: {text}")
                                await show_collective_memory(chat_id)
                                continue
                            
                            # –ö–æ–º–∞–Ω–¥–∞ –ß–ê–ù–ö–ò_–ü–û–õ–ù–´–ï - –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
                            if (text == "/–ß–ê–ù–ö–ò_–ü–û–õ–ù–´–ï" or text == "/—á–∞–Ω–∫–∏_–ø–æ–ª–Ω—ã–µ") and group_names_mode.get(chat_id) == 'active':
                                logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —á–∞–Ω–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–µ: {text}")
                                await show_full_chunks_with_buttons(chat_id)
                                continue
                            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω, –∏—â–µ–º @user
                            if group_names_mode.get(chat_id) == 'collecting':
                                match = re.match(r"@(\w+|\d+)\s+(.+)", text)
                                if match:
                                    mention, name = match.groups()
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –ø–æ username –∏–ª–∏ —á–∏—Å–ª—É
                                    target_user_id = None
                                    # –ï—Å–ª–∏ —ç—Ç–æ user_id (—á–∏—Å–ª–æ)
                                    if mention.isdigit():
                                        target_user_id = mention
                                    else:
                                        # –ü–æ–∏—Å–∫ user_id –ø–æ username —Å—Ä–µ–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≥—Ä—É–ø–ø—ã
                                        group_msgs = sqlite_storage.get_group_messages(chat_id)
                                        for msg in reversed(group_msgs):
                                            u = msg.get("user_id", "")
                                            uname = msg.get("username", "")
                                            if uname == mention or (msg.get("from_username") == mention):
                                                target_user_id = u
                                                break
                                        if not target_user_id and "entities" in message:
                                            for ent in message["entities"]:
                                                if ent.get("type") == "mention":
                                                    if text[ent["offset"]+1:ent["offset"]+ent["length"]] == mention:
                                                        target_user_id = from_user_id
                                                        break
                                    if not target_user_id:
                                        await send_telegram_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ @{mention}")
                                    else:
                                        sqlite_storage.set_group_user_name(chat_id, target_user_id, name.strip())
                                        await send_telegram_message(chat_id, f"–û–∫, –µ–≥–æ –∑–æ–≤—É—Ç {name.strip()}", None)
                                        logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ù–∞–∑–Ω–∞—á–µ–Ω–æ –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫—É {target_user_id}: {name.strip()}")
                                else:
                                    await send_telegram_message(chat_id, "–§–æ—Ä–º–∞—Ç: @username –ò–º—è", None)
                                continue
                            # –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞ –∏–º—ë–Ω –∞–∫—Ç–∏–≤–µ–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                            if group_names_mode.get(chat_id) == 'active':
                                continue
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        if "text" in message:
                            message_text = message["text"]
                            from_user = message.get("from", {}).get("id", "")
                            message_id = message.get("message_id", 0)
                            ts = message.get("date", int(datetime.now().timestamp()))
                            sqlite_storage.save_group_message(
                                chat_id=chat_id,
                                message_id=message_id,
                                user_id=str(from_user),
                                msg_type="text",
                                content=message_text,
                                timestamp=ts
                            )


                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞
                            is_quote = False
                            quoted_message_id = None
                            if "reply_to_message" in message:
                                reply_to_message = message["reply_to_message"]
                                if reply_to_message.get("from", {}).get("is_bot", False):
                                    is_quote = True
                                    quoted_message_id = reply_to_message.get("message_id")
                                    logger.info(f"üîó –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞: {quoted_message_id}")
                            
                            # –¢—Ä–∏–≥–≥–µ—Ä "–±–æ—Ç"/–æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ò–∫–∞—Ä –ò–∫–∞—Ä—ã—á
                            logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –ò–∫–∞—Ä –ò–∫–∞—Ä—ã—á | quote={is_quote} | text='{message_text[:80]}'")
                            from .group_bot_integration import check_and_handle_bot_trigger
                            bot_triggered = await check_and_handle_bot_trigger(chat_id, message_text, str(from_user), is_quote, quoted_message_id)
                            logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞: {bot_triggered}")
                            if bot_triggered:
                                continue
                            
                            # –¢—Ä–∏–≥–≥–µ—Ä "–ü–ê–ú–Ø–¢–¨" - —ç–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏ –≥—Ä—É–ø–ø—ã
                            from .group_bot_integration import check_and_handle_memory_export_trigger
                            memory_export_triggered = await check_and_handle_memory_export_trigger(chat_id, message_text, str(from_user))
                            if memory_export_triggered:
                                continue
                            
                            # –ù–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä: –µ—Å–ª–∏ –µ—Å—Ç—å '–∫–∞—Ä—Ç–∏–Ω–∫–∞:' (–±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                            from .group_image_trigger import group_image_trigger
                            from .telegram_core import send_telegram_photo
                            image_triggered = await group_image_trigger.try_trigger(chat_id, message_text, send_telegram_photo)
                            if image_triggered:
                                continue
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≥—Ä—É–ø–ø–µ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏
                        elif "photo" in message:
                            logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ + –∫–Ω–æ–ø–∫–∏")
                            from_user = message.get("from", {}).get("id", "")
                            message_id = message.get("message_id", 0)
                            ts = message.get("date", int(datetime.now().timestamp()))
                            
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ —Ñ–æ—Ç–æ
                            sqlite_storage.save_group_message(
                                chat_id=chat_id,
                                message_id=message_id,
                                user_id=str(from_user),
                                msg_type="photo",
                                content="[photo]",
                                timestamp=ts
                            )
                            logger.info(f"[DEBUG] save_pending_photo: chat_id={chat_id}, message_id={message_id}, user_id={from_user}, timestamp={ts}")
                            sqlite_storage.save_pending_photo(
                                chat_id=chat_id,
                                message_id=message_id,
                                user_id=str(from_user),
                                message_dict=message,
                                timestamp=ts
                            )
                            
                            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤—ã–º)
                            try:
                                from .auto_image_recognition import process_image_automatically
                                await process_image_automatically(chat_id, message, download_telegram_file, send_telegram_message)
                                logger.info(f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–æ –¥–ª—è {chat_id}_{message_id}")
                            except Exception as e:
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
                            
                            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
                            await send_photo_recognition_buttons(chat_id, message_id)
                            continue
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º)
                        elif "voice" in message:
                            voice = message["voice"]
                            file_id = voice["file_id"]
                            duration = voice.get("duration", 0)
                            from_user = message.get("from", {}).get("id", "")
                            message_id = message.get("message_id", 0)
                            ts = message.get("date", int(datetime.now().timestamp()))
                            audio_path = await download_telegram_file(file_id)
                            recognized_text = None
                            if audio_path:
                                try:
                                    stt = get_stt_engine()
                                    recognized_text = await stt.process_voice_message(audio_path)
                                except Exception as e:
                                    logger.error(f"–û—à–∏–±–∫–∞ STT –¥–ª—è –≥—Ä—É–ø–ø—ã: {e}")
                                try:
                                    os.remove(audio_path)
                                except:
                                    pass
                            sqlite_storage.save_group_message(
                                chat_id=chat_id,
                                message_id=message_id,
                                user_id=str(from_user),
                                msg_type="voice",
                                content=recognized_text or "[voice]",
                                timestamp=ts
                            )
                            # –ü–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ–≥–æ–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ —Å–º–∞—Ä—Ç-—Ç—Ä–∏–≥–≥–µ—Ä, —á—Ç–æ –∏ —Ç–µ–∫—Å—Ç
                            if recognized_text:
                                try:
                                    from .group_bot_integration import check_and_handle_bot_trigger
                                    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –ò–∫–∞—Ä –ò–∫–∞—Ä—ã—á (VOICE) | text='{recognized_text[:80]}'")
                                    bot_triggered = await check_and_handle_bot_trigger(chat_id, recognized_text, str(from_user), False, None)
                                    logger.info(f"[–ì–†–£–ü–ü–ê {chat_id}] –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ (VOICE): {bot_triggered}")
                                    if bot_triggered:
                                        continue
                                except Exception as e:
                                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ: {e}")
                        continue  # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –≤ –≥—Ä—É–ø–ø—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
                    # === –ö–û–ù–ï–¶ –ì–†–£–ü–ü–û–í–û–ì–û –ß–ê–¢–ê ===

                    # === –ö–û–ù–ï–¶ –ì–†–£–ü–ü–û–í–û–ì–û –ß–ê–¢–ê ===
            
            await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ Telegram polling: {e}")
            await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def start_telegram_polling():
    """–ó–∞–ø—É—Å–∫ Telegram polling."""
    await telegram_polling()