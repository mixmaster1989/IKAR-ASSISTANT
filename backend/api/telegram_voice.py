"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ –¥–≤–∏–∂–∫–∞–º–∏ –≤ Telegram.
"""
from typing import Optional
from voice.tts import TextToSpeech
from voice.stt import SpeechToText
from utils.logger import get_logger

logger = get_logger("chatumba.voice")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–≤–∏–∂–∫–æ–≤
tts_engine: Optional[TextToSpeech] = None
stt_engine: Optional[SpeechToText] = None

def get_tts_engine() -> TextToSpeech:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TTS –¥–≤–∏–∂–∫–∞."""
    global tts_engine
    logger.debug("üîç –ó–∞–ø—Ä–æ—Å TTS –¥–≤–∏–∂–∫–∞")
    if tts_engine is None:
        logger.info("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ TTS –¥–≤–∏–∂–∫–∞")
        tts_engine = TextToSpeech()
        logger.info("‚úÖ TTS –¥–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω")
    else:
        logger.debug("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π TTS –¥–≤–∏–∂–æ–∫")
    return tts_engine

def get_stt_engine() -> SpeechToText:
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä STT –¥–≤–∏–∂–∫–∞."""
    global stt_engine
    logger.debug("üîç –ó–∞–ø—Ä–æ—Å STT –¥–≤–∏–∂–∫–∞")
    if stt_engine is None:
        logger.info("üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ STT –¥–≤–∏–∂–∫–∞")
        stt_engine = SpeechToText()
        logger.info("‚úÖ STT –¥–≤–∏–∂–æ–∫ —Å–æ–∑–¥–∞–Ω")
    else:
        logger.debug("üîÑ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π STT –¥–≤–∏–∂–æ–∫")
    return stt_engine

def clear_voice_engines():
    """–û—á–∏—â–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –¥–≤–∏–∂–∫–∏."""
    global tts_engine, stt_engine
    logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –¥–≤–∏–∂–∫–æ–≤")
    tts_engine = None
    stt_engine = None