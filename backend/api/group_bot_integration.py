#!/usr/bin/env python3
"""
üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ "–±–æ—Ç" –≤ —Å–∏—Å—Ç–µ–º—É Telegram
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–º–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É polling
"""

import logging
from typing import Optional

logger = logging.getLogger("chatumba.group_bot_integration")

async def handle_bot_trigger_in_group(chat_id: str, message_text: str, user_id: str, 
                                     is_quote: bool = False, quoted_message_id: int = None, 
                                     is_mention: bool = False) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä "–±–æ—Ç" –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ (–æ–±—ã—á–Ω—ã–π, —á–µ—Ä–µ–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ @username)
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_quote: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        quoted_message_id: ID —Ü–∏—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        is_mention: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ @username
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –∏ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    """
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–º—è—Ç—å—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        from .telegram_memory_integration import get_telegram_memory_integration
        integration = get_telegram_memory_integration()
        
        if not integration.initialized:
            await integration.initialize()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä
        response = await integration.handle_smart_bot_trigger(chat_id, message_text, user_id, is_quote, quoted_message_id, is_mention)
        
        if response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ñ–ª–∞–≥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if response == "CONFIRMATION_SENT":
                logger.info(f"üîî –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id}")
                return True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
            from .telegram_core import send_telegram_message
            message_id = await send_telegram_message(
                chat_id, 
                response, 
                save_dialogue=True, 
                user_message=message_text, 
                user_id=user_id
            )
            logger.info(f"ü§ñ –£–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä '–±–æ—Ç' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —á–∞—Ç–µ {chat_id} ({'—Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ' if is_quote else '–æ–±—ã—á–Ω—ã–π'}) | ID: {message_id}")
            return True
            
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–º–Ω–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ '–±–æ—Ç': {e}")
        return False

async def check_and_handle_bot_trigger(chat_id: str, message_text: str, user_id: str, 
                                      is_quote: bool = False, quoted_message_id: int = None, 
                                      is_mention: bool = False, group_names_mode: dict = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä "–±–æ—Ç" –≤ –ª—é–±–æ–π –≥—Ä—É–ø–ø–µ (–æ–±—ã—á–Ω—ã–π, —á–µ—Ä–µ–∑ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ @username)
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_quote: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        quoted_message_id: ID —Ü–∏—Ç–∏—Ä—É–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        is_mention: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º —á–µ—Ä–µ–∑ @username
        group_names_mode: –°–ª–æ–≤–∞—Ä—å —Ä–µ–∂–∏–º–æ–≤ –≥—Ä—É–ø–ø (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –∏ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    """
    # –£–º–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä "–±–æ—Ç" —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ, –≥–¥–µ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    return await handle_bot_trigger_in_group(chat_id, message_text, user_id, is_quote, quoted_message_id, is_mention)

async def handle_memory_export_trigger_in_group(chat_id: str, message_text: str, user_id: str) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ "–ü–ê–ú–Ø–¢–¨" –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –∏ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    """
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏
        from .memory_export_trigger import process_memory_export_trigger
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏
        response = await process_memory_export_trigger(chat_id, message_text, user_id)
        
        if response:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —Ñ–ª–∞–≥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if response == "CONFIRMATION_SENT":
                logger.info(f"üîî –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id}")
                return True
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
            from .telegram_core import send_telegram_message
            message_id = await send_telegram_message(chat_id, response)
            logger.info(f"üìÅ –¢—Ä–∏–≥–≥–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ '–ü–ê–ú–Ø–¢–¨' –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ —á–∞—Ç–µ {chat_id} | ID: {message_id}")
            return True
            
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ '–ü–ê–ú–Ø–¢–¨': {e}")
        return False

async def check_and_handle_memory_export_trigger(chat_id: str, message_text: str, user_id: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ "–ü–ê–ú–Ø–¢–¨" –≤ –ª—é–±–æ–π –≥—Ä—É–ø–ø–µ
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        bool: True –µ—Å–ª–∏ —Ç—Ä–∏–≥–≥–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª –∏ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω
    """
    # –¢—Ä–∏–≥–≥–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ, –≥–¥–µ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω
    # –°–æ–∑–¥–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —á–∞–Ω–∫–∞–º–∏ –ø–∞–º—è—Ç–∏ –≥—Ä—É–ø–ø—ã
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä
    return await handle_memory_export_trigger_in_group(chat_id, message_text, user_id) 