"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ-–¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å BingX, CoinGecko, Binance –∏ –¥—Ä—É–≥–∏—Ö API.
"""
import logging
import aiohttp
import json
from datetime import datetime
from typing import Dict, List, Any, Optional

logger = logging.getLogger("chatumba.crypto.data_fetcher")

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç BingX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
from utils.import_helper import get_bingx_client, get_crypto_integration


async def fetch_bingx_market_data(trading_pair: str) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å BingX.
    
    Args:
        trading_pair: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC-USDT)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    try:
        bingx_client = get_bingx_client()
        if not bingx_client:
            return {"error": "BingX –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        ticker = bingx_client.get_ticker_24hr(trading_pair)
        order_book = bingx_client.get_order_book(trading_pair, limit=50)
        recent_trades = bingx_client.get_recent_trades(trading_pair, limit=100)
        klines_1h = bingx_client.get_klines(trading_pair, interval='1h', limit=24)
        klines_4h = bingx_client.get_klines(trading_pair, interval='4h', limit=30)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
        sentiment = bingx_client.analyze_market_sentiment(trading_pair, '1h')
        
        market_data = {
            'symbol': trading_pair,
            'timestamp': int(datetime.now().timestamp() * 1000),
            'ticker': ticker,
            'order_book': order_book,
            'recent_trades': recent_trades,
            'klines_1h': klines_1h,
            'klines_4h': klines_4h,
            'sentiment': sentiment
        }
        
        logger.info(f"[BINGX] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è {trading_pair}")
        return market_data
        
    except Exception as e:
        logger.error(f"[BINGX] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {"error": str(e)}


def format_bingx_data_for_prompts(bingx_data: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ BingX –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤.
    """
    if not bingx_data or "error" in bingx_data:
        return "‚ùå –î–∞–Ω–Ω—ã–µ BingX –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
    
    formatted = f"üìä **–î–ê–ù–ù–´–ï BINGX:**\n\n"
    
    # –¢–∏–∫–µ—Ä
    if "ticker" in bingx_data and bingx_data["ticker"]:
        ticker_data = bingx_data["ticker"].get("data", {})
        if ticker_data and isinstance(ticker_data, dict):
            formatted += f"üí∞ **–¢–ò–ö–ï–†:**\n"
            formatted += f"‚Ä¢ –¶–µ–Ω–∞: ${ticker_data.get('lastPrice', 'N/A')}\n"
            formatted += f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ 24—á: {ticker_data.get('priceChangePercent', 'N/A')}%\n"
            formatted += f"‚Ä¢ –û–±—ä–µ–º 24—á: {ticker_data.get('volume', 'N/A')}\n"
            formatted += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 24—á: ${ticker_data.get('highPrice', 'N/A')}\n"
            formatted += f"‚Ä¢ –ú–∏–Ω–∏–º—É–º 24—á: ${ticker_data.get('lowPrice', 'N/A')}\n\n"
    
    # –°—Ç–∞–∫–∞–Ω –∑–∞—è–≤–æ–∫
    if "order_book" in bingx_data and bingx_data["order_book"]:
        order_book_data = bingx_data["order_book"].get("data", {})
        if order_book_data and isinstance(order_book_data, dict):
            bids = order_book_data.get("bids", [])
            asks = order_book_data.get("asks", [])
            
            formatted += f"üìã **–°–¢–ê–ö–ê–ù –ó–ê–Ø–í–û–ö:**\n"
            if bids:
                formatted += f"‚Ä¢ –õ—É—á—à–∞—è –ø–æ–∫—É–ø–∫–∞: ${bids[0][0]} ({bids[0][1]})\n"
            if asks:
                formatted += f"‚Ä¢ –õ—É—á—à–∞—è –ø—Ä–æ–¥–∞–∂–∞: ${asks[0][0]} ({asks[0][1]})\n"
            
            # –ì–ª—É–±–∏–Ω–∞ —Ä—ã–Ω–∫–∞
            bid_depth = sum(float(bid[1]) for bid in bids[:5]) if bids else 0
            ask_depth = sum(float(ask[1]) for ask in asks[:5]) if asks else 0
            formatted += f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –ø–æ–∫—É–ø–æ–∫ (—Ç–æ–ø-5): {bid_depth:.2f}\n"
            formatted += f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –ø—Ä–æ–¥–∞–∂ (—Ç–æ–ø-5): {ask_depth:.2f}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    if "recent_trades" in bingx_data and bingx_data["recent_trades"]:
        trades_data = bingx_data["recent_trades"].get("data", [])
        if trades_data and isinstance(trades_data, list) and len(trades_data) > 0:
            formatted += f"üîÑ **–ü–û–°–õ–ï–î–ù–ò–ï –°–î–ï–õ–ö–ò:**\n"
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–¥–µ–ª–æ–∫
            for i, trade in enumerate(trades_data[:5]):
                price = trade.get("price", "N/A")
                qty = trade.get("qty", "N/A")
                side = "üü¢" if trade.get("isBuyerMaker") else "üî¥"
                formatted += f"‚Ä¢ {side} ${price} ({qty})\n"
            formatted += "\n"
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
    if "sentiment" in bingx_data and bingx_data["sentiment"]:
        sentiment_data = bingx_data["sentiment"]
        formatted += f"üé≠ **–ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–ô:**\n"
        formatted += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {sentiment_data.get('sentiment', 'N/A')}\n"
        formatted += f"‚Ä¢ –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: {sentiment_data.get('strength', 'N/A')}\n\n"
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if "comprehensive_analysis" in bingx_data and bingx_data["comprehensive_analysis"]:
        comp_data = bingx_data["comprehensive_analysis"]
        if "analysis" in comp_data:
            analysis = comp_data["analysis"]
            formatted += f"üîç **–ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n"
            formatted += f"‚Ä¢ –õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: {analysis.get('liquidity_score', 'N/A')}\n"
            formatted += f"‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: {analysis.get('volatility_score', 'N/A')}%\n"
            formatted += f"‚Ä¢ –°–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞: {analysis.get('trend_strength', 'N/A')}\n"
            
            # –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è
            support_resistance = analysis.get("support_resistance", {})
            if support_resistance:
                formatted += f"‚Ä¢ –ë–ª–∏–∂–∞–π—à–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: ${support_resistance.get('nearest_support', 'N/A')}\n"
                formatted += f"‚Ä¢ –ë–ª–∏–∂–∞–π—à–µ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: ${support_resistance.get('nearest_resistance', 'N/A')}\n"
            formatted += "\n"
    
    formatted += f"‚è∞ –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è: {bingx_data.get('timestamp', 'N/A')}\n"
    formatted += f"üì° –ò—Å—Ç–æ—á–Ω–∏–∫: {' + '.join(bingx_data.get('data_sources', ['BingX API']))}\n"
    
    return formatted


async def fetch_ultimate_crypto_data(crypto_terms: List[str]) -> str:
    """
    –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
    
    Args:
        crypto_terms: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω–æ–≤
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ù–∞—á–∏–Ω–∞—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {crypto_terms[:3]}")
    
    ultimate_data = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–Ω–µ—Ç—É –∏–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤
    main_coin = None
    coin_mapping = {
        'bitcoin': 'bitcoin', 'btc': 'bitcoin',
        'ethereum': 'ethereum', 'eth': 'ethereum', 
        'pepe': 'pepe', '–ø–µ–ø–µ': 'pepe',
        'usdt': 'tether', 'tether': 'tether',
        'bnb': 'binancecoin', 'binance': 'binancecoin'
    }
    
    for term in crypto_terms:
        if term.lower() in coin_mapping:
            main_coin = coin_mapping[term.lower()]
            break
    
    if not main_coin:
        main_coin = 'bitcoin'  # Fallback
    
    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {main_coin}")
    
    async with aiohttp.ClientSession() as session:
        
        # 1. –î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï COINGECKO
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ CoinGecko...")
            url = f'https://api.coingecko.com/api/v3/coins/{main_coin}'
            async with session.get(url, timeout=15) as response:
                if response.status == 200:
                    data = await response.json()
                    market_data = data.get('market_data', {})
                    
                    current_price = market_data.get('current_price', {}).get('usd', 0)
                    price_change_24h = market_data.get('price_change_percentage_24h', 0)
                    price_change_7d = market_data.get('price_change_percentage_7d', 0)
                    market_cap = market_data.get('market_cap', {}).get('usd', 0)
                    volume_24h = market_data.get('total_volume', {}).get('usd', 0)
                    
                    ultimate_data.append(f"üí∞ {data.get('name', 'Unknown')} (${current_price:.6f})")
                    ultimate_data.append(f"üìä 24h: {price_change_24h:.2f}% | 7d: {price_change_7d:.2f}%")
                    ultimate_data.append(f"üíé Market Cap: ${market_cap:,.0f}")
                    ultimate_data.append(f"üìà Volume 24h: ${volume_24h:,.0f}")
                    
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] CoinGecko: {current_price} USD, {price_change_24h:.2f}%")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ CoinGecko: {e}")
        
        # 2. FEAR & GREED INDEX
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é Fear & Greed Index...")
            async with session.get('https://api.alternative.me/fng/', timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    fng_data = data.get('data', [{}])[0]
                    fng_value = fng_data.get('value', 'N/A')
                    fng_classification = fng_data.get('value_classification', 'Unknown')
                    
                    ultimate_data.append(f"üò± Fear & Greed: {fng_value} ({fng_classification})")
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] F&G Index: {fng_value} - {fng_classification}")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ F&G Index: {e}")
        
        # 3. BINANCE TICKER DATA
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ Binance...")
            symbol = f"{main_coin.upper()}USDT" if main_coin != 'tether' else 'BTCUSDT'
            if main_coin == 'pepe':
                symbol = 'PEPEUSDT'
            elif main_coin == 'ethereum':
                symbol = 'ETHUSDT'
            
            url = f'https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}'
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    price = float(data.get('lastPrice', 0))
                    change_percent = float(data.get('priceChangePercent', 0))
                    volume = float(data.get('volume', 0))
                    high_24h = float(data.get('highPrice', 0))
                    low_24h = float(data.get('lowPrice', 0))
                    
                    ultimate_data.append(f"üî• Binance: ${price:.6f} ({change_percent:+.2f}%)")
                    ultimate_data.append(f"üìä 24h High: ${high_24h:.6f} | Low: ${low_24h:.6f}")
                    ultimate_data.append(f"üíπ Volume: {volume:,.0f}")
                    
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] Binance: {price} USD, {change_percent}%")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ Binance: {e}")
    
    if not ultimate_data:
        ultimate_data = ["üìä –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]
        logger.warning("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    
    result = "\n".join(ultimate_data)
    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –°–æ–±—Ä–∞–Ω–æ {len(ultimate_data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    return result


async def fetch_macro_economic_data() -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    """
    logger.info("[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    macro_data = []
    current_date = datetime.now().strftime("%d.%m.%Y")
    current_year = datetime.now().year
    
    macro_data.append(f"üìÖ –¢–ï–ö–£–©–ê–Ø –î–ê–¢–ê: {current_date} ({current_year} –≥–æ–¥)")
    
    async with aiohttp.ClientSession() as session:
        
        # 1. Fear & Greed Index
        try:
            logger.info("[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é Fear & Greed Index...")
            async with session.get('https://api.alternative.me/fng/', timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    fng_data = data.get('data', [{}])[0]
                    fng_value = fng_data.get('value', 'N/A')
                    fng_classification = fng_data.get('value_classification', 'Unknown')
                    fng_date = fng_data.get('timestamp', '')
                    
                    macro_data.append(f"üò± Fear & Greed Index: {fng_value}/100 ({fng_classification})")
                    if fng_date:
                        fng_readable = datetime.fromtimestamp(int(fng_date)).strftime('%d.%m.%Y')
                        macro_data.append(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ: {fng_readable}")
        except Exception as e:
            logger.error(f"[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ F&G Index: {e}")
        
        # 2. Bitcoin –¥–∞–Ω–Ω—ã–µ
        try:
            logger.info("[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ Bitcoin...")
            async with session.get('https://api.coingecko.com/api/v3/coins/bitcoin', timeout=15) as response:
                if response.status == 200:
                    data = await response.json()
                    market_data = data.get('market_data', {})
                    
                    current_price = market_data.get('current_price', {}).get('usd', 0)
                    ath_price = market_data.get('ath', {}).get('usd', 0)
                    ath_date = market_data.get('ath_date', {}).get('usd', '')
                    
                    if ath_price > 0:
                        ath_distance = ((current_price - ath_price) / ath_price) * 100
                        macro_data.append(f"üèîÔ∏è Bitcoin ATH: ${ath_price:,.0f} ({ath_distance:+.1f}% –æ—Ç ATH)")
                    
                    if ath_date:
                        ath_readable = datetime.fromisoformat(ath_date.replace('Z', '+00:00')).strftime('%d.%m.%Y')
                        macro_data.append(f"üìà ATH –¥–æ—Å—Ç–∏–≥–Ω—É—Ç: {ath_readable}")
                    
                    # –ê–Ω–∞–ª–∏–∑ —Ö–∞–ª–≤–∏–Ω–≥–∞
                    last_halving = datetime(2024, 4, 20)
                    next_halving = datetime(2028, 4, 20)
                    days_since_halving = (datetime.now() - last_halving).days
                    days_to_halving = (next_halving - datetime.now()).days
                    
                    macro_data.append(f"‚ö° –î–Ω–µ–π —Å —Ö–∞–ª–≤–∏–Ω–≥–∞ 2024: {days_since_halving}")
                    macro_data.append(f"‚è≥ –î–Ω–µ–π –¥–æ —Ö–∞–ª–≤–∏–Ω–≥–∞ 2028: {days_to_halving}")
                    
        except Exception as e:
            logger.error(f"[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ Bitcoin –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # 3. –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            logger.info("[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            async with session.get('https://api.coingecko.com/api/v3/global', timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    global_data = data.get('data', {})
                    
                    total_market_cap = global_data.get('total_market_cap', {}).get('usd', 0)
                    btc_dominance = global_data.get('market_cap_percentage', {}).get('btc', 0)
                    eth_dominance = global_data.get('market_cap_percentage', {}).get('eth', 0)
                    active_cryptos = global_data.get('active_cryptocurrencies', 0)
                    
                    macro_data.append(f"üåç –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞: ${total_market_cap:,.0f}")
                    macro_data.append(f"üëë –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: {btc_dominance:.1f}% | ETH: {eth_dominance:.1f}%")
                    macro_data.append(f"ü™ô –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: {active_cryptos:,}")
                    
                    # –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∞—Ü–∏–∏
                    if btc_dominance > 50:
                        macro_data.append(f"üìä –§–∞–∑–∞ —Ä—ã–Ω–∫–∞: Bitcoin Season (–¥–æ–º–∏–Ω–∞—Ü–∏—è {btc_dominance:.1f}%)")
                    elif btc_dominance < 40:
                        macro_data.append(f"üöÄ –§–∞–∑–∞ —Ä—ã–Ω–∫–∞: Alt Season (–¥–æ–º–∏–Ω–∞—Ü–∏—è BTC {btc_dominance:.1f}%)")
                    else:
                        macro_data.append(f"‚öñÔ∏è –§–∞–∑–∞ —Ä—ã–Ω–∫–∞: –ü–µ—Ä–µ—Ö–æ–¥–Ω–∞—è (–¥–æ–º–∏–Ω–∞—Ü–∏—è BTC {btc_dominance:.1f}%)")
        except Exception as e:
            logger.error(f"[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        # 4. –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            logger.info("[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...")
            macro_data.append(f"üèõÔ∏è –ò–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç {current_year}:")
            macro_data.append(f"‚Ä¢ Bitcoin ETF –æ–¥–æ–±—Ä–µ–Ω—ã –≤ –°–®–ê (—è–Ω–≤–∞—Ä—å 2024)")
            macro_data.append(f"‚Ä¢ Ethereum ETF –æ–¥–æ–±—Ä–µ–Ω—ã –≤ –°–®–ê (–∏—é–ª—å 2024)")
            macro_data.append(f"‚Ä¢ MicroStrategy –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ BTC")
            macro_data.append(f"‚Ä¢ –†–∞—Å—Ç—É—â–µ–µ –ø—Ä–∏–Ω—è—Ç–∏–µ –∫–æ—Ä–ø–æ—Ä–∞—Ü–∏—è–º–∏")
        except Exception as e:
            logger.error(f"[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    if not macro_data:
        macro_data = [f"üìä –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã ({current_date})"]
    
    result = "\n".join(macro_data)
    logger.info(f"[–ú–ê–ö–†–û–î–ê–ù–ù–´–ï] –°–æ–±—Ä–∞–Ω–æ {len(macro_data)} —Å—Ç—Ä–æ–∫ –º–∞–∫—Ä–æ–¥–∞–Ω–Ω—ã—Ö")
    return result


async def fetch_crypto_news(crypto_terms: List[str]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.
    
    Args:
        crypto_terms: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω–æ–≤
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    """
    logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤: {crypto_terms[:5]}")
    
    try:
        news_data = []
        
        async with aiohttp.ClientSession() as session:
            # CoinGecko trending
            try:
                logger.info("[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã —Å CoinGecko...")
                async with session.get('https://api.coingecko.com/api/v3/search/trending', timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        trending = data.get('coins', [])
                        logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ü–æ–ª—É—á–µ–Ω–æ {len(trending)} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç")
                        for coin in trending[:5]:
                            coin_data = coin.get('item', {})
                            coin_name = coin_data.get('name', 'Unknown')
                            coin_symbol = coin_data.get('symbol', 'N/A')
                            news_data.append(f"üìà Trending: {coin_name} ({coin_symbol})")
            except Exception as e:
                logger.error(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç: {e}")
            
            # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            try:
                logger.info("[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞...")
                async with session.get('https://api.coingecko.com/api/v3/global', timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        global_data = data.get('data', {})
                        market_cap = global_data.get('total_market_cap', {}).get('usd', 0)
                        btc_dominance = global_data.get('market_cap_percentage', {}).get('btc', 0)
                        news_data.append(f"üí∞ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap:,.0f}")
                        news_data.append(f"‚Çø –î–æ–º–∏–Ω–∞—Ü–∏—è Bitcoin: {btc_dominance:.1f}%")
            except Exception as e:
                logger.error(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        if not news_data:
            news_data = ["üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
        
        result = "\n".join(news_data)
        logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(news_data)} —Å—Ç—Ä–æ–∫)")
        return result
        
    except Exception as e:
        logger.error(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "üìä –ù–æ–≤–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"


async def validate_price_from_apis(trading_pair: str, chart_price: float) -> tuple:
    """
    –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ API.
    
    Args:
        trading_pair: –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
        chart_price: –¶–µ–Ω–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞
        
    Returns:
        Tuple[float, List]: (–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è_—Ü–µ–Ω–∞, —Å–ø–∏—Å–æ–∫_–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
    """
    logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—É {chart_price} –¥–ª—è –ø–∞—Ä—ã {trading_pair}")
    
    validated_prices = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
    pair_mapping = {
        'PEPE/USDT': {'binance': 'PEPEUSDT', 'coingecko': 'pepe'},
        'BTC/USDT': {'binance': 'BTCUSDT', 'coingecko': 'bitcoin'},
        'ETH/USDT': {'binance': 'ETHUSDT', 'coingecko': 'ethereum'},
        'BNB/USDT': {'binance': 'BNBUSDT', 'coingecko': 'binancecoin'}
    }
    
    pair_info = pair_mapping.get(trading_pair.upper())
    if not pair_info:
        logger.warning(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞—Ä–∞: {trading_pair}")
        return chart_price, []
    
    async with aiohttp.ClientSession() as session:
        
        # 1. Binance API
        try:
            binance_symbol = pair_info['binance']
            url = f'https://api.binance.com/api/v3/ticker/price?symbol={binance_symbol}'
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    binance_price = float(data.get('price', 0))
                    validated_prices.append(('Binance', binance_price))
                    logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] Binance: {binance_price}")
        except Exception as e:
            logger.error(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –û—à–∏–±–∫–∞ Binance: {e}")
        
        # 2. CoinGecko API
        try:
            coingecko_id = pair_info['coingecko']
            url = f'https://api.coingecko.com/api/v3/simple/price?ids={coingecko_id}&vs_currencies=usd'
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    coingecko_price = data.get(coingecko_id, {}).get('usd', 0)
                    if coingecko_price:
                        validated_prices.append(('CoinGecko', coingecko_price))
                        logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] CoinGecko: {coingecko_price}")
        except Exception as e:
            logger.error(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –û—à–∏–±–∫–∞ CoinGecko: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if validated_prices:
        avg_price = sum(price for _, price in validated_prices) / len(validated_prices)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞
        if chart_price and chart_price > 0:
            deviation = abs(chart_price - avg_price) / avg_price * 100
            logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ì—Ä–∞—Ñ–∏–∫: {chart_price}, –°—Ä–µ–¥–Ω–µ–µ API: {avg_price:.8f}, –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}%")
            
            if deviation > 10:  # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10%
                logger.warning(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ë–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ API")
                return avg_price, validated_prices
        
        return chart_price or avg_price, validated_prices
    
    return chart_price, []

