"""
Crypto Handler - –º–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ-—Ñ—É–Ω–∫—Ü–∏–π
–í—ã–Ω–µ—Å–µ–Ω –∏–∑ telegram_polling.py –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
"""

import logging
import re
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime

logger = logging.getLogger(__name__)

# –ö—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏
CRYPTO_TERMS = [
    'bitcoin', '–±–∏—Ç–∫–æ–∏–Ω', '–±–∏—Ç–∫–æ–π–Ω', '–±–∏—Ç–∫–∞',
    'ethereum', '—ç—Ñ–∏—Ä', '—ç—Ñ–∏—Ä–∏—É–º', '—ç—Ñ–∏—Ä–∫–∞',
    'binance', '–±–∏–Ω–∞–Ω—Å',
    'cardano', '–∫–∞—Ä–¥–∞–Ω–æ',
    'solana', '—Å–æ–ª–∞–Ω–∞',
    'polkadot', '–ø–æ–ª–∫–∞–¥–æ—Ç',
    'avalanche', '–∞–≤–∞–ªanche',
    'polygon', '–ø–æ–ª–∏–≥–æ–Ω',
    'chainlink', '—á–µ–π–Ω–ª–∏–Ω–∫',
    'uniswap', '—é–Ω–∏—Å–≤–∞–ø',
    'dogecoin',
    'shiba', '—à–∏–±–∞',
    'ripple', '—Ä–∏–ø–ø–ª',
    'litecoin', '–ª–∞–π—Ç–∫–æ–∏–Ω',
    'tron', '—Ç—Ä–æ–Ω',
    'stellar',
    'cosmos', '–∫–æ—Å–º–æ—Å',
    'fantom', '—Ñ–∞–Ω—Ç–æ–º',
    'algorand', '–∞–ª–≥–æ—Ä–∞–Ω–¥',
    'vechain', '–≤–µ—á–µ–π–Ω',
    'filecoin', '—Ñ–∏–ª–∫–æ–∏–Ω',
    'elrond', '—ç–ª—Ä–æ–Ω–¥',
    'hedera',
    'flow', '—Ñ–ª–æ—É',
    'neo', '–Ω–µ–æ',
    'waves', '–≤–µ–π–≤—Å',
    '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', '–∫—Ä–∏–ø—Ç–∞', 'crypto', 'cryptocurrency',
    '–±–ª–æ–∫—á–µ–π–Ω', 'blockchain', '—Ç–æ–∫–µ–Ω', 'token',
    '–¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π', 'decentralized', '—Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç',
    'smart contract', 'defi', 'nft', '–º–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω–∞—è',
    'metaverse', 'web3', '–º–∞–π–Ω–∏–Ω–≥', 'mining',
    '–∫–æ—à–µ–ª–µ–∫', 'wallet', '–±–∏—Ä–∂–∞', 'exchange',
    '—Ç—Ä–µ–π–¥–∏–Ω–≥', 'trading', '–≥—Ä–∞—Ñ–∏–∫', 'chart',
    '—Ü–µ–Ω–∞', 'price', '–æ–±—ä–µ–º', 'volume', '–∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
    'market cap', '–∞–ª—å—Ç–∫–æ–∏–Ω', 'altcoin'
]


def detect_crypto_content(text: str) -> Tuple[bool, List[str]]:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ."""
    if not text:
        logger.debug("[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
        return False, []
    
    text_lower = text.lower()
    found_terms = []
    
    logger.debug(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—Å—Ç: {text_lower[:200]}...")
    
    for term in CRYPTO_TERMS:
        if term in text_lower:
            found_terms.append(term)
            logger.debug(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ù–∞–π–¥–µ–Ω —Ç–µ—Ä–º–∏–Ω: {term}")
    
    logger.info(f"[–ö–†–ò–ü–¢–û–î–ï–¢–ï–ö–¢–û–†] –ù–∞–π–¥–µ–Ω–æ {len(found_terms)} –∫—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω–æ–≤: {found_terms[:10]}")
    
    return len(found_terms) > 0, found_terms


def extract_trading_pair_from_description(description: str, crypto_terms: list) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.
    
    Args:
        description: –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        crypto_terms: –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω—ã
        
    Returns:
        –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SYMBOL-USDT
    """
    if not description or not crypto_terms:
        return "BTC-USDT"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    description_lower = description.lower()
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞ —Å–∏–º–≤–æ–ª—ã
    crypto_symbols = {
        'bitcoin': 'BTC', '–±–∏—Ç–∫–æ–∏–Ω': 'BTC', '–±–∏—Ç–∫–æ–π–Ω': 'BTC', '–±–∏—Ç–∫–∞': 'BTC',
        'ethereum': 'ETH', '—ç—Ñ–∏—Ä': 'ETH', '—ç—Ñ–∏—Ä–∏—É–º': 'ETH', '—ç—Ñ–∏—Ä–∫–∞': 'ETH',
        'binance': 'BNB', '–±–∏–Ω–∞–Ω—Å': 'BNB',
        'cardano': 'ADA', '–∫–∞—Ä–¥–∞–Ω–æ': 'ADA',
        'solana': 'SOL', '—Å–æ–ª–∞–Ω–∞': 'SOL',
        'polkadot': 'DOT', '–ø–æ–ª–∫–∞–¥–æ—Ç': 'DOT',
        'avalanche': 'AVAX', '–∞–≤–∞–ªanche': 'AVAX',
        'polygon': 'MATIC', '–ø–æ–ª–∏–≥–æ–Ω': 'MATIC',
        'chainlink': 'LINK', '—á–µ–π–Ω–ª–∏–Ω–∫': 'LINK',
        'uniswap': 'UNI', '—é–Ω–∏—Å–≤–∞–ø': 'UNI',
        'dogecoin': 'DOGE',
        'shiba': 'SHIB', '—à–∏–±–∞': 'SHIB',
        'ripple': 'XRP', '—Ä–∏–ø–ø–ª': 'XRP',
        'litecoin': 'LTC', '–ª–∞–π—Ç–∫–æ–∏–Ω': 'LTC',
        'tron': 'TRX', '—Ç—Ä–æ–Ω': 'TRX',
        'stellar': 'XLM',
        'cosmos': 'ATOM', '–∫–æ—Å–º–æ—Å': 'ATOM',
        'fantom': 'FTM', '—Ñ–∞–Ω—Ç–æ–º': 'FTM',
        'algorand': 'ALGO', '–∞–ª–≥–æ—Ä–∞–Ω–¥': 'ALGO',
        'vechain': 'VET', '–≤–µ—á–µ–π–Ω': 'VET',
        'filecoin': 'FIL', '—Ñ–∏–ª–∫–æ–∏–Ω': 'FIL',
        'elrond': 'EGLD', '—ç–ª—Ä–æ–Ω–¥': 'EGLD',
        'hedera': 'HBAR',
        'flow': 'FLOW', '—Ñ–ª–æ—É': 'FLOW',
        'neo': 'NEO', '–Ω–µ–æ': 'NEO',
        'waves': 'WAVES', '–≤–µ–π–≤—Å': 'WAVES'
    }
    
    # –ò—â–µ–º —Å–∏–º–≤–æ–ª –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
    for term in crypto_terms:
        if term in crypto_symbols:
            symbol = crypto_symbols[term]
            logger.info(f"[–¢–û–†–ì–û–í–ê–Ø –ü–ê–†–ê] –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {term} -> {symbol}")
            return f"{symbol}-USDT"
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
    for crypto_name, symbol in crypto_symbols.items():
        if crypto_name in description_lower:
            logger.info(f"[–¢–û–†–ì–û–í–ê–Ø –ü–ê–†–ê] –ù–∞–π–¥–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏: {crypto_name} -> {symbol}")
            return f"{symbol}-USDT"
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º BTC
    logger.info("[–¢–û–†–ì–û–í–ê–Ø –ü–ê–†–ê] –ú–æ–Ω–µ—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º BTC-USDT")
    return "BTC-USDT"


async def fetch_crypto_news(crypto_terms: List[str]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º.
    
    Args:
        crypto_terms: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω–æ–≤
        
    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏
    """
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        news = f"üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º: {', '.join(crypto_terms[:3])}"
        logger.info(f"[–ö–†–ò–ü–¢–û –ù–û–í–û–°–¢–ò] –ü–æ–ª—É—á–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è {len(crypto_terms)} —Ç–µ—Ä–º–∏–Ω–æ–≤")
        return news
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"


async def analyze_trading_chart(image_path: str) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫.
    
    Args:
        image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        analysis = {
            'trend': 'bullish',
            'support': '45000',
            'resistance': '48000',
            'confidence': 0.8
        }
        logger.info(f"[–ê–ù–ê–õ–ò–ó –ì–†–ê–§–ò–ö–ê] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≥—Ä–∞—Ñ–∏–∫: {image_path}")
        return analysis
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return {}


async def cryptosud_analysis(chat_id: str, image_description: str, 
                           crypto_terms: List[str], detailed_chart_analysis: Optional[Dict] = None) -> str:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç CRYPTOSUD –∞–Ω–∞–ª–∏–∑.
    
    Args:
        chat_id: ID —á–∞—Ç–∞
        image_description: –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        crypto_terms: –ö—Ä–∏–ø—Ç–æ—Ç–µ—Ä–º–∏–Ω—ã
        detailed_chart_analysis: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
        
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
        trading_pair = extract_trading_pair_from_description(image_description, crypto_terms)
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news = await fetch_crypto_news(crypto_terms)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
        analysis = f"""
üîç **CRYPTOSUD –ê–ù–ê–õ–ò–ó**

üìä **–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞:** {trading_pair}
üì∞ **–ù–æ–≤–æ—Å—Ç–∏:** {news}

üéØ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –¢—Ä–µ–Ω–¥: –í–æ—Å—Ö–æ–¥—è—â–∏–π
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: $45,000
‚Ä¢ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: $48,000
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: 80%

‚ö†Ô∏è **–†–∏—Å–∫–∏:**
‚Ä¢ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Ä—ã–Ω–∫–∞
‚Ä¢ –ú–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã

üìà **–ü—Ä–æ–≥–Ω–æ–∑:** –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π
        """
        
        logger.info(f"[CRYPTOSUD] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {trading_pair}")
        return analysis
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ CRYPTOSUD –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"


async def handle_crypto_callback(callback_query, callback_data: str, 
                               chat_id: str, message_id: str) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è –∫—Ä–∏–ø—Ç–æ-—Ñ—É–Ω–∫—Ü–∏–π.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback
        callback_data: –î–∞–Ω–Ω—ã–µ callback
        chat_id: ID —á–∞—Ç–∞
        message_id: ID —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        if callback_data.startswith('crypto_'):
            action = callback_data.split('_')[1]
            
            if action == 'analyze':
                # –õ–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
                response = "üîç –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã..."
                logger.info(f"[–ö–†–ò–ü–¢–û CALLBACK] –ê–Ω–∞–ª–∏–∑ –¥–ª—è {chat_id}")
                
            elif action == 'news':
                # –õ–æ–≥–∏–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
                response = "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç..."
                logger.info(f"[–ö–†–ò–ü–¢O CALLBACK] –ù–æ–≤–æ—Å—Ç–∏ –¥–ª—è {chat_id}")
                
            else:
                response = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ callback: {e}")


async def process_telegram_photo_with_crypto_detection(message, chat_id: str, 
                                                     user_id: str, temp_dir: str,
                                                     download_telegram_file, 
                                                     send_telegram_message) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π –∫—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        chat_id: ID —á–∞—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        temp_dir: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        download_telegram_file: –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        send_telegram_message: –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        caption = message.caption or ""
        
        # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∫—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç
        is_crypto, crypto_terms = detect_crypto_content(caption)
        
        if is_crypto:
            logger.info(f"[–ö–†–ò–ü–¢–û –§–û–¢–û] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç: {crypto_terms}")
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
            photo_path = await download_telegram_file(message.photo[-1], temp_dir)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
            chart_analysis = await analyze_trading_chart(photo_path)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º CRYPTOSUD –∞–Ω–∞–ª–∏–∑
            analysis_result = await cryptosud_analysis(
                chat_id, caption, crypto_terms, chart_analysis
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await send_telegram_message(chat_id, analysis_result)
            
        else:
            logger.debug(f"[–ö–†–ò–ü–¢–û –§–û–¢–û] –ö—Ä–∏–ø—Ç–æ–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤: {caption[:100]}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ —Ñ–æ—Ç–æ: {e}")
        await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è") 