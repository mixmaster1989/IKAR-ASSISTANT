"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π Telegram.
–í—ã–Ω–µ—Å–µ–Ω –∏–∑ telegram_polling.py –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞.
"""
import logging
import asyncio
from datetime import datetime, timedelta
from backend.config import TELEGRAM_CONFIG
from backend.memory.lazy_memory import get_lazy_memory
from backend.utils.component_manager import get_component_manager
from backend.core.soul import ChatumbaSoul

logger = logging.getLogger("chatumba.group_handler")

async def show_collective_memory(chat_id: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    try:
        lazy_memory = get_lazy_memory()
        component_manager = get_component_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        memory_stats = lazy_memory.get_memory_stats()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = "üß† **–ö–û–õ–õ–ï–ö–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –ß–ê–¢–£–ú–ë–´**\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report += "**üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
        report += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {memory_stats.get('total_messages', 0)}\n"
        report += f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {memory_stats.get('unique_users', 0)}\n"
        report += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {memory_stats.get('active_chats', 0)}\n"
        report += f"‚Ä¢ –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {memory_stats.get('db_size_mb', 0):.2f} –ú–ë\n\n"
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        if 'recent_users' in memory_stats:
            report += "**üë• –ü–û–°–õ–ï–î–ù–ò–ï –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:**\n"
            for user in memory_stats['recent_users'][:10]:
                report += f"‚Ä¢ {user.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {user.get('message_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            report += "\n"
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–º—ã
        if 'popular_topics' in memory_stats:
            report += "**üî• –ü–û–ü–£–õ–Ø–†–ù–´–ï –¢–ï–ú–´:**\n"
            for topic, count in memory_stats['popular_topics'][:10]:
                report += f"‚Ä¢ {topic}: {count} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
            report += "\n"
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if 'activity_by_hour' in memory_stats:
            report += "**‚è∞ –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û –ß–ê–°–ê–ú:**\n"
            for hour, count in memory_stats['activity_by_hour']:
                report += f"‚Ä¢ {hour:02d}:00 - {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            report += "\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
        await send_telegram_message(chat_id, report)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏: {e}")
        await send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.")

async def show_full_chunks_with_buttons(chat_id: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–µ —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
    """
    try:
        lazy_memory = get_lazy_memory()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏
        all_memories = lazy_memory.get_all_memories()
        
        if not all_memories:
            await send_telegram_message(chat_id, "üìù –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞. –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        users_memories = {}
        for memory in all_memories:
            user_id = memory.get('user_id', 'unknown')
            if user_id not in users_memories:
                users_memories[user_id] = []
            users_memories[user_id].append(memory)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        def get_timestamp(chunk):
            return chunk.get('timestamp', datetime.min)
        
        for user_id in users_memories:
            users_memories[user_id].sort(key=get_timestamp, reverse=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üß† **–ü–û–õ–ù–ê–Ø –ö–û–õ–õ–ï–ö–¢–ò–í–ù–ê–Ø –ü–ê–ú–Ø–¢–¨**\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
        recent_memories = []
        for user_memories in users_memories.values():
            recent_memories.extend(user_memories[:5])  # –ë–µ—Ä–µ–º –ø–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        recent_memories.sort(key=get_timestamp, reverse=True)
        recent_memories = recent_memories[:20]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
        for i, memory in enumerate(recent_memories, 1):
            user_id = memory.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            content = memory.get('content', '')
            timestamp = memory.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if len(content) > 100:
                content = content[:100] + "..."
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
            def escape_html(text):
                return text.replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
            
            content = escape_html(content)
            
            message += f"**{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}** ({timestamp})\n"
            message += f"`{content}`\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        delete_row = []
        for i in range(1, min(6, len(recent_memories) + 1)):
            delete_row.append({
                "text": f"üóëÔ∏è {i}",
                "callback_data": f"delete_chunk_{i}"
            })
        keyboard.append(delete_row)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        view_row = []
        for i in range(1, min(6, len(recent_memories) + 1)):
            view_row.append({
                "text": f"üëÅÔ∏è {i}",
                "callback_data": f"view_chunk_{i}"
            })
        keyboard.append(view_row)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        keyboard.append([{
            "text": "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å",
            "callback_data": "clear_all_memory"
        }])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await send_telegram_message_with_buttons(chat_id, message, keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏: {e}")
        await send_telegram_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏.")

async def handle_chunk_deletion(callback_query, callback_data, chat_id, message_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —á–∞–Ω–∫–∞ –ø–∞–º—è—Ç–∏.
    """
    try:
        lazy_memory = get_lazy_memory()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —á–∞–Ω–∫–∞
        chunk_number = int(callback_data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
        all_memories = lazy_memory.get_all_memories()
        
        if chunk_number > len(all_memories):
            await answer_callback_query(callback_query.id, "‚ùå –ß–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        chunk_to_delete = all_memories[chunk_number - 1]
        
        # –£–¥–∞–ª—è–µ–º —á–∞–Ω–∫
        success = lazy_memory.delete_memory(chunk_to_delete.get('id'))
        
        if success:
            await answer_callback_query(callback_query.id, f"‚úÖ –ß–∞–Ω–∫ {chunk_number} —É–¥–∞–ª–µ–Ω.")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await show_full_chunks_with_buttons(chat_id)
        else:
            await answer_callback_query(callback_query.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞–Ω–∫–∞.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–∞–Ω–∫–∞: {e}")
        await answer_callback_query(callback_query.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")

async def handle_chunk_view(callback_query, callback_data, chat_id, message_id):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª–Ω–æ–≥–æ —á–∞–Ω–∫–∞ –ø–∞–º—è—Ç–∏.
    """
    try:
        lazy_memory = get_lazy_memory()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —á–∞–Ω–∫–∞
        chunk_number = int(callback_data.split('_')[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
        all_memories = lazy_memory.get_all_memories()
        
        if chunk_number > len(all_memories):
            await answer_callback_query(callback_query.id, "‚ùå –ß–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        chunk = all_memories[chunk_number - 1]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_id = chunk.get('user_id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        content = chunk.get('content', '')
        timestamp = chunk.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        message_type = chunk.get('message_type', 'text')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        def escape_html(text):
            return text.replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;')
        
        content = escape_html(content)
        
        detail_message = f"üß† **–î–ï–¢–ê–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ß–ê–ù–ö–ê {chunk_number}**\n\n"
        detail_message += f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_id}\n"
        detail_message += f"**–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:** {message_type}\n"
        detail_message += f"**–í—Ä–µ–º—è:** {timestamp}\n\n"
        detail_message += f"**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**\n`{content}`"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [{
                "text": "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–∞–Ω–∫",
                "callback_data": f"delete_chunk_{chunk_number}"
            }],
            [{
                "text": "üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
                "callback_data": "back_to_chunks"
            }]
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_telegram_message_with_buttons(chat_id, detail_message, keyboard)
        await answer_callback_query(callback_query.id, "‚úÖ –î–µ—Ç–∞–ª–∏ —á–∞–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —á–∞–Ω–∫–∞: {e}")
        await answer_callback_query(callback_query.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ.")

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from ..telegram_core import send_telegram_message, send_telegram_message_with_buttons, answer_callback_query 