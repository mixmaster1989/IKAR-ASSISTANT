"""
üîó Memory Integration - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
"""

import asyncio
import logging
from typing import Dict, Any, Optional

from .smart_memory_manager import get_smart_memory_manager
from .night_optimizer import get_night_optimizer
from .smart_retriever import get_smart_retriever

logger = logging.getLogger("chatumba.memory_integration")

class MemoryIntegration:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.memory_manager = None
        self.night_optimizer = None
        self.smart_retriever = None
        self.llm_client = None
        self.initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM –∫–ª–∏–µ–Ω—Ç
            from utils.component_manager import get_component_manager
            component_manager = get_component_manager()
            self.llm_client = component_manager.get_llm_client()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞–º—è—Ç–∏
            self.memory_manager = get_smart_memory_manager()
            self.smart_retriever = get_smart_retriever(self.memory_manager)
            self.night_optimizer = get_night_optimizer(self.memory_manager, self.llm_client)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ—á–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            if self.night_optimizer:
                asyncio.create_task(self.night_optimizer.start_night_optimization())
                logger.info("üåô –ù–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
            
            self.initialized = True
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏: {e}")
            raise
    
    def add_group_message(self, chat_id: str, user_id: str, content: str, timestamp: float = None) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã –≤ —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏"""
        if not self.initialized or not self.memory_manager:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        return self.memory_manager.add_group_message(chat_id, user_id, content, timestamp)
    
    async def get_smart_context_for_bot(self, chat_id: str, query: str, user_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –±–æ—Ç–∞"""
        if not self.initialized:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return {}
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
            time_info = self.memory_manager.get_current_time_info()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂—É—é –∏—Å—Ç–æ—Ä–∏—é
            recent_messages = self.memory_manager.get_recent_messages(chat_id, limit=15)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏
            relevant_chunks = await self.smart_retriever.find_relevant_chunks(chat_id, query)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞
            recent_responses = self.memory_manager.get_recent_bot_responses(chat_id, limit=3)
            
            return {
                'time_info': time_info,
                'recent_messages': recent_messages,
                'relevant_chunks': relevant_chunks,
                'recent_responses': recent_responses,
                'memory_stats': await self.get_memory_stats(chat_id)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return {}
    
    def save_bot_response(self, chat_id: str, response: str, context_hash: str = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞"""
        if not self.initialized or not self.memory_manager:
            return False
        
        return self.memory_manager.add_bot_response(chat_id, response, context_hash)
    
    async def force_optimize_chat(self, chat_id: str) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞"""
        if not self.initialized or not self.night_optimizer:
            return {'status': 'error', 'message': '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'}
        
        return await self.night_optimizer.force_optimize_chat(chat_id)
    
    async def get_memory_stats(self, chat_id: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        if not self.initialized:
            return {}
        
        try:
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            general_stats = self.memory_manager.get_stats()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞
            retriever_stats = {}
            if chat_id and self.smart_retriever:
                retriever_stats = await self.smart_retriever.get_retriever_stats(chat_id)
            
            return {
                'general': general_stats,
                'retriever': retriever_stats,
                'optimizer_running': self.night_optimizer.is_running if self.night_optimizer else False
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def stop_optimization(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ—á–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        if self.night_optimizer:
            self.night_optimizer.stop_night_optimization()
            logger.info("üõë –ù–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
_memory_integration = None

def get_memory_integration() -> MemoryIntegration:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    global _memory_integration
    if _memory_integration is None:
        _memory_integration = MemoryIntegration()
    return _memory_integration

async def initialize_smart_memory_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å—é —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    integration = get_memory_integration()
    await integration.initialize()
    return integration

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
def add_group_message_to_memory(chat_id: str, user_id: str, content: str, timestamp: float = None) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å (—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    integration = get_memory_integration()
    return integration.add_group_message(chat_id, user_id, content, timestamp)

async def get_smart_memory_context(chat_id: str, query: str, user_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏ (—Ñ—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    integration = get_memory_integration()
    return await integration.get_smart_context_for_bot(chat_id, query, user_id)