"""
üöÄ Startup Memory Loader - –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import sqlite3
import asyncio
from typing import List, Dict, Any
from pathlib import Path

logger = logging.getLogger("chatumba.startup_loader")

class StartupMemoryLoader:
    """–ó–∞–≥—Ä—É–∑—á–∏–∫ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.old_db_path = "data/chatumba.db"  # –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏
        self.processed_messages = 0
        self.created_chunks = 0
        self.processed_chats = []
    
    async def load_all_group_messages(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
            group_chats = self._get_all_group_chats()
            
            if not group_chats:
                logger.info("üì≠ –ù–µ—Ç –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(group_chats)} –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞–º—è—Ç–∏
            from memory.smart_memory_manager import get_smart_memory_manager
            from memory.night_optimizer import get_night_optimizer
            from utils.component_manager import get_component_manager
            
            memory_manager = get_smart_memory_manager()
            component_manager = get_component_manager()
            llm_client = component_manager.get_llm_client()
            night_optimizer = get_night_optimizer(memory_manager, llm_client)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
            for chat_id in group_chats:
                await self._process_chat_messages(chat_id, memory_manager, night_optimizer)
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.processed_messages} —Å–æ–æ–±—â–µ–Ω–∏–π, {self.created_chunks} —á–∞–Ω–∫–æ–≤")
            logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {self.processed_chats}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def _get_all_group_chats(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã"""
        try:
            if not Path(self.old_db_path).exists():
                logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.old_db_path}")
                return []
            
            conn = sqlite3.connect(self.old_db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ chat_id –∏–∑ group_history
            cursor.execute("""
                SELECT DISTINCT chat_id 
                FROM group_history 
                WHERE chat_id IS NOT NULL 
                AND chat_id != ''
                ORDER BY chat_id
            """)
            
            chat_ids = [row[0] for row in cursor.fetchall()]
            conn.close()
            
            logger.info(f"üîç –ù–∞–π–¥–µ–Ω—ã –≥—Ä—É–ø–ø—ã: {chat_ids}")
            return chat_ids
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}")
            return []
    
    async def _process_chat_messages(self, chat_id: str, memory_manager, night_optimizer):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            logger.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Ç {chat_id}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã
            messages = self._get_chat_messages(chat_id)
            
            if not messages:
                logger.info(f"üì≠ –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
                return
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
            added_count = 0
            for msg in messages:
                success = memory_manager.add_group_message(
                    chat_id=msg['chat_id'],
                    user_id=msg['user_id'],
                    content=msg['content'],
                    timestamp=msg['timestamp']
                )
                if success:
                    added_count += 1
            
            logger.info(f"üíæ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏")
            self.processed_messages += added_count
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —á–∞–Ω–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            existing_chunks = self._check_existing_chunks(chat_id)
            
            if existing_chunks > 0:
                logger.info(f"‚úÖ –ß–∞—Ç {chat_id} —É–∂–µ –∏–º–µ–µ—Ç {existing_chunks} —á–∞–Ω–∫–æ–≤ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞–Ω–∫–æ–≤–∞–Ω–∏–µ")
            elif added_count > 0:
                logger.info(f"üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —á–∞–Ω–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è {chat_id}...")
                result = await night_optimizer.force_optimize_chat(chat_id)
                
                if result['status'] == 'success':
                    self.created_chunks += 1
                    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —á–∞–Ω–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {result.get('message', '')}")
                else:
                    logger.info(f"‚ÑπÔ∏è –ß–∞–Ω–∫–æ–≤–∞–Ω–∏–µ –¥–ª—è {chat_id}: {result.get('message', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}")
            else:
                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —á–∞–Ω–∫–æ–≤–∞–Ω–∏—è –≤ {chat_id}")
            
            self.processed_chats.append(chat_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ {chat_id}: {e}")
    
    def _get_chat_messages(self, chat_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ –∏–∑ —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã"""
        try:
            conn = sqlite3.connect(self.old_db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ë–ï–ó –î–£–ë–õ–ò–ö–ê–¢–û–í)
            cursor.execute("""
                SELECT DISTINCT chat_id, user_id, content, timestamp, type
                FROM group_history 
                WHERE chat_id = ? 
                AND content IS NOT NULL 
                AND content != ''
                AND content != '[photo]'
                AND content != '[voice]'
                AND type IN ('text', 'voice')
                ORDER BY timestamp ASC
            """, (chat_id,))
            
            messages = []
            for row in cursor.fetchall():
                messages.append({
                    'chat_id': row[0],
                    'user_id': row[1] or 'unknown',
                    'content': row[2],
                    'timestamp': row[3],
                    'type': row[4] or 'text'
                })
            
            conn.close()
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ {chat_id}: {e}")
            return []
    
    def _check_existing_chunks(self, chat_id: str) -> int:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è —á–∞—Ç–∞"""
        try:
            from memory.smart_memory_manager import get_smart_memory_manager
            memory_manager = get_smart_memory_manager()
            
            conn = sqlite3.connect(memory_manager.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT COUNT(*) FROM memory_chunks 
                WHERE chat_id = ?
            """, (chat_id,))
            
            count = cursor.fetchone()[0]
            conn.close()
            
            return count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —á–∞–Ω–∫–æ–≤: {e}")
            return 0
    
    async def get_loading_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏"""
        return {
            'processed_messages': self.processed_messages,
            'created_chunks': self.created_chunks,
            'processed_chats': self.processed_chats,
            'total_chats': len(self.processed_chats)
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞
_startup_loader = None

def get_startup_loader() -> StartupMemoryLoader:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∑–∞–≥—Ä—É–∑—á–∏–∫–∞"""
    global _startup_loader
    if _startup_loader is None:
        _startup_loader = StartupMemoryLoader()
    return _startup_loader

async def initialize_memory_from_existing_groups():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –≥—Ä—É–ø–ø –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    loader = get_startup_loader()
    await loader.load_all_group_messages()
    return loader