"""
üåô Night Optimizer - –ù–æ—á–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–∂–∞—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–º—ã—Å–ª–æ–≤—ã–µ —á–∞–Ω–∫–∏
–†–∞–±–æ—Ç–∞–µ—Ç —Å 23:00 –¥–æ 07:00, –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º –∏ —Å–∂–∏–º–∞–µ—Ç —á–µ—Ä–µ–∑ LLM
"""

import asyncio
import json
import logging
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import asdict
import hashlib

from .smart_memory_manager import SmartMemoryManager, MemoryMessage, MemoryChunk

logger = logging.getLogger("chatumba.night_optimizer")

class NightOptimizer:
    """–ù–æ—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, memory_manager: SmartMemoryManager, llm_client):
        self.memory_manager = memory_manager
        self.llm_client = llm_client
        self.is_running = False
        self.optimization_interval = 1800  # 30 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.min_messages_for_chunk = 5  # –ú–∏–Ω–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞
        self.max_time_gap_hours = 6      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑—Ä—ã–≤ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
        self.chunk_period_hours = 24     # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ (24 —á–∞—Å–∞)
        
    async def start_night_optimization(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ—á–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        self.is_running = True
        logger.info("üåô –ó–∞–ø—É—Å–∫ –Ω–æ—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏")
        
        while self.is_running:
            try:
                is_night = self.memory_manager._is_night_time()
                logger.info(f"üåô –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {is_night}")
                
                if is_night:
                    logger.info("üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è - –û–¢–ö–õ–Æ–ß–ï–ù–û (–∂—Ä–µ—Ç –∫–ª—é—á–∏)")
                    # await self._run_optimization_cycle()  # –û–¢–ö–õ–Æ–ß–ï–ù–û
                else:
                    logger.info("‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
                
                await asyncio.sleep(self.optimization_interval)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–æ—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def stop_night_optimization(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ—á–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é"""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏")
    
    async def _run_optimization_cycle(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –Ω–æ—á–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            unprocessed_messages = await self._get_unprocessed_messages()
            
            if not unprocessed_messages:
                logger.debug("üì≠ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                return
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —á–∞—Ç–∞–º
            messages_by_chat = self._group_messages_by_chat(unprocessed_messages)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç
            for chat_id, messages in messages_by_chat.items():
                await self._optimize_chat_messages(chat_id, messages)
            
            logger.info(f"‚úÖ –¶–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {len(messages_by_chat)}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    
    async def _get_unprocessed_messages(self) -> List[MemoryMessage]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
        try:
            import sqlite3
            import os
            
            conn = sqlite3.connect(self.memory_manager.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º ID –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏–∑ .env
            main_chat_id = os.getenv('TELEGRAM_CHANNEL_ID', '-1002952589195')
            
            # –ë–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞ (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é)
            cutoff_time = time.time() - 3600
            
            cursor.execute("""
                SELECT id, chat_id, user_id, content, timestamp, processed
                FROM group_messages
                WHERE processed = FALSE AND timestamp < ? AND chat_id = ?
                ORDER BY timestamp
            """, (cutoff_time, main_chat_id))
            
            messages = []
            for row in cursor.fetchall():
                messages.append(MemoryMessage(
                    id=row[0],
                    chat_id=row[1],
                    user_id=row[2],
                    content=row[3],
                    timestamp=row[4],
                    processed=bool(row[5])
                ))
            
            conn.close()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã {main_chat_id}")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    def _group_messages_by_chat(self, messages: List[MemoryMessage]) -> Dict[str, List[MemoryMessage]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Ç–∞–º"""
        grouped = {}
        for message in messages:
            if message.chat_id not in grouped:
                grouped[message.chat_id] = []
            grouped[message.chat_id].append(message)
        return grouped
    
    async def _optimize_chat_messages(self, chat_id: str, messages: List[MemoryMessage]):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞"""
        try:
            logger.info(f"üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —á–∞—Ç {chat_id}: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º
            message_groups = self._group_messages_by_time(messages)
            
            # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã (—Å rate limiting)
            processed_groups = 0
            max_groups_per_cycle = 5  # –ú–∞–∫—Å–∏–º—É–º 5 –≥—Ä—É–ø–ø –∑–∞ —Ü–∏–∫–ª
            
            for group in message_groups:
                if processed_groups >= max_groups_per_cycle:
                    logger.info(f"‚è∏Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥—Ä—É–ø–ø –∑–∞ —Ü–∏–∫–ª ({max_groups_per_cycle}), –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è")
                    break
                    
                if len(group) >= self.min_messages_for_chunk:
                    chunk = await self._create_memory_chunk(chat_id, group)
                    if chunk:
                        await self._save_memory_chunk(chunk)
                        await self._mark_messages_processed([msg.id for msg in group])
                        processed_groups += 1
                        
                        # Rate limiting: –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                        await asyncio.sleep(2)
                else:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–∞–ª–æ, –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    await self._mark_messages_processed([msg.id for msg in group])
                    logger.debug(f"‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –∏–∑ {len(group)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞ –¥–ª—è —á–∞–Ω–∫–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
    
    def _group_messages_by_time(self, messages: List[MemoryMessage]) -> List[List[MemoryMessage]]:
        """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–∞–º"""
        if not messages:
            return []
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        sorted_messages = sorted(messages, key=lambda m: m.timestamp)
        
        groups = []
        current_group = [sorted_messages[0]]
        
        for message in sorted_messages[1:]:
            # –ï—Å–ª–∏ —Ä–∞–∑—Ä—ã–≤ –±–æ–ª—å—à–µ max_time_gap_hours, –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
            time_gap = message.timestamp - current_group[-1].timestamp
            if time_gap > (self.max_time_gap_hours * 3600):
                groups.append(current_group)
                current_group = [message]
            else:
                current_group.append(message)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
        if current_group:
            groups.append(current_group)
        
        logger.debug(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {len(groups)} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø —Å–æ–æ–±—â–µ–Ω–∏–π")
        return groups
    
    async def _create_memory_chunk(self, chat_id: str, messages: List[MemoryMessage]) -> Optional[MemoryChunk]:
        """–°–æ–∑–¥–∞–µ—Ç —á–∞–Ω–∫ –ø–∞–º—è—Ç–∏ –∏–∑ –≥—Ä—É–ø–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
            conversation_text = self._format_messages_for_llm(messages)
            participants = list(set(msg.user_id for msg in messages))
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∂–∞—Ç—ã–π —á–∞–Ω–∫ —á–µ—Ä–µ–∑ LLM
            chunk_data = await self._compress_messages_with_llm(conversation_text, participants)
            
            if not chunk_data:
                logger.warning("‚ö†Ô∏è LLM –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫")
                return None
            
            # –°–æ–∑–¥–∞–µ–º —á–∞–Ω–∫
            chunk_id = hashlib.md5(f"{chat_id}_{messages[0].timestamp}_{len(messages)}".encode()).hexdigest()[:16]
            
            chunk = MemoryChunk(
                id=chunk_id,
                chat_id=chat_id,
                topic=chunk_data.get('topic', '–û–±—â–µ–Ω–∏–µ'),
                content=chunk_data.get('summary', ''),
                created_at=time.time(),
                source_period_start=messages[0].timestamp,
                source_period_end=messages[-1].timestamp,
                relevance_base=chunk_data.get('importance', 0.5),
                message_count=len(messages),
                participants=participants
            )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —á–∞–Ω–∫ {chunk_id}: {chunk.topic}")
            return chunk
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞: {e}")
            return None
    
    def _format_messages_for_llm(self, messages: List[MemoryMessage]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM"""
        formatted_lines = []
        
        for msg in messages:
            timestamp_str = datetime.fromtimestamp(msg.timestamp).strftime('%H:%M')
            user_short = msg.user_id[-4:] if len(msg.user_id) > 4 else msg.user_id
            formatted_lines.append(f"[{timestamp_str}] {user_short}: {msg.content}")
        
        return "\n".join(formatted_lines)
    
    async def _compress_messages_with_llm(self, conversation_text: str, participants: List[str]) -> Optional[Dict[str, Any]]:
        """–°–∂–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ LLM"""
        try:
            # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∂–∞—Ç–∏—è
            system_prompt = """–¢—ã - —Å–∏—Å—Ç–µ–º–∞ —Å–∂–∞—Ç–∏—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞.

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û JSON:
{
    "topic": "–ö—Ä–∞—Ç–∫–∞—è —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞",
    "summary": "–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ: –∫—Ç–æ —á—Ç–æ –æ–±—Å—É–∂–¥–∞–ª, –∫–∞–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è–ª–∏, –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏",
    "importance": 0.1-1.0,
    "key_points": ["–∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç 1", "–∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç 2"],
    "participants_activity": {"user1": "—á—Ç–æ –¥–µ–ª–∞–ª", "user2": "—á—Ç–æ –¥–µ–ª–∞–ª"}
}

–ü–†–ê–í–ò–õ–ê:
- –°–æ—Ö—Ä–∞–Ω—è–π –í–°–Æ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
- –£–±–∏—Ä–∞–π —Ñ–ª—É–¥ –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è  
- –£–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –ø–ª–∞–Ω—ã
- –û—Ç–º–µ—á–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- Importance: 0.1-0.3 (—Ñ–ª—É–¥), 0.4-0.6 (–æ–±—ã—á–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ), 0.7-1.0 (–≤–∞–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è)"""
            
            user_message = f"""–†–ê–ó–ì–û–í–û–† –í –ì–†–£–ü–ü–ï:
–£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(participants)}

{conversation_text}

–°–æ–∑–¥–∞–π JSON —Ä–µ–∑—é–º–µ —ç—Ç–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞."""
            
            # –õ–û–ì–ò–†–£–ï–ú –ü–†–û–ú–ü–¢ (DEBUG —É—Ä–æ–≤–µ–Ω—å)
            logger.debug(f"üîç SYSTEM PROMPT: {system_prompt}")
            logger.debug(f"üîç USER MESSAGE: {user_message}")
            
            response = await self.llm_client.chat_completion(
                user_message=user_message,
                system_prompt=system_prompt,
                temperature=0.2,
                max_tokens=2000
            )
            
            # –õ–û–ì–ò–†–£–ï–ú –û–¢–í–ï–¢ (DEBUG —É—Ä–æ–≤–µ–Ω—å)
            logger.debug(f"üîç RAW RESPONSE: {response}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not response or not response.strip():
                logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
                return None
            
            # –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
            chunk_data = self._parse_llm_json_response(response)
            return chunk_data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è —á–µ—Ä–µ–∑ LLM: {e}")
            return None
    
    def _parse_llm_json_response(self, response: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç JSON –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—Ä—É—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
            if not response or not response.strip():
                logger.warning("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
                return None
            
            logger.info(f"üîç –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM: {response[:200]}...")
            
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä
            from utils.robust_json_parser import robust_json_parser
            
            # –û—á–∏—â–∞–µ–º –æ—Ç —Ç–µ–≥–æ–≤ <think> –¥–ª—è DeepSeek R1
            cleaned_response = response
            if "<think>" in response and "</think>" in response:
                # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
                parts = response.split("</think>")
                if len(parts) > 1:
                    cleaned_response = parts[-1].strip()
                    logger.debug("üß† –£–±—Ä–∞–ª–∏ –±–ª–æ–∫ <think> –∏–∑ –æ—Ç–≤–µ—Ç–∞ DeepSeek R1")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä
            json_objects = robust_json_parser(cleaned_response)
            
            if not json_objects:
                logger.warning("‚ö†Ô∏è –ö—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –Ω–µ –Ω–∞—à–µ–ª JSON –æ–±—ä–µ–∫—Ç–æ–≤")
                logger.info(f"üîç –û–ß–ò–©–ï–ù–ù–´–ô –û–¢–í–ï–¢: {cleaned_response}")
                return None
            
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            data = json_objects[0]
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω JSON: {list(data.keys())}")
            
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if not all(key in data for key in ['topic', 'summary', 'importance']):
                logger.warning("‚ö†Ô∏è JSON –æ—Ç LLM –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π")
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
                if 'topic' not in data:
                    data['topic'] = '–û–±—â–µ–Ω–∏–µ'
                if 'summary' not in data:
                    data['summary'] = '–ö—Ä–∞—Ç–∫–æ–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ'
                if 'importance' not in data:
                    data['importance'] = 0.5
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º importance
            data['importance'] = max(0.1, min(1.0, float(data.get('importance', 0.5))))
            
            logger.info(f"‚úÖ –ö—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ–∫ JSON: {data.get('topic', '–±–µ–∑ —Ç–µ–º—ã')}")
            return data
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫—Ä—É—Ç–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ JSON: {e}")
            logger.error(f"üîç –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ LLM: {response}")
            return None
    
    async def _save_memory_chunk(self, chunk: MemoryChunk) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —á–∞–Ω–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import sqlite3
            
            conn = sqlite3.connect(self.memory_manager.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT OR REPLACE INTO memory_chunks 
                (id, chat_id, topic, content, created_at, source_period_start, 
                 source_period_end, relevance_base, message_count, participants, metadata)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                chunk.id,
                chunk.chat_id,
                chunk.topic,
                chunk.content,
                chunk.created_at,
                chunk.source_period_start,
                chunk.source_period_end,
                chunk.relevance_base,
                chunk.message_count,
                json.dumps(chunk.participants),
                json.dumps(asdict(chunk))
            ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"üíæ –ß–∞–Ω–∫ {chunk.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞–Ω–∫–∞: {e}")
            return False
    
    async def _mark_messages_processed(self, message_ids: List[int]) -> bool:
        """–ü–æ–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ"""
        try:
            import sqlite3
            
            conn = sqlite3.connect(self.memory_manager.db_path)
            cursor = conn.cursor()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π
            placeholders = ','.join('?' * len(message_ids))
            cursor.execute(f"""
                UPDATE group_messages 
                SET processed = TRUE 
                WHERE id IN ({placeholders})
            """, message_ids)
            
            updated_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            logger.debug(f"‚úÖ –ü–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ: {updated_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return False
    
    async def force_optimize_chat(self, chat_id: str) -> Dict[str, Any]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            import sqlite3
            conn = sqlite3.connect(self.memory_manager.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, chat_id, user_id, content, timestamp, processed
                FROM group_messages
                WHERE chat_id = ? AND processed = FALSE
                ORDER BY timestamp
            """, (chat_id,))
            
            messages = []
            for row in cursor.fetchall():
                messages.append(MemoryMessage(
                    id=row[0],
                    chat_id=row[1],
                    user_id=row[2],
                    content=row[3],
                    timestamp=row[4],
                    processed=bool(row[5])
                ))
            
            conn.close()
            
            if not messages:
                return {'status': 'no_messages', 'message': '–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'}
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º
            await self._optimize_chat_messages(chat_id, messages)
            
            return {
                'status': 'success',
                'processed_messages': len(messages),
                'message': f'–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            return {'status': 'error', 'message': str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
_night_optimizer = None

def get_night_optimizer(memory_manager: SmartMemoryManager = None, llm_client = None) -> NightOptimizer:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—á–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞"""
    global _night_optimizer
    if _night_optimizer is None and memory_manager and llm_client:
        _night_optimizer = NightOptimizer(memory_manager, llm_client)
    return _night_optimizer
