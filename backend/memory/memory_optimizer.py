"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞.
–°–∂–∏–º–∞–µ—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.
"""
import asyncio
import logging
import sqlite3
import tiktoken
import time
from datetime import datetime, time as datetime_time
from typing import List, Dict, Optional, Any
from pathlib import Path
import json
import random

logger = logging.getLogger(__name__)

class MemoryOptimizer:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞."""
    
    def __init__(self, db_path: str, llm_client, max_chunk_tokens: int = 60000):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏.
        
        Args:
            db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
            max_chunk_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –≤ —Ç–æ–∫–µ–Ω–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60K)
        """
        self.db_path = db_path
        self.llm_client = llm_client
        self.max_chunk_tokens = max_chunk_tokens
        self.tokenizer = tiktoken.encoding_for_model("gpt-4")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (—Å 23:00 –¥–æ 7:00)
        self.night_start = datetime_time(23, 0)  # 23:00
        self.night_end = datetime_time(7, 0)     # 07:00
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        self.optimization_interval = 600  # 10 –º–∏–Ω—É—Ç
        
        # –§–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.is_running = False
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.optimization_prompt = """–¢—ã - —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —Å–∂–∞—Ç—å –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–∞–º—è—Ç–∏, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å—é –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–ü–†–ê–í–ò–õ–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
1. –°–æ—Ö—Ä–∞–Ω–∏ –í–°–Æ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: —Ñ–∞–∫—Ç—ã, –¥–∞—Ç—ã, –∏–º–µ–Ω–∞, —Å–æ–±—ã—Ç–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç
2. –£–±–µ—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ —Ñ—Ä–∞–∑—ã, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏
3. –û–±—ä–µ–¥–∏–Ω–∏ –ø–æ—Ö–æ–∂–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –±–ª–æ–∫–∏
4. –ò—Å–ø–æ–ª—å–∑—É–π –±–æ–ª–µ–µ –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
5. –°–æ—Ö—Ä–∞–Ω–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Ç–æ–Ω –æ–±—â–µ–Ω–∏—è
6. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
–¶–µ–ª—å - —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –æ–±—ä–µ–º –≤ 2-3 —Ä–∞–∑–∞, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤—Å—é —Å—É—Ç—å."""

    def count_tokens(self, text: str) -> int:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ."""
        try:
            return len(self.tokenizer.encode(text))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤: {e}")
            return len(text.split()) * 2  # –ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞

    def is_night_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–æ—á–Ω—ã–º."""
        now = datetime.now().time()
        
        # –ï—Å–ª–∏ –Ω–æ—á—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –ø–æ–ª–Ω–æ—á—å (23:00 - 07:00)
        if self.night_start > self.night_end:
            return now >= self.night_start or now <= self.night_end
        else:
            return self.night_start <= now <= self.night_end

    async def get_memory_chunks(self, limit: int = 5) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ —á–∞–Ω–∫–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        chunks = []
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            
            # 1. –ì—Ä—É–ø–ø–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è (–≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            logger.info("üîç –ü–æ–∏—Å–∫ —á–∞–Ω–∫–æ–≤ –≤ group_history...")
            cursor.execute("""
                SELECT 'group_history' as source, chat_id, GROUP_CONCAT(content, '\n') as content, 
                       COUNT(*) as count, MIN(timestamp) as oldest, MAX(timestamp) as newest
                FROM group_history 
                GROUP BY chat_id
                HAVING COUNT(*) > 0
                ORDER BY count DESC
                LIMIT ?
            """, (limit,))
            
            rows = cursor.fetchall()
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(rows)} –≥—Ä—É–ø–ø –≤ group_history")
            
            for row in rows:
                source, chat_id, content, count, oldest, newest = row
                logger.info(f"  –ì—Ä—É–ø–ø–∞: {chat_id}, –∑–∞–ø–∏—Å–µ–π: {count}, —Ç–æ–∫–µ–Ω–æ–≤: {self.count_tokens(content) if content else 0}")
                if content and self.count_tokens(content) > 10:  # –°–Ω–∏–∂–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    chunks.append({
                        'source': source,
                        'chat_id': chat_id,
                        'content': content,
                        'count': count,
                        'oldest': oldest,
                        'newest': newest,
                        'tokens': self.count_tokens(content)
                    })
                else:
                    logger.info(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω: —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Ç–æ–∫–µ–Ω–æ–≤ ({self.count_tokens(content) if content else 0})")
            
            # 2. –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –±–æ–ª—å—à–∏–µ –∑–∞–ø–∏—Å–∏)
            try:
                cursor.execute("""
                    SELECT 'vector_store' as source, id, content, metadata
                    FROM vector_store 
                    WHERE LENGTH(content) > 2000
                    ORDER BY RANDOM()
                    LIMIT ?
                """, (limit,))
                
                for row in cursor.fetchall():
                    source, doc_id, content, metadata = row
                    if content and self.count_tokens(content) > 1000:
                        chunks.append({
                            'source': source,
                            'id': doc_id,
                            'content': content,
                            'metadata': metadata,
                            'tokens': self.count_tokens(content)
                        })
            except sqlite3.OperationalError:
                # –¢–∞–±–ª–∏—Ü–∞ vector_store –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                pass
            
            conn.close()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏: {e}")
            
        return chunks

    async def optimize_chunk(self, chunk: Dict[str, Any]) -> Optional[str]:
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —á–∞–Ω–∫ –ø–∞–º—è—Ç–∏.
        
        Args:
            chunk: –ß–∞–Ω–∫ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            
        Returns:
            str: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            content = chunk['content']
            original_tokens = self.count_tokens(content)
            
            # –ï—Å–ª–∏ —á–∞–Ω–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
            if original_tokens > self.max_chunk_tokens:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ª–æ–≤–∏–Ω—É –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                words = content.split()
                half_words = words[:len(words)//2]
                content = ' '.join(half_words)
                logger.info(f"–ß–∞–Ω–∫ —É—Ä–µ–∑–∞–Ω —Å {original_tokens} –¥–æ {self.count_tokens(content)} —Ç–æ–∫–µ–Ω–æ–≤")
            
            logger.info(f"–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —á–∞–Ω–∫: {original_tokens} —Ç–æ–∫–µ–Ω–æ–≤, –∏—Å—Ç–æ—á–Ω–∏–∫: {chunk['source']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            try:
                optimized_content = await self.llm_client.chat_completion(
                    user_message=content,
                    system_prompt=self.optimization_prompt,
                    max_tokens=min(30000, original_tokens),  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞
                    temperature=0.3  # –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                )
                
                if optimized_content and optimized_content.strip():
                    optimized_tokens = self.count_tokens(optimized_content)
                    compression_ratio = original_tokens / optimized_tokens if optimized_tokens > 0 else 1
                    
                    logger.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {original_tokens} -> {optimized_tokens} —Ç–æ–∫–µ–Ω–æ–≤ "
                               f"(—Å–∂–∞—Ç–∏–µ –≤ {compression_ratio:.1f}x)")
                    
                    return optimized_content.strip()
                else:
                    logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç LLM")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
                # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
                logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                words = content.split()
                simplified = ' '.join(words[:len(words)//2]) + " [–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ]"
                return simplified
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–∞: {e}")
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
            logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            words = content.split()
            simplified = ' '.join(words[:len(words)//2]) + " [–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ]"
            return simplified
            
        return None

    async def save_optimized_chunk(self, original_chunk: Dict[str, Any], optimized_content: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å.
        
        Args:
            original_chunk: –ò—Å—Ö–æ–¥–Ω—ã–π —á–∞–Ω–∫
            optimized_content: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å
            from pathlib import Path
            import time
            import json
            
            collective_db_path = str(Path(self.db_path).parent / "collective_mind.db")
            
            conn = sqlite3.connect(collective_db_path)
            cursor = conn.cursor()
            
            source = original_chunk['source']
            chat_id = original_chunk.get('chat_id', 'unknown')
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
            cursor.execute("""
                INSERT INTO collective_memories (
                    id, agent_id, memory_type, content, context, timestamp, 
                    importance, success_rate, tags
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                f"optimized_{source}_{chat_id}_{int(time.time())}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                'memory_optimizer',
                'optimized_memory',
                optimized_content,
                f"–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ {source} –¥–ª—è {chat_id}",
                int(time.time()),
                0.8,  # –í—ã—Å–æ–∫–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                0.9,  # –í—ã—Å–æ–∫–∏–π —É—Å–ø–µ—Ö
                json.dumps(['optimized', source, chat_id])
            ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å: {source}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞: {e}")
            return False

    async def optimize_memory_cycle(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏."""
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        # if not self.is_night_time():
        #     logger.info("–ù–µ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é")
        #     return
            
        logger.info("üß† –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            chunks = await self.get_memory_chunks(limit=3)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 3 —á–∞–Ω–∫–∞ –∑–∞ —Ä–∞–∑
            
            if not chunks:
                logger.info("–ù–µ—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                return
            
            # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω —á–∞–Ω–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            chunk = random.choice(chunks)
            
            logger.info(f"–í—ã–±—Ä–∞–Ω —á–∞–Ω–∫: {chunk['source']}, —Ç–æ–∫–µ–Ω–æ–≤: {chunk['tokens']}")
            
            # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —á–∞–Ω–∫
            optimized_content = await self.optimize_chunk(chunk)
            
            if optimized_content:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫
                success = await self.save_optimized_chunk(chunk, optimized_content)
                
                if success:
                    logger.info("‚úÖ –¶–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —á–∞–Ω–∫–∞")
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∞–Ω–∫–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")

    async def start_optimization_loop(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏")
        
        while self.is_running:
            try:
                await self.optimize_memory_cycle()
                
                # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª
                await asyncio.sleep(self.optimization_interval)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def stop_optimization(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é."""
        self.is_running = False
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏")

    async def get_optimization_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            stats = {
                "is_running": self.is_running,
                "is_night_time": self.is_night_time(),
                "optimization_interval": self.optimization_interval,
                "max_chunk_tokens": self.max_chunk_tokens,
                "night_hours": f"{self.night_start} - {self.night_end}"
            }
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            cursor.execute("""
                SELECT COUNT(*) FROM group_history 
                WHERE timestamp < datetime('now', '-7 days')
            """)
            stats["old_group_messages"] = cursor.fetchone()[0]
            
            try:
                cursor.execute("""
                    SELECT COUNT(*) FROM vector_store 
                    WHERE LENGTH(content) > 2000
                """)
                stats["large_vector_entries"] = cursor.fetchone()[0]
            except sqlite3.OperationalError:
                stats["large_vector_entries"] = 0
            
            conn.close()
            return stats
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {"error": str(e)} 

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
_global_optimizer = None

def create_memory_optimizer(db_path: str, llm_client, max_chunk_tokens: int = 60000) -> MemoryOptimizer:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏.
    
    Args:
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        llm_client: –ö–ª–∏–µ–Ω—Ç LLM
        max_chunk_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
        
    Returns:
        MemoryOptimizer: –≠–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
    """
    global _global_optimizer
    
    if _global_optimizer is None:
        _global_optimizer = MemoryOptimizer(db_path, llm_client, max_chunk_tokens)
        logger.info("üìù –°–æ–∑–¥–∞–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏")
    
    return _global_optimizer

def get_memory_optimizer() -> Optional[MemoryOptimizer]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞."""
    return _global_optimizer

async def start_background_optimization(db_path: str, llm_client, max_chunk_tokens: int = 60000):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏.
    
    Args:
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        llm_client: –ö–ª–∏–µ–Ω—Ç LLM
        max_chunk_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
    """
    optimizer = create_memory_optimizer(db_path, llm_client, max_chunk_tokens)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(optimizer.start_optimization_loop())
    logger.info("üöÄ –§–æ–Ω–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞")

def stop_background_optimization():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–Ω–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏."""
    if _global_optimizer:
        _global_optimizer.stop_optimization()
        logger.info("üõë –§–æ–Ω–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞–º—è—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
async def test_optimization(db_path: str, llm_client):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–∞–º—è—Ç–∏.
    
    Args:
        db_path: –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        llm_client: –ö–ª–∏–µ–Ω—Ç LLM
    """
    optimizer = MemoryOptimizer(db_path, llm_client)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è)
    original_is_night_time = optimizer.is_night_time
    optimizer.is_night_time = lambda: True  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∞
    
    try:
        await optimizer.optimize_memory_cycle()
        logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
    finally:
        optimizer.is_night_time = original_is_night_time 