"""
üí¨ Dialogue Context - –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –±–æ—Ç–æ–º
–ü–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –ø–æ–º–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±–º–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è
"""

import sqlite3
import time
import json
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from pathlib import Path

logger = logging.getLogger("chatumba.dialogue_context")

@dataclass
class DialogueTurn:
    """–û–¥–∏–Ω —Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥–µ"""
    id: int
    chat_id: str
    user_id: str
    user_message: str
    bot_response: str
    timestamp: float
    message_id: int  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ Telegram
    is_quote: bool = False  # –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

class DialogueContextManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
    
    def __init__(self, db_path: str = "data/smart_memory.db"):
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(exist_ok=True)
        self._init_database()
    
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –¥–∏–∞–ª–æ–≥–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS dialogue_context (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    chat_id TEXT NOT NULL,
                    user_id TEXT NOT NULL,
                    user_message TEXT NOT NULL,
                    bot_response TEXT NOT NULL,
                    timestamp REAL NOT NULL,
                    message_id INTEGER NOT NULL,
                    is_quote BOOLEAN DEFAULT FALSE,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_dialogue_chat_time ON dialogue_context(chat_id, timestamp)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_dialogue_message_id ON dialogue_context(message_id)")
            cursor.execute("CREATE INDEX IF NOT EXISTS idx_dialogue_user ON dialogue_context(chat_id, user_id, timestamp)")
            
            conn.commit()
            conn.close()
            
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
            raise
    
    def save_dialogue_turn(self, chat_id: str, user_id: str, user_message: str, 
                          bot_response: str, message_id: int, is_quote: bool = False) -> bool:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–¥–∏–Ω —Ö–æ–¥ –¥–∏–∞–ª–æ–≥–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO dialogue_context 
                (chat_id, user_id, user_message, bot_response, timestamp, message_id, is_quote)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (chat_id, user_id, user_message, bot_response, time.time(), message_id, is_quote))
            
            conn.commit()
            conn.close()
            
            logger.debug(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –¥–∏–∞–ª–æ–≥ –¥–ª—è —á–∞—Ç–∞ {chat_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞: {e}")
            return False
    
    def get_recent_dialogue_context(self, chat_id: str, user_id: str, 
                                   limit: int = 5) -> List[DialogueTurn]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ö–æ–¥—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, chat_id, user_id, user_message, bot_response, 
                       timestamp, message_id, is_quote
                FROM dialogue_context
                WHERE chat_id = ? AND user_id = ?
                ORDER BY timestamp DESC
                LIMIT ?
            """, (chat_id, user_id, limit))
            
            turns = []
            for row in cursor.fetchall():
                turn = DialogueTurn(
                    id=row[0],
                    chat_id=row[1],
                    user_id=row[2],
                    user_message=row[3],
                    bot_response=row[4],
                    timestamp=row[5],
                    message_id=row[6],
                    is_quote=bool(row[7])
                )
                turns.append(turn)
            
            conn.close()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
            return list(reversed(turns))
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return []
    
    def find_bot_message_by_id(self, message_id: int) -> Optional[DialogueTurn]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ ID –¥–ª—è —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, chat_id, user_id, user_message, bot_response, 
                       timestamp, message_id, is_quote
                FROM dialogue_context
                WHERE message_id = ?
                LIMIT 1
            """, (message_id,))
            
            row = cursor.fetchone()
            conn.close()
            
            if row:
                return DialogueTurn(
                    id=row[0],
                    chat_id=row[1],
                    user_id=row[2],
                    user_message=row[3],
                    bot_response=row[4],
                    timestamp=row[5],
                    message_id=row[6],
                    is_quote=bool(row[7])
                )
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {e}")
            return None
    
    def cleanup_old_dialogues(self, max_age_hours: int = 24):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∏–∞–ª–æ–≥–∏"""
        try:
            cutoff_time = time.time() - (max_age_hours * 3600)
            
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute("""
                DELETE FROM dialogue_context
                WHERE timestamp < ?
            """, (cutoff_time,))
            
            deleted_count = cursor.rowcount
            conn.commit()
            conn.close()
            
            if deleted_count > 0:
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
    
    def format_dialogue_context(self, turns: List[DialogueTurn]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        if not turns:
            return ""
        
        context_lines = ["=== –ö–û–ù–¢–ï–ö–°–¢ –î–ò–ê–õ–û–ì–ê ==="]
        
        for turn in turns:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = time.strftime('%H:%M', time.localtime(turn.timestamp))
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–æ–¥ –¥–∏–∞–ª–æ–≥–∞
            context_lines.append(f"[{time_str}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {turn.user_message}")
            context_lines.append(f"[{time_str}] –ë–æ—Ç: {turn.bot_response}")
            
            if turn.is_quote:
                context_lines.append("(–≠—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)")
            
            context_lines.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –º–µ–∂–¥—É —Ö–æ–¥–∞–º–∏
        
        return "\n".join(context_lines)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_dialogue_manager = None

def get_dialogue_context_manager() -> DialogueContextManager:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤"""
    global _dialogue_manager
    if _dialogue_manager is None:
        _dialogue_manager = DialogueContextManager()
    return _dialogue_manager

