"""
–ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Pollinations.ai (–æ—Å–Ω–æ–≤–Ω–æ–π) –∏ Hugging Face API (fallback).
"""
import asyncio
import time
import logging
import aiohttp
import os
import urllib.parse
import requests
from typing import Optional, Dict, Any
import json
import re

# –ê–±—Å–æ–ª—é—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞)
try:
    from backend.config import *
except ImportError:
    # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    import sys
    from pathlib import Path
    sys.path.append(str(Path(__file__).parent.parent))
    from config import *

# Removed circular import - llm_client will be created locally

logger = logging.getLogger(__name__)

# Fallback –¥–ª—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–µ—Å–ª–∏ config –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è)
try:
    HF_API_KEY
except NameError:
    HF_API_KEY = os.environ.get("HF_API_KEY", "")

# Pollinations.ai –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–û–°–ù–û–í–ù–û–ô –ì–ï–ù–ï–†–ê–¢–û–†)
POLLINATIONS_BASE_URL = "https://image.pollinations.ai/prompt"
POLLINATIONS_DEFAULT_MODEL = "flux"

# Pollinations.ai –º–æ–¥–µ–ª–∏ (–æ—Å–Ω–æ–≤–Ω—ã–µ)
POLLINATIONS_MODELS = {
    "flux": {
        "name": "FLUX",
        "description": "FLUX - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
        "supports_size": True,
        "max_size": 2048,
        "free_tier": True,
        "average_wait_time": "3-10 seconds",
        "tested_performance": {
            "response_time": "3.58s",
            "image_size": "50000+ bytes",
            "format": "PNG",
            "resolution": "1024x1024"
        }
    },
    "flux-dev": {
        "name": "FLUX Development",
        "description": "FLUX Development - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è",
        "supports_size": True,
        "max_size": 2048,
        "free_tier": True,
        "average_wait_time": "5-15 seconds"
    },
    "turbo": {
        "name": "FLUX Turbo",
        "description": "FLUX Turbo - –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
        "supports_size": True,
        "max_size": 1024,
        "free_tier": True,
        "average_wait_time": "2-5 seconds"
    },
    "nanobanana": {
        "name": "Nano Banana",
        "description": "Nano Banana - –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å",
        "supports_size": True,
        "max_size": 1024,
        "free_tier": True,
        "average_wait_time": "1-3 seconds"
    }
}

# Hugging Face API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (FALLBACK)
HF_BASE_URL = "https://api-inference.huggingface.co/models"
HF_DEFAULT_MODEL = "stabilityai/stable-diffusion-3-medium-diffusers"

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ Hugging Face (fallback)
HF_MODELS = {
    "stabilityai/stable-diffusion-3-medium-diffusers": {
        "name": "Stable Diffusion 3 Medium",
        "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å SD3 Medium - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –±—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
        "supports_size": True,
        "max_size": 1024,
        "free_tier": True,
        "average_wait_time": "3-5 seconds",
        "tested_performance": {
            "response_time": "3.40s",
            "image_size": "30916 bytes",
            "format": "JPEG",
            "resolution": "512x512"
        }
    },
    "stabilityai/stable-diffusion-xl-base-1.0": {
        "name": "SDXL Base 1.0",
        "description": "SDXL Base 1.0 - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å",
        "supports_size": True,
        "max_size": 1024,
        "free_tier": True,
        "average_wait_time": "5-10 seconds",
        "tested_performance": {
            "response_time": "4.93s",
            "image_size": "48767 bytes",
            "format": "JPEG",
            "resolution": "512x512"
        }
    },
    "black-forest-labs/FLUX.1-dev": {
        "name": "FLUX.1 Development",
        "description": "FLUX.1 –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è",
        "supports_size": True,
        "max_size": 1024,
        "free_tier": True,
        "average_wait_time": "4-6 seconds",
        "tested_performance": {
            "response_time": "4.20s",
            "image_size": "35000 bytes",
            "format": "JPEG",
            "resolution": "512x512"
        }
    },
    "black-forest-labs/FLUX.1-schnell": {
        "name": "FLUX.1 Schnell",
        "description": "FLUX.1 –±—ã—Å—Ç—Ä–∞—è - –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
        "supports_size": True,
        "max_size": 1024,
        "free_tier": True,
        "average_wait_time": "2-4 seconds",
        "tested_performance": {
            "response_time": "2.70s",
            "image_size": "32000 bytes",
            "format": "JPEG",
            "resolution": "512x512"
        }
    }
}

async def generate_image_pollinations(
    prompt: str,
    model: str = POLLINATIONS_DEFAULT_MODEL,
    width: int = 1024,
    height: int = 1024,
    seed: Optional[int] = None,
    enhance: bool = True,
    safe: bool = True,
    timeout: int = 300
) -> Optional[bytes]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Pollinations.ai (–û–°–ù–û–í–ù–û–ô –ì–ï–ù–ï–†–ê–¢–û–†)
    
    Args:
        prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        seed: –°–∏–¥ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        enhance: –ê–≤—Ç–æ–ø—Ä–æ–∫–∞—á–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ LLM'–æ–º
        safe: –°—Ç—Ä–æ–≥–∏–π NSFW-—Ñ–∏–ª—å—Ç—Ä
        timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        
    Returns:
        bytes: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
    """
    
    logger.info(f"üé® [POLLINATIONS] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {prompt[:50]}...")
    logger.info(f"ü§ñ [POLLINATIONS] –ú–æ–¥–µ–ª—å: {model}, —Ä–∞–∑–º–µ—Ä: {width}x{height}")
    
    try:
        # URL-–∫–æ–¥–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        encoded_prompt = urllib.parse.quote(prompt)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        url = f"{POLLINATIONS_BASE_URL}/{encoded_prompt}"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
        params = {
            "width": width,
            "height": height,
            "model": model,
            "enhance": "true" if enhance else "false",
            "safe": "true" if safe else "false"
        }
        
        if seed:
            params["seed"] = seed
        
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.get(url, params=params) as response:
                if response.status == 200:
                    image_data = await response.read()
                    end_time = time.time()
                    
                    logger.info(f"‚úÖ [POLLINATIONS] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {end_time - start_time:.2f}s, —Ä–∞–∑–º–µ—Ä: {len(image_data)} bytes")
                    return image_data
                else:
                    logger.error(f"‚ùå [POLLINATIONS] –û—à–∏–±–∫–∞ API: {response.status}")
                    return None
                    
    except asyncio.TimeoutError:
        logger.error(f"‚ùå [POLLINATIONS] –¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({timeout}s)")
        return None
    except Exception as e:
        logger.error(f"‚ùå [POLLINATIONS] –û—à–∏–±–∫–∞: {e}")
        return None

async def generate_image_huggingface(
    prompt: str,
    model: str = HF_DEFAULT_MODEL,
    width: int = 512,
    height: int = 512,
    timeout: int = 300
) -> Optional[bytes]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Hugging Face API (FALLBACK)
    
    Args:
        prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        
    Returns:
        bytes: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
    """
    
    logger.info(f"üé® [HUGGINGFACE] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (fallback): {prompt[:50]}...")
    logger.info(f"ü§ñ [HUGGINGFACE] –ú–æ–¥–µ–ª—å: {model}, —Ä–∞–∑–º–µ—Ä: {width}x{height}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
    if model not in HF_MODELS:
        logger.warning(f"‚ö†Ô∏è [HUGGINGFACE] –ú–æ–¥–µ–ª—å {model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º {HF_DEFAULT_MODEL}")
        model = HF_DEFAULT_MODEL
    
    try:
        url = f"{HF_BASE_URL}/{model}"
        headers = {"Authorization": f"Bearer {HF_API_KEY}"}
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Hugging Face
        payload = {
            "inputs": prompt,
            "parameters": {
                "width": width,
                "height": height,
                "num_inference_steps": 20,
                "guidance_scale": 7.5
            }
        }
        
        start_time = time.time()
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=timeout)) as session:
            async with session.post(url, headers=headers, json=payload) as response:
                if response.status == 200:
                    image_data = await response.read()
                    end_time = time.time()
                    
                    logger.info(f"‚úÖ [HUGGINGFACE] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {end_time - start_time:.2f}s, —Ä–∞–∑–º–µ—Ä: {len(image_data)} bytes")
                    return image_data
                else:
                    error_text = await response.text()
                    logger.error(f"‚ùå [HUGGINGFACE] –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                    return None
                    
    except asyncio.TimeoutError:
        logger.error(f"‚ùå [HUGGINGFACE] –¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ({timeout}s)")
        return None
    except Exception as e:
        logger.error(f"‚ùå [HUGGINGFACE] –û—à–∏–±–∫–∞: {e}")
        return None

async def get_available_models() -> Dict[str, Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π (Pollinations + Hugging Face)
    """
    models = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ Pollinations (–æ—Å–Ω–æ–≤–Ω—ã–µ)
    for model_id, model_info in POLLINATIONS_MODELS.items():
        models[f"pollinations_{model_id}"] = {
            "name": f"Pollinations {model_info['name']}",
            "type": "pollinations",
            "description": model_info["description"],
            "max_resolution": model_info.get("max_size", 1024),
            "supports_nsfw": False,
            "average_wait_time": model_info.get("average_wait_time", "3-10 seconds"),
            "free": model_info.get("free_tier", True),
            "priority": "primary"  # –û—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª–∏ Hugging Face (fallback)
    for model_id, model_info in HF_MODELS.items():
        models[f"hf_{model_id}"] = {
            "name": f"HuggingFace {model_info['name']}",
            "type": "huggingface",
            "description": model_info["description"],
            "max_resolution": model_info.get("max_size", 512),
            "supports_nsfw": False,
            "average_wait_time": model_info.get("average_wait_time", "5-10 seconds"),
            "free": model_info.get("free_tier", True),
            "priority": "fallback"  # Fallback –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        }
    
    return models

async def image_generator(
    prompt: str,
    model: str = None,
    width: int = 1024,
    height: int = 512,
    timeout: int = 300,
    **kwargs
) -> Optional[bytes]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback
    
    Args:
        prompt: –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
        model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Pollinations)
        width: –®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        height: –í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        timeout: –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        
    Returns:
        bytes: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ bytes
    """
    
    logger.info(f"üé® [IMAGE_GENERATOR] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: {prompt[:50]}...")
    
    # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º Pollinations –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if model is None:
        model = f"pollinations_{POLLINATIONS_DEFAULT_MODEL}"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É –º–æ–¥–µ–ª–∏
    if model.startswith("pollinations_"):
        # Pollinations –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        pollinations_model = model.replace("pollinations_", "")
        
        if pollinations_model not in POLLINATIONS_MODELS:
            logger.warning(f"‚ö†Ô∏è [IMAGE_GENERATOR] –ú–æ–¥–µ–ª—å Pollinations {pollinations_model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º {POLLINATIONS_DEFAULT_MODEL}")
            pollinations_model = POLLINATIONS_DEFAULT_MODEL
        
        # –ü—Ä–æ–±—É–µ–º Pollinations
        image_data = await generate_image_pollinations(
            prompt=prompt,
            model=pollinations_model,
            width=width,
            height=height,
            timeout=timeout,
            **kwargs
        )
        
        if image_data:
            logger.info("‚úÖ [IMAGE_GENERATOR] Pollinations —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return image_data
        else:
            logger.warning("‚ö†Ô∏è [IMAGE_GENERATOR] Pollinations –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º HuggingFace fallback")
    
    elif model.startswith("hf_"):
        # Hugging Face –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        hf_model = model.replace("hf_", "")
        
        if hf_model not in HF_MODELS:
            logger.warning(f"‚ö†Ô∏è [IMAGE_GENERATOR] –ú–æ–¥–µ–ª—å HuggingFace {hf_model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º {HF_DEFAULT_MODEL}")
            hf_model = HF_DEFAULT_MODEL
        
        image_data = await generate_image_huggingface(
            prompt=prompt,
            model=hf_model,
            width=width,
            height=height,
            timeout=timeout
        )
        
        if image_data:
            logger.info("‚úÖ [IMAGE_GENERATOR] HuggingFace —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return image_data
        else:
            logger.error("‚ùå [IMAGE_GENERATOR] HuggingFace –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return None
    
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏, –ø—Ä–æ–±—É–µ–º Pollinations –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        logger.warning(f"‚ö†Ô∏è [IMAGE_GENERATOR] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –º–æ–¥–µ–ª–∏ {model}, –ø—Ä–æ–±—É–µ–º Pollinations")
        
        image_data = await generate_image_pollinations(
            prompt=prompt,
            model=POLLINATIONS_DEFAULT_MODEL,
            width=width,
            height=height,
            timeout=timeout,
            **kwargs
        )
        
        if image_data:
            logger.info("‚úÖ [IMAGE_GENERATOR] Pollinations (fallback) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return image_data
        else:
            logger.warning("‚ö†Ô∏è [IMAGE_GENERATOR] Pollinations fallback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º HuggingFace")
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ HuggingFace
            image_data = await generate_image_huggingface(
                prompt=prompt,
                model=HF_DEFAULT_MODEL,
                width=width,
                height=height,
                timeout=timeout
            )
            
            if image_data:
                logger.info("‚úÖ [IMAGE_GENERATOR] HuggingFace (final fallback) —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return image_data
            else:
                logger.error("‚ùå [IMAGE_GENERATOR] –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å–º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                return None

# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def generate_image_stable_horde(prompt: str, model: str = HF_DEFAULT_MODEL, **kwargs) -> Optional[bytes]:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ image_generator"""
    return await image_generator(prompt, f"hf_{model}", **kwargs)

async def generate_image_hf(prompt: str, model: str = HF_DEFAULT_MODEL, **kwargs) -> Optional[bytes]:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ image_generator"""
    return await image_generator(prompt, f"hf_{model}", **kwargs)

async def generate_image_replicate(prompt: str, model: str = HF_DEFAULT_MODEL, **kwargs) -> Optional[bytes]:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ image_generator"""
    return await image_generator(prompt, f"pollinations_{POLLINATIONS_DEFAULT_MODEL}", **kwargs)

async def generate_image_deepai(prompt: str, model: str = HF_DEFAULT_MODEL, **kwargs) -> Optional[bytes]:
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ image_generator"""
    return await image_generator(prompt, f"pollinations_{POLLINATIONS_DEFAULT_MODEL}", **kwargs)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def test_image_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    test_prompt = "a beautiful sunset over mountains"
    result = await image_generator(test_prompt)
    
    if result:
        logger.info(f"‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(result)} bytes")
    else:
        logger.error("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª")

ARGOS_RU_EN_URL = "https://data.argosopentech.com/argospm/v1/translate-ru_en-1_9.argosmodel"
ARGOS_RU_EN_MODEL = "translate-ru_en-1_9.argosmodel"

async def translate_prompt_to_english(prompt: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—ã–π Argos Translate.
    –ï—Å–ª–∏ Argos –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º.
    
    Args:
        prompt: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–±—ã—á–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º)
    Returns:
        str: –ü—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è text-to-image
    """
    if not any(ord(char) > 127 for char in prompt):
        logger.info(f"[PROMPT TRANSLATE] –ü—Ä–æ–º–ø—Ç —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: {prompt}")
        return prompt

    # –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ Argos Translate
    try:
        import argostranslate.package, argostranslate.translate
        from pathlib import Path
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ –ø–∞—Ä–∞ ru->en
        installed_languages = argostranslate.translate.get_installed_languages()
        from_lang = next((lang for lang in installed_languages if lang.code == "ru"), None)
        to_lang = next((lang for lang in installed_languages if lang.code == "en"), None)
        
        if not (from_lang and to_lang):
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫–æ–≤—É—é –ø–∞—Ä—É
            logger.info("[PROMPT TRANSLATE] –°–∫–∞—á–∏–≤–∞–µ–º —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å Argos ru->en...")
            try:
                import urllib.request
                import tempfile
                import os
                
                # –ê–∫—Ç—É–∞–ª—å–Ω—ã–π URL –¥–ª—è –º–æ–¥–µ–ª–∏ ru->en —Å data.argosopentech.com
                model_url = "https://data.argosopentech.com/argospm/v1/translate-ru_en-1_9.argosmodel"
                
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                with tempfile.NamedTemporaryFile(delete=False, suffix='.argosmodel') as tmp_file:
                    logger.info(f"[PROMPT TRANSLATE] –°–∫–∞—á–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å {model_url}...")
                    urllib.request.urlretrieve(model_url, tmp_file.name)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å
                    logger.info("[PROMPT TRANSLATE] –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥–µ–ª—å...")
                    argostranslate.package.install_from_path(tmp_file.name)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.unlink(tmp_file.name)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
                    installed_languages = argostranslate.translate.get_installed_languages()
                    from_lang = next((lang for lang in installed_languages if lang.code == "ru"), None)
                    to_lang = next((lang for lang in installed_languages if lang.code == "en"), None)
                    
            except Exception as e:
                logger.warning(f"[PROMPT TRANSLATE] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –º–æ–¥–µ–ª—å Argos: {e}")
                return prompt
        
        if from_lang and to_lang:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
            translated = argostranslate.translate.translate(prompt, from_lang, to_lang)
            logger.info(f"[PROMPT TRANSLATE] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: '{prompt}' -> '{translated}'")
            return translated
        else:
            logger.warning("[PROMPT TRANSLATE] –Ø–∑—ã–∫–æ–≤–∞—è –ø–∞—Ä–∞ ru->en –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return prompt
            
    except ImportError:
        logger.warning("[PROMPT TRANSLATE] Argos Translate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        return prompt
    except Exception as e:
        logger.warning(f"[PROMPT TRANSLATE] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
        return prompt

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    asyncio.run(test_image_generation())