#!/usr/bin/env python3
"""
üí∞ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏—Ä–∂–∞–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import aiohttp
import asyncio
import logging
from typing import Dict, Optional, List
from datetime import datetime
import json

logger = logging.getLogger(__name__)

class CryptoPriceAPI:
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    
    def __init__(self):
        self.session = None
        self.cache = {}
        self.cache_duration = 60  # 1 –º–∏–Ω—É—Ç–∞
        
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session is None or self.session.closed:
            self.session = aiohttp.ClientSession(
                timeout=aiohttp.ClientTimeout(total=10),
                headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
                }
            )
        return self.session
    
    async def get_binance_price(self, symbol: str = "BTCUSDT") -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Binance"""
        try:
            session = await self._get_session()
            url = f"https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}"
            
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return {
                        "symbol": data["symbol"],
                        "price": float(data["lastPrice"]),
                        "change_24h": float(data["priceChangePercent"]),
                        "volume": float(data["volume"]),
                        "high_24h": float(data["highPrice"]),
                        "low_24h": float(data["lowPrice"]),
                        "source": "Binance",
                        "timestamp": datetime.now().isoformat()
                    }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å Binance: {e}")
        return None
    
    async def get_coingecko_price(self, coin_id: str = "bitcoin") -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å CoinGecko"""
        try:
            session = await self._get_session()
            url = f"https://api.coingecko.com/api/v3/simple/price?ids={coin_id}&vs_currencies=usd&include_24hr_change=true&include_24hr_vol=true"
            
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    if coin_id in data:
                        coin_data = data[coin_id]
                        return {
                            "symbol": coin_id.upper(),
                            "price": coin_data["usd"],
                            "change_24h": coin_data.get("usd_24h_change", 0),
                            "volume": coin_data.get("usd_24h_vol", 0),
                            "source": "CoinGecko",
                            "timestamp": datetime.now().isoformat()
                        }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å CoinGecko: {e}")
        return None
    
    async def get_crypto_news(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
        try:
            session = await self._get_session()
            url = "https://api.coingecko.com/api/v3/news"
            
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    return data.get("data", [])[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []
    
    async def get_crypto_intelligence(self, query: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
        result = {
            "prices": {},
            "news": [],
            "summary": "",
            "timestamp": datetime.now().isoformat()
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        btc_price = await self.get_binance_price("BTCUSDT")
        eth_price = await self.get_binance_price("ETHUSDT")
        
        if btc_price:
            result["prices"]["BTC"] = btc_price
        if eth_price:
            result["prices"]["ETH"] = eth_price
            
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏
        news = await self.get_crypto_news()
        result["news"] = news
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
        if result["prices"]:
            summary_parts = []
            for symbol, price_data in result["prices"].items():
                change = price_data["change_24h"]
                change_symbol = "üìà" if change > 0 else "üìâ"
                summary_parts.append(
                    f"{symbol}: ${price_data['price']:,.2f} ({change_symbol} {change:+.2f}%)"
                )
            
            result["summary"] = " | ".join(summary_parts)
        
        return result
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session and not self.session.closed:
            await self.session.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_crypto_api = None

async def get_crypto_api() -> CryptoPriceAPI:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ API"""
    global _crypto_api
    if _crypto_api is None:
        _crypto_api = CryptoPriceAPI()
    return _crypto_api

async def get_crypto_price(symbol: str = "BTC") -> Optional[Dict]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    api = await get_crypto_api()
    if symbol.upper() == "BTC":
        return await api.get_binance_price("BTCUSDT")
    elif symbol.upper() == "ETH":
        return await api.get_binance_price("ETHUSDT")
    else:
        return await api.get_binance_price(f"{symbol.upper()}USDT")

async def get_crypto_intelligence(query: str) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
    api = await get_crypto_api()
    return await api.get_crypto_intelligence(query) 