#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏
"""
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from memory.memory_optimizer import create_memory_optimizer
from llm import OpenRouterClient
from config import Config

async def test_optimizer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø–∞–º—è—Ç–∏"""
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
        config = Config()
        llm_client = OpenRouterClient(config)
        
        print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞...")
        optimizer = create_memory_optimizer('data/chatumba.db', llm_client)
        
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞–Ω–∫–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –Ω–∞–ø—Ä—è–º—É—é
        import sqlite3
        conn = sqlite3.connect('data/chatumba.db')
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM group_history")
        count = cursor.fetchone()[0]
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ group_history: {count}")
        
        cursor.execute("SELECT chat_id, content, timestamp FROM group_history")
        rows = cursor.fetchall()
        for row in rows:
            print(f"  –ó–∞–ø–∏—Å—å: {row}")
        conn.close()
        
        chunks = await optimizer.get_memory_chunks(limit=5)
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
        
        for i, chunk in enumerate(chunks):
            print(f"  –ß–∞–Ω–∫ {i+1}: {chunk['source']} - {chunk['tokens']} —Ç–æ–∫–µ–Ω–æ–≤")
        
        print("üß† –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        try:
            await optimizer.optimize_memory_cycle()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
        
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_optimizer()) 