"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å (Text-to-Speech).
"""
import os
import logging
import tempfile
import re
import random
from typing import Optional, List, Tuple, Dict, Any
from pathlib import Path
import json
import requests
from pydub import AudioSegment

logger = logging.getLogger("chatumba.tts")

class TextToSpeech:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–µ—á—å.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç TTS –¥–≤–∏–∂–æ–∫.
        """
        self.use_rhvoice = False
        self.use_gtts = False
        self.use_elevenlabs = False
        self.rhvoice = None
        # ElevenLabs –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.eleven_api_keys: List[str] = []
        self.eleven_voice_id: Optional[str] = None
        self.eleven_model_id: str = os.getenv("ELEVEN_MODEL_ID", "eleven_multilingual_v2")
        self.eleven_output_format: str = os.getenv("ELEVEN_OUTPUT_FORMAT", "mp3_44100_128")
        self.eleven_preset: Optional[str] = os.getenv("ELEVEN_PRESET")
        self.eleven_settings = self._load_eleven_settings()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        self.temp_dir = Path(__file__).parent.parent.parent / "temp"
        self.temp_dir.mkdir(exist_ok=True)
        
        # –°–±–æ—Ä –∫–ª—é—á–µ–π ElevenLabs (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–±–ª–∞—á–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
        self.eleven_api_keys = self._collect_eleven_api_keys()
        if self.eleven_api_keys:
            self.eleven_voice_id = os.getenv("ELEVEN_VOICE_ID")
            if not self.eleven_voice_id:
                try:
                    vid = self._resolve_eleven_voice_id()
                    self.eleven_voice_id = vid
                    logger.info(f"ElevenLabs: –≤—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {self.eleven_voice_id}")
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ ElevenLabs: {e}")
            self.use_elevenlabs = bool(self.eleven_voice_id)

        # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RHVoice
        try:
            import importlib.util
            rhvoice_spec = importlib.util.find_spec("rhvoice_wrapper_bin")
            if rhvoice_spec is None:
                logger.warning("–ú–æ–¥—É–ª—å rhvoice_wrapper_bin –Ω–µ –Ω–∞–π–¥–µ–Ω")
                raise ImportError("–ú–æ–¥—É–ª—å rhvoice_wrapper_bin –Ω–µ –Ω–∞–π–¥–µ–Ω")
            import rhvoice_wrapper_bin  # noqa: F401
            from rhvoice_wrapper import RHVoice
            self.rhvoice = RHVoice()
            logger.info("RHVoice TTS —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            try:
                voices = self.rhvoice.get_voices()
                logger.info(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ RHVoice: {voices}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤ RHVoice: {e}")
            try:
                self.rhvoice.set_voice("aleksandr")
                self.use_rhvoice = True
                logger.info("RHVoice –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≥–æ–ª–æ—Å–æ–º Aleksandr")
            except Exception as e1:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å Aleksandr: {e1}")
                try:
                    self.rhvoice.set_voice("anna")
                    self.use_rhvoice = True
                    logger.info("RHVoice –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≥–æ–ª–æ—Å–æ–º Anna")
                except Exception as e2:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å Anna: {e2}")
                    try:
                        self.rhvoice.set_voice("elena")
                        self.use_rhvoice = True
                        logger.info("RHVoice –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≥–æ–ª–æ—Å–æ–º Elena")
                    except Exception as e3:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å Elena: {e3}")
                        logger.warning("–†—É—Å—Å–∫–∏–µ –≥–æ–ª–æ—Å–∞ RHVoice –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        except ImportError as e:
            logger.warning(f"RHVoice –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}, –ø—Ä–æ–±—É–µ–º gTTS")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RHVoice: {e}, –ø—Ä–æ–±—É–µ–º gTTS")
        
        # Fallback –Ω–∞ gTTS
        if not self.use_rhvoice and not self.use_elevenlabs:
            try:
                from gtts import gTTS
                self.use_gtts = True
                logger.info("gTTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ fallback")
            except ImportError:
                logger.error("–ù–∏ RHVoice, –Ω–∏ gTTS –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã!")

    def _collect_eleven_api_keys(self) -> List[str]:
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∫–ª—é—á–∏ ElevenLabs –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: ELEVEN_API, ELEVEN_API_KEY, ELEVEN_API2..ELEVEN_API10
        """
        keys: List[str] = []
        base = os.getenv("ELEVEN_API") or os.getenv("ELEVEN_API_KEY")
        if base:
            keys.append(base.strip())
        for i in range(2, 11):
            val = os.getenv(f"ELEVEN_API{i}")
            if val:
                keys.append(val.strip())
        return keys

    def _load_eleven_settings(self) -> dict:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ElevenLabs –∏–∑ –ø—Ä–µ—Å–µ—Ç–∞/–æ–∫—Ä—É–∂–µ–Ω–∏—è.
        """
        presets = {
            "neutral":   {"stability": 0.6,  "similarity_boost": 0.7,  "style_exaggeration": 0.2, "use_speaker_boost": False},
            "emotional": {"stability": 0.25, "similarity_boost": 0.8,  "style_exaggeration": 0.6, "use_speaker_boost": True},
            "calm":      {"stability": 0.75, "similarity_boost": 0.7,  "style_exaggeration": 0.1, "use_speaker_boost": False},
            "energetic": {"stability": 0.2,  "similarity_boost": 0.85, "style_exaggeration": 0.7, "use_speaker_boost": True}
        }
        settings = presets.get(self.eleven_preset or "", {})

        def _f(name: str, default: float) -> float:
            val = os.getenv(f"ELEVEN_{name.upper()}")
            if val is None:
                return settings.get(name, default)
            try:
                return float(val)
            except Exception:
                return settings.get(name, default)

        return {
            "stability": _f("stability", 0.5),
            "similarity_boost": _f("similarity_boost", 0.75),
            "style_exaggeration": _f("style_exaggeration", 0.3),
            "use_speaker_boost": str(os.getenv("ELEVEN_SPEAKER_BOOST", str(settings.get("use_speaker_boost", True)))).lower() in ("1", "true", "yes")
        }

    def _resolve_eleven_voice_id(self) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç voice_id –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ API.
        """
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try:
            voices_file = Path(__file__).parent.parent.parent / 'data' / 'eleven_voices_ru.json'
            if voices_file.exists():
                with open(voices_file, 'r', encoding='utf-8') as f:
                    voices = json.load(f)
                    if voices:
                        # –í—ã–±–∏—Ä–∞–µ–º –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        for voice in voices:
                            if voice.get('gender') == 'female':
                                voice_id = voice.get('voice_id')
                                if voice_id:
                                    logger.info(f"üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice.get('name')} ({voice_id})")
                                    return voice_id
                        # –ï—Å–ª–∏ –∂–µ–Ω—Å–∫–æ–≥–æ –Ω–µ—Ç, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π
                        voice_id = voices[0].get('voice_id')
                        if voice_id:
                            logger.info(f"üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å: {voices[0].get('name')} ({voice_id})")
                            return voice_id
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤: {e}")
        
        # Fallback: –ø—Ä–æ–±—É–µ–º API
        url = "https://api.elevenlabs.io/v1/voices"
        
        # –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω
        proxies = {}
        
        for key in self.eleven_api_keys:
            headers = {"xi-api-key": key}
            try:
                resp = requests.get(url, headers=headers, timeout=15)
                if resp.ok:
                    data = resp.json()
                    voices = data.get("voices") or []
                    if voices:
                        return voices[0].get("voice_id")
                else:
                    try:
                        txt = resp.text
                    except Exception:
                        txt = ""
                    logger.warning(f"ElevenLabs voices HTTP {resp.status_code}: {txt[:120]}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ElevenLabs voices: {e}")
        return None

    # –£–¥–∞–ª–µ–Ω—ã silero-–º–µ—Ç–æ–¥—ã –∏ —É—Å–∏–ª–∏—Ç–µ–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è

    def _create_elevenlabs_audio(self, text: str, is_action: bool = False) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs TTS.
        """
        if not self.eleven_voice_id:
            return ""
        payload = {
            "text": text,
            "model_id": self.eleven_model_id,
            "voice_settings": {
                "stability": self.eleven_settings.get("stability", 0.5),
                "similarity_boost": self.eleven_settings.get("similarity_boost", 0.75),
                "style_exaggeration": self.eleven_settings.get("style_exaggeration", 0.3),
                "use_speaker_boost": self.eleven_settings.get("use_speaker_boost", True)
            },
            "output_format": self.eleven_output_format,
            "optimize_streaming_latency": 2
        }
        file_id = hash(text + str(is_action)) % 10000
        ext = ".mp3" if "mp3" in self.eleven_output_format else ".wav"
        output_path = self.temp_dir / f"eleven_part_{file_id}{ext}"
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{self.eleven_voice_id}"
        
        # –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω
        proxies = {}
        
        for key in self.eleven_api_keys:
            headers = {"xi-api-key": key, "Content-Type": "application/json"}
            try:
                resp = requests.post(url, headers=headers, data=json.dumps(payload).encode("utf-8"), timeout=60)
                if resp.ok and resp.content:
                    with open(output_path, "wb") as f:
                        f.write(resp.content)
                    logger.info(f"üí¨ ElevenLabs –∞—É–¥–∏–æ: {text[:30]}...")
                    return str(output_path)
                else:
                    logger.warning(f"ElevenLabs –æ—Ç–≤–µ—Ç {resp.status_code}: {resp.text[:120]}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ ElevenLabs ({key[:6]}...): {e}")
        return ""
    
    def _parse_text_with_actions(self, text: str) -> List[Tuple[str, str]]:
        """
        –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç, –≤—ã–¥–µ–ª—è—è –æ–±—ã—á–Ω—É—é —Ä–µ—á—å –∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ *.
        """
        parts = []
        pattern = r'\*([^*]+)\*'
        last_end = 0
        
        for match in re.finditer(pattern, text):
            if match.start() > last_end:
                speech_text = text[last_end:match.start()].strip()
                if speech_text:
                    parts.append((speech_text, 'speech'))
            
            action_text = match.group(1).strip()
            if action_text:
                parts.append((action_text, 'action'))
            
            last_end = match.end()
        
        if last_end < len(text):
            remaining_text = text[last_end:].strip()
            if remaining_text:
                parts.append((remaining_text, 'speech'))
        
        return parts
    
    # –£–¥–∞–ª–µ–Ω silero-–ø—Ä–æ–≤–∞–π–¥–µ—Ä
    
    def _create_rhvoice_audio(self, text: str, is_action: bool = False) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ RHVoice.
        """
        try:
            file_id = hash(text + str(is_action)) % 10000
            output_path = self.temp_dir / f"rhvoice_part_{file_id}.wav"
            
            if is_action:
                # –î–ª—è –¥–µ–π—Å—Ç–≤–∏–π –∏–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—á–∏
                modified_text = f"... {text} ..."
                # –ó–∞–º–µ–¥–ª—è–µ–º —Ä–µ—á—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
                self.rhvoice.set_rate(30)  # –ú–µ–¥–ª–µ–Ω–Ω–µ–µ (0-100)
                self.rhvoice.set_pitch(80)  # –ù–∏–∂–µ —Ç–æ–Ω (0-100)
            else:
                modified_text = text
                # –û–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                self.rhvoice.set_rate(50)  # –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å
                self.rhvoice.set_pitch(100)  # –û–±—ã—á–Ω—ã–π —Ç–æ–Ω
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            self.rhvoice.to_file(modified_text, str(output_path))
            
            logger.info(f"{'üé≠' if is_action else 'üí¨'} RHVoice –∞—É–¥–∏–æ: {text[:30]}...")
            return str(output_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ RHVoice: {e}")
            return ""
    
    def _create_gtts_audio(self, text: str, is_action: bool = False) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ gTTS.
        """
        try:
            from gtts import gTTS
            
            file_id = hash(text + str(is_action)) % 10000
            output_path = self.temp_dir / f"gtts_part_{file_id}.mp3"
            
            if is_action:
                modified_text = f"... {text} ..."
                tts = gTTS(text=modified_text, lang='ru', slow=True, tld='com')
            else:
                tts = gTTS(text=text, lang='ru', slow=False, tld='ru')
            
            tts.save(str(output_path))
            logger.info(f"{'üé≠' if is_action else 'üí¨'} gTTS –∞—É–¥–∏–æ: {text[:30]}...")
            
            return str(output_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ gTTS: {e}")
            return ""
    
    def _combine_audio_files(self, audio_files: List[str], output_path: str):
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª
        if not audio_files:
            logger.error("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è")
            return
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ
        if len(audio_files) == 1 and os.path.exists(audio_files[0]):
            import shutil
            shutil.copy2(audio_files[0], output_path)
            logger.info(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {audio_files[0]} -> {output_path}")
            return
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ pydub
        try:
            combined: Optional[AudioSegment] = None
            for audio_file in audio_files:
                if os.path.exists(audio_file):
                    try:
                        seg = AudioSegment.from_file(audio_file)
                        if combined is None:
                            combined = seg
                        else:
                            combined += AudioSegment.silent(duration=500)
                            combined += seg
                    except Exception as e:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª {audio_file}: {e}")
            if combined is None:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª")
            combined.export(output_path, format=os.path.splitext(output_path)[1].lstrip('.') or 'mp3')
            logger.info(f"–ê—É–¥–∏–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ pydub: {output_path}")
            for audio_file in audio_files:
                try:
                    os.remove(audio_file)
                except Exception:
                    pass
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ: {e}")
            if audio_files and os.path.exists(audio_files[0]):
                import shutil
                shutil.copy2(audio_files[0], output_path)
                logger.info(f"Fallback: —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª {audio_files[0]}")
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∞—É–¥–∏–æ –∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def text_to_speech(self, text: str, output_path: Optional[str] = None) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–µ–π—Å—Ç–≤–∏–π –≤ *.
        """
        if not self.use_rhvoice and not (self.use_elevenlabs or self.use_gtts):
            raise ValueError("TTS –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not output_path:
            ext = ".wav" if self.use_rhvoice else ".mp3"
            output_path = self.temp_dir / f"chatumba_tts_{hash(text) % 10000}{ext}"
        
        logger.info(f"üé§ –°–û–ó–î–ê–ï–ú TTS –î–õ–Ø: {text[:50]}...")
        engine_name = "RHVoice" if self.use_rhvoice else "gTTS"
        print(f"üé§ TTS ({engine_name}): {text[:50]}...")
        
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
        parts = self._parse_text_with_actions(text)
        
        logger.info(f"üìù –ù–ê–ô–î–ï–ù–û –ß–ê–°–¢–ï–ô: {len(parts)}")
        for i, (part_text, part_type) in enumerate(parts):
            logger.info(f"  {i+1}. {part_type}: {part_text[:30]}...")
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ —á–∞—Å—Ç—å –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏–π, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∞—É–¥–∏–æ
        if len(parts) == 1 and parts[0][1] == 'speech':
            if self.use_elevenlabs:
                audio_path = self._create_elevenlabs_audio(parts[0][0], False)
            elif self.use_rhvoice:
                audio_path = self._create_rhvoice_audio(parts[0][0], False)
            else:
                audio_path = self._create_gtts_audio(parts[0][0], False)
            
            if audio_path and os.path.exists(audio_path):
                import shutil
                shutil.move(audio_path, str(output_path))
            logger.info(f"‚úÖ –ü–†–û–°–¢–û–ï –ê–£–î–ò–û: {output_path}")
            return str(output_path)
        
        # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏
        temp_files = []
        
        for i, (part_text, part_type) in enumerate(parts):
            is_action = (part_type == 'action')
            
            if self.use_elevenlabs:
                audio_path = self._create_elevenlabs_audio(part_text, is_action)
            elif self.use_rhvoice:
                audio_path = self._create_rhvoice_audio(part_text, is_action)
            else:
                audio_path = self._create_gtts_audio(part_text, is_action)
            
            if audio_path:
                temp_files.append(audio_path)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
        if temp_files:
            self._combine_audio_files(temp_files, str(output_path))
            logger.info(f"‚úÖ –ú–ù–û–ì–û–°–õ–û–ô–ù–û–ï –ê–£–î–ò–û: {output_path}")
        else:
            logger.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –°–û–ó–î–ê–¢–¨ –ê–£–î–ò–û –ß–ê–°–¢–ò")
        
        return str(output_path)

    def _create_elevenlabs_audio_custom(
        self,
        text: str,
        *,
        voice_id: Optional[str] = None,
        model_id: Optional[str] = None,
        output_format: Optional[str] = None,
        stability: Optional[float] = None,
        similarity_boost: Optional[float] = None,
        style_exaggeration: Optional[float] = None,
        use_speaker_boost: Optional[bool] = None,
    ) -> str:
        if not (self.use_elevenlabs and (voice_id or self.eleven_voice_id)):
            return ""
        vid = voice_id or self.eleven_voice_id
        mid = model_id or self.eleven_model_id
        fmt = output_format or self.eleven_output_format
        settings = {
            "stability": self.eleven_settings.get("stability", 0.5) if stability is None else stability,
            "similarity_boost": self.eleven_settings.get("similarity_boost", 0.75) if similarity_boost is None else similarity_boost,
            "style_exaggeration": self.eleven_settings.get("style_exaggeration", 0.3) if style_exaggeration is None else style_exaggeration,
            "use_speaker_boost": self.eleven_settings.get("use_speaker_boost", True) if use_speaker_boost is None else use_speaker_boost,
        }
        payload = {
            "text": text,
            "model_id": mid,
            "voice_settings": settings,
            "output_format": fmt,
            "optimize_streaming_latency": 2,
        }
        file_id = hash((text, vid, mid, fmt)) % 100000
        ext = ".mp3" if "mp3" in fmt else ".wav"
        output_path = self.temp_dir / f"eleven_custom_{file_id}{ext}"
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{vid}"
        for key in self.eleven_api_keys:
            headers = {"xi-api-key": key, "Content-Type": "application/json"}
            try:
                resp = requests.post(url, headers=headers, data=json.dumps(payload).encode("utf-8"), timeout=60)
                if resp.ok and resp.content:
                    with open(output_path, "wb") as f:
                        f.write(resp.content)
                    logger.info(f"üí¨ ElevenLabs –∞—É–¥–∏–æ (custom): {text[:30]}...")
                    return str(output_path)
                else:
                    logger.warning(f"ElevenLabs –æ—Ç–≤–µ—Ç {resp.status_code}: {resp.text[:120]}")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ ElevenLabs ({key[:6]}...): {e}")
        return ""

    def text_to_speech_with_params(self, text: str, params: Optional[dict] = None, output_path: Optional[str] = None) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å —Å –ø–µ—Ä-–≤—ã–∑–æ–≤–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏—è–º–∏/–≥–æ–ª–æ—Å–æ–º).
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–ª—é—á–∏ params: voice_id, model_id, output_format,
        stability, similarity_boost, style_exaggeration, use_speaker_boost.
        """
        params = params or {}
        provider = params.get("provider", "")
        
        # –ï—Å–ª–∏ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω ElevenLabs
        if provider == "elevenlabs" and self.use_elevenlabs:
            # –ú–∞–ø–ø–∏–Ω–≥ voice_id –ø–æ –ø–æ–ª—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —è–≤–Ω–æ–≥–æ voice_id
            voice_id = params.get("voice_id")
            voice = params.get("voice") or {}
            if not voice_id and isinstance(voice, dict):
                mapped = self._map_voice_id_by_gender(voice)
                if mapped:
                    voice_id = mapped

            audio_path = self._create_elevenlabs_audio_custom(
                text,
                voice_id=voice_id,
                model_id=params.get("model_id"),
                output_format=params.get("output_format"),
                stability=params.get("stability"),
                similarity_boost=params.get("similarity_boost"),
                style_exaggeration=params.get("style_exaggeration"),
                use_speaker_boost=params.get("use_speaker_boost"),
            )
            if audio_path:
                return audio_path
        
        # –Ø–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä silero –±–æ–ª–µ–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if provider == "silero":
            logger.warning("Silero TTS —É–¥–∞–ª–µ–Ω –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π fallback")
        
        # –§–æ–ª–±—ç–∫ –Ω–∞ –∏–º–µ—é—â–∏–µ—Å—è –¥–≤–∏–∂–∫–∏
        return self.text_to_speech(text, output_path)

    def _map_voice_id_by_gender(self, voice: dict) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç voice_id –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ –ø–æ–ª—É: ELEVEN_VOICE_ID_FEMALE / ELEVEN_VOICE_ID_MALE,
        –∏–Ω–∞—á–µ ELEVEN_VOICE_ID. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî None.
        """
        gender = str(voice.get("gender", "")).lower()
        # 1) –ü—Ä–æ–±—É–µ–º –∏–∑ .env
        if gender == "female":
            vid = os.getenv("ELEVEN_VOICE_ID_FEMALE") or os.getenv("ELEVEN_VOICE_ID")
            if vid:
                return vid
        if gender == "male":
            vid = os.getenv("ELEVEN_VOICE_ID_MALE") or os.getenv("ELEVEN_VOICE_ID")
            if vid:
                return vid
        env_vid = os.getenv("ELEVEN_VOICE_ID")
        if env_vid:
            return env_vid
        # 2) –ü—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞ voices (data/eleven_voices_ru.json)
        try:
            from pathlib import Path
            voices_path = Path(__file__).resolve().parents[2] / 'data' / 'eleven_voices_ru.json'
            if voices_path.exists():
                import json as _json
                data = _json.loads(voices_path.read_text(encoding='utf-8'))
                # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–ª—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö name/labels, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                def is_match(v: dict) -> bool:
                    nm = (v.get('name') or '').lower()
                    if gender == 'female':
                        return any(k in nm for k in ['female','woman','–∂–µ–Ω', 'anna','dariya','tatyana'])
                    if gender == 'male':
                        return any(k in nm for k in ['male','man','–º—É–∂','alex','sergey','dmitry'])
                    return True
                for v in data:
                    if is_match(v):
                        vid = v.get('voice_id') or v.get('voiceID')
                        if vid:
                            return vid
        except Exception:
            pass
        return None