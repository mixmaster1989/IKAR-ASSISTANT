"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç (Speech-to-Text).
"""
import os
import logging
from typing import Optional
from pathlib import Path

logger = logging.getLogger("chatumba.stt")

class SpeechToText:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç STT –¥–≤–∏–∂–æ–∫.
        """
        self.use_speech_recognition = True
        
        try:
            import speech_recognition as sr
            self.recognizer = sr.Recognizer()
            logger.info("SpeechRecognition –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except ImportError:
            logger.error("SpeechRecognition –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install SpeechRecognition")
            self.use_speech_recognition = False
    
    def _convert_to_wav(self, input_path: str) -> Optional[str]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –≤ WAV —á–µ—Ä–µ–∑ librosa.
        
        Args:
            input_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
            
        Returns:
            –ü—É—Ç—å –∫ WAV —Ñ–∞–π–ª—É –∏–ª–∏ None
        """
        try:
            import librosa
            import soundfile as sf
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É temp –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            temp_dir = Path(__file__).parent.parent.parent / "temp"
            temp_dir.mkdir(exist_ok=True)
            
            logger.info(f"üîÑ –ö–û–ù–í–ï–†–¢–ò–†–£–ï–ú –í WAV: {input_path}")
            print(f"üîÑ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø: {os.path.basename(input_path)} -> WAV")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
            audio_data, sample_rate = librosa.load(input_path, sr=16000)  # 16kHz –¥–ª—è STT
            
            # –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è WAV —Ñ–∞–π–ª–∞
            wav_path = temp_dir / "voice_temp.wav"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ WAV
            sf.write(str(wav_path), audio_data, sample_rate)
            
            logger.info(f"‚úÖ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê: {wav_path}")
            print(f"‚úÖ –°–û–ó–î–ê–ù WAV: {wav_path.name}")
            
            return str(wav_path)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            print(f"‚ùå –û–®–ò–ë–ö–ê –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò: {e}")
            return None
    
    def speech_to_text(self, audio_path: str) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç.
        
        Args:
            audio_path: –ü—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
            
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        if not self.use_speech_recognition:
            return "STT –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        wav_path = None
        
        try:
            import speech_recognition as sr
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(audio_path):
                logger.error(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
                return ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(audio_path)
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª: {audio_path} (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
            
            if file_size == 0:
                logger.error("–ê—É–¥–∏–æ—Ñ–∞–π–ª –ø—É—Å—Ç–æ–π")
                return ""
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ WAV –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if not audio_path.lower().endswith('.wav'):
                wav_path = self._convert_to_wav(audio_path)
                if not wav_path:
                    return ""
                process_path = wav_path
            else:
                process_path = audio_path
            
            logger.info(f"üé§ –ó–ê–ü–£–°–ö–ê–ï–ú SPEECH RECOGNITION: {process_path}")
            print(f"üé§ –†–ê–°–ü–û–ó–ù–ê–ï–ú –†–ï–ß–¨: {os.path.basename(process_path)}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª
            with sr.AudioFile(process_path) as source:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞—É–¥–∏–æ
                audio = self.recognizer.record(source)
                
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å —á–µ—Ä–µ–∑ Google API (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
                text = self.recognizer.recognize_google(audio, language='ru-RU')
                
                logger.info(f"‚úÖ –†–ê–°–ü–û–ó–ù–ê–ù–ù–´–ô –¢–ï–ö–°–¢: {text}")
                print(f"üó£Ô∏è –†–ê–°–ü–û–ó–ù–ê–ù–û: {text}")
                return text
            
        except sr.UnknownValueError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å")
            print("ü§∑‚Äç‚ôÇÔ∏è –ù–ï –£–î–ê–õ–û–°–¨ –†–ê–°–ü–û–ó–ù–ê–¢–¨")
            return ""
        except sr.RequestError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
            print(f"‚ùå –û–®–ò–ë–ö–ê –°–ï–†–í–ò–°–ê: {e}")
            return ""
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –†–ê–°–ü–û–ó–ù–ê–í–ê–ù–ò–ò –†–ï–ß–ò: {e}")
            print(f"‚ùå –û–®–ò–ë–ö–ê STT: {e}")
            return ""
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π WAV —Ñ–∞–π–ª
            if wav_path and os.path.exists(wav_path):
                try:
                    os.remove(wav_path)
                    logger.info(f"üóëÔ∏è –£–î–ê–õ–ï–ù –í–†–ï–ú–ï–ù–ù–´–ô WAV: {wav_path}")
                except:
                    pass
    
    async def process_voice_message(self, file_path: str) -> str:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
        
        Args:
            file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        """
        try:
            logger.info(f"üé§ –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ì–û–õ–û–°–û–í–û–ì–û –§–ê–ô–õ–ê: {file_path}")
            print(f"üé§ –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–ú –ì–û–õ–û–°: {os.path.basename(file_path)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
            if not os.path.exists(file_path):
                logger.error(f"‚ùå –§–ê–ô–õ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: {file_path}")
                print(f"‚ùå –§–ê–ô–õ –ù–ï –ù–ê–ô–î–ï–ù: {file_path}")
                return ""
            
            # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ä–µ—á—å
            text = self.speech_to_text(file_path)
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï –ì–û–õ–û–°–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø: {e}")
            print(f"‚ùå –û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ì–û–õ–û–°–ê: {e}")
            return ""