"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥—É–ª—è core.
"""
import random
import re
import logging
from typing import Dict, List, Optional, Union, Any
from datetime import datetime, timedelta

logger = logging.getLogger("chatumba.utils")

def estimate_sentiment(text: str) -> float:
    """
    –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        
    Returns:
        –û—Ü–µ–Ω–∫–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç -1.0 (–Ω–µ–≥–∞—Ç–∏–≤–Ω–∞—è) –¥–æ 1.0 (–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è)
    """
    # –ü—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
    positive_words = [
        '—Ö–æ—Ä–æ—à', '–æ—Ç–ª–∏—á–Ω–æ', '–∫—Ä—É—Ç–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ',
        '—Ä–∞–¥', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ª—é–±–ª—é', '–Ω—Ä–∞–≤–∏—Ç—Å—è', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä', '–º–æ–ª–æ–¥–µ—Ü',
        '–ø—Ä–∏—è—Ç–Ω–æ', '–≤–µ—Å–µ–ª–æ', '—Å–º–µ—à–Ω–æ', '—É–ª—ã–±–∫', '–¥–æ–±—Ä', '–ø–æ–º–æ–≥', '—É—Å–ø–µ—Ö'
    ]
    
    negative_words = [
        '–ø–ª–æ—Ö', '—É–∂–∞—Å', '–æ—Ç—Å—Ç–æ–π', '–¥–µ—Ä—å–º–æ', '–≥–æ–≤–Ω–æ', '—Ö—É–π', '–ø–∏–∑–¥', '–±–ª—è', '–Ω–∞—Ö—É–π',
        '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–µ—á–∞–ª—å', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–∑–ª–æ–π', '–∑–ª—é—Å—å', '—Ä–∞–∑–¥—Ä–∞–∂', '—É—Å—Ç–∞–ª',
        '—Å–∫—É—á–Ω–æ', '–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ', '–æ–±–∏–¥–Ω–æ', '—Ç—É–ø–æ–π', '–≥–ª—É–ø—ã–π', '–∏–¥–∏–æ—Ç', '–¥–µ–±–∏–ª'
    ]
    
    # –ü—Ä–∏–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    text = text.lower()
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤
    positive_count = sum(1 for word in positive_words if word in text)
    negative_count = sum(1 for word in negative_words if word in text)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö, –Ω–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
    if positive_count == 0 and negative_count == 0:
        return 0.0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    total = positive_count + negative_count
    sentiment = (positive_count - negative_count) / total
    
    return sentiment

def should_remember(text: str, importance_threshold: float = 0.7) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–ø–æ–º–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    
    Args:
        text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        importance_threshold: –ü–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏ (0.0 - 1.0)
        
    Returns:
        True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –∑–∞–ø–æ–º–Ω–∏—Ç—å, –∏–Ω–∞—á–µ False
    """
    # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)
    length_score = min(len(text) / 500, 1.0)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 1.0
    
    # –ù–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ (–≤–æ–ø—Ä–æ—Å—ã —á–∞—Å—Ç–æ –≤–∞–∂–Ω—ã)
    question_score = 0.5 if '?' in text else 0.0
    
    # –ù–∞–ª–∏—á–∏–µ –∏–º–µ–Ω —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö (—á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)
    proper_nouns_score = 0.3 if re.search(r'[–ê-–Ø][–∞-—è]+', text) else 0.0
    
    # –ù–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª (—á–∞—Å—Ç–æ —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ñ–∞–∫—Ç—ã)
    numbers_score = 0.2 if re.search(r'\d+', text) else 0.0
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –≤–∞–∂–Ω–æ—Å—Ç–∏
    importance_score = (length_score * 0.4 + 
                       question_score * 0.3 + 
                       proper_nouns_score * 0.2 + 
                       numbers_score * 0.1)
    
    return importance_score >= importance_threshold

def generate_response_delay() -> float:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
    
    Returns:
        –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç 1 –¥–æ 3 —Å–µ–∫—É–Ω–¥
    base_delay = random.uniform(1.0, 3.0)
    
    # –° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 10% –¥–æ–±–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É (5-15 —Å–µ–∫—É–Ω–¥)
    if random.random() < 0.1:
        return base_delay + random.uniform(5.0, 15.0)
    
    return base_delay

def get_random_emoji() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏.
    
    Returns:
        –°–ª—É—á–∞–π–Ω—ã–π —ç–º–æ–¥–∑–∏
    """
    emojis = [
        "üòÄ", "üòÉ", "üòÑ", "üòÅ", "üòÜ", "üòÖ", "ü§£", "üòÇ", "üôÇ", "üôÉ",
        "üòâ", "üòä", "üòá", "ü•∞", "üòç", "ü§©", "üòò", "üòó", "üòö", "üòô",
        "üòã", "üòõ", "üòú", "ü§™", "üòù", "ü§ë", "ü§ó", "ü§≠", "ü§´", "ü§î",
        "ü§ê", "ü§®", "üòê", "üòë", "üò∂", "üòè", "üòí", "üôÑ", "üò¨", "ü§•",
        "üòî", "üòï", "üôÅ", "‚òπÔ∏è", "üò£", "üòñ", "üò´", "üò©", "ü•∫", "üò¢",
        "üò≠", "üò§", "üò†", "üò°", "ü§¨", "ü§Ø", "üò≥", "ü•µ", "ü•∂", "üò±",
        "üò®", "üò∞", "üò•", "üòì", "ü§ó", "ü§î", "ü§≠", "ü§´", "ü§•", "üò∂",
        "üòê", "üòë", "üò¨", "üôÑ", "üòØ", "üò¶", "üòß", "üòÆ", "üò≤", "ü•±",
        "üò¥", "ü§§", "üò™", "üòµ", "ü§ê", "ü•¥", "ü§¢", "ü§Æ", "ü§ß", "üò∑",
        "ü§í", "ü§ï", "ü§ë", "ü§†", "üòà", "üëø", "üëπ", "üë∫", "ü§°", "üí©"
    ]
    return random.choice(emojis)

def get_random_word() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ.
    
    Returns:
        –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ
    """
    words = [
        "—Ö–º–º", "–±–ª–∏–Ω", "–∫–æ—Ä–æ—á–µ", "—Ç–∏–ø–∞", "–≤–æ–æ–±—â–µ", "–ø—Ä–∏–∫–æ–ª", "–∂–µ—Å—Ç—å", "–∫–∞–ø–µ—Ü",
        "–æ—Ñ–∏–≥–µ—Ç—å", "–ø–∏–∑–¥–µ—Ü", "–æ—Ö—É–µ—Ç—å", "–±–ª—è", "–Ω–∞—Ö—É–π", "—Ö—É–π–Ω—è", "–≥–æ–≤–Ω–æ", "–¥–µ—Ä—å–º–æ",
        "–æ—Ç—Å—Ç–æ–π", "–∫—Ä—É—Ç–æ", "–∫–ª–∞—Å—Å", "—Å—É–ø–µ—Ä", "–Ω–æ—Ä–º", "–æ–∫–µ–π", "–ª–∞–¥–Ω–æ", "–ø–æ–Ω—è—Ç–Ω–æ",
        "–∞–≥–∞", "—É–≥—É", "–Ω–µ", "–¥–∞", "–º–æ–∂–µ—Ç", "–Ω–∞–≤–µ—Ä–Ω–æ–µ", "–≤–æ–∑–º–æ–∂–Ω–æ", "—Ç–æ—á–Ω–æ",
        "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ", "–∞–±—Å–æ–ª—é—Ç–Ω–æ", "–ø–æ–ª–Ω–æ—Å—Ç—å—é", "—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ", "–∫—Å—Ç–∞—Ç–∏", "–≤–ø—Ä–æ—á–µ–º",
        "–æ–¥–Ω–∞–∫–æ", "–∑–∞—Ç–æ", "–ø—Ä–∞–≤–¥–∞", "—á–µ—Å—Ç–Ω–æ", "—Å–µ—Ä—å–µ–∑–Ω–æ", "—Ä–µ–∞–ª—å–Ω–æ", "–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ"
    ]
    return random.choice(words)