"""
–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM –æ—Ç–≤–µ—Ç–∞–º–∏.
–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –∏–∑ MemoryRewriter –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö.
"""

import json
import re
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)


def robust_json_parser(response: str) -> List[Dict[str, Any]]:
    """
    –ù–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Å–µ—Ä JSON, –∫–æ—Ç–æ—Ä—ã–π —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å –ª—é–±—ã–º–∏ –≤—ã–∫—Ä—É—Ç–∞—Å–∞–º–∏ LLM
    
    Args:
        response: –û—Ç–≤–µ—Ç –æ—Ç LLM, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π JSON
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö JSON –æ–±—ä–µ–∫—Ç–æ–≤
    """
    # 1. –û—á–∏—â–∞–µ–º –æ—Ç markdown —Ä–∞–∑–º–µ—Ç–∫–∏
    cleaned = response.strip()
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å SPEAK! / IMAGE! –∏ –ø—Ä–æ—á–∏–µ –º–∞—Ä–∫–µ—Ä—ã –ø–µ—Ä–µ–¥ JSON
    cleaned = re.sub(r'^(SPEAK!|IMAGE!)\s*', "", cleaned, flags=re.IGNORECASE)
    if cleaned.startswith("```json"):
        cleaned = cleaned[7:]
    elif cleaned.startswith("```"):
        cleaned = cleaned[3:]
    if cleaned.endswith("```"):
        cleaned = cleaned[:-3]
    cleaned = cleaned.strip()
    
    # 2. –ò—â–µ–º JSON –æ–±—ä–µ–∫—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
    json_objects = []

    # First attempt: JSON surgeon (handles trailing commas, unquoted keys, etc.)
    try:
        from .json_surgeon import parse_all_json as _surgeon_parse_all  # type: ignore
        items = _surgeon_parse_all(cleaned)
        for it in items:
            if isinstance(it, dict):
                json_objects.append(it)
        if json_objects:
            return json_objects
    except Exception:
        pass
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ JSON –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å—é
    pattern = r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}'
    matches = re.findall(pattern, cleaned, re.DOTALL)
    
    for match in matches:
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            fixed_json = fix_json_strings(match)
            obj = json.loads(fixed_json)
            json_objects.append(obj)
        except:
            continue
    
    # 3. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ JSON –æ–±—ä–µ–∫—Ç—ã, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ regex
    if not json_objects:
        json_objects = extract_entities_via_regex(cleaned)
    
    return json_objects


def fix_json_strings(json_str: str) -> str:
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ JSON
    
    Args:
        json_str: JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        
    Returns:
        str: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è JSON —Å—Ç—Ä–æ–∫–∞
    """
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ context
    pattern = r'"context":\s*"([^"]*?)(?:"|$)'
    def fix_context(match):
        context = match.group(1)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
        context = context.replace('"', '\\"')
        return f'"context": "{context}"'
    
    fixed = re.sub(pattern, fix_context, json_str)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ name
    pattern = r'"name":\s*"([^"]*?)(?:"|$)'
    def fix_name(match):
        name = match.group(1)
        name = name.replace('"', '\\"')
        return f'"name": "{name}"'
    
    fixed = re.sub(pattern, fix_name, fixed)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ type
    pattern = r'"type":\s*"([^"]*?)(?:"|$)'
    def fix_type(match):
        type_val = match.group(1)
        type_val = type_val.replace('"', '\\"')
        return f'"type": "{type_val}"'
    
    fixed = re.sub(pattern, fix_type, fixed)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ description (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    pattern = r'"description":\s*"([^"]*?)(?:"|$)'
    def fix_description(match):
        description = match.group(1)
        description = description.replace('"', '\\"')
        return f'"description": "{description}"'
    
    fixed = re.sub(pattern, fix_description, fixed)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ theme (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    pattern = r'"theme":\s*"([^"]*?)(?:"|$)'
    def fix_theme(match):
        theme = match.group(1)
        theme = theme.replace('"', '\\"')
        return f'"theme": "{theme}"'
    
    fixed = re.sub(pattern, fix_theme, fixed)
    
    return fixed


def extract_entities_via_regex(text: str) -> List[Dict[str, Any]]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—É—â–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        
    Returns:
        List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    """
    entities = []
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "name": "value", "description": "value"
    name_pattern = r'"name":\s*"([^"]+)"'
    type_pattern = r'"type":\s*"([^"]+)"'
    confidence_pattern = r'"confidence":\s*([0-9.]+)'
    context_pattern = r'"context":\s*"([^"]*)"'
    description_pattern = r'"description":\s*"([^"]*)"'
    theme_pattern = r'"theme":\s*"([^"]*)"'
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –∏—â–µ–º –æ–±—ä–µ–∫—Ç—ã
    lines = text.split('\n')
    current_entity = {}
    
    for line in lines:
        line = line.strip()
        
        # –ò—â–µ–º name
        name_match = re.search(name_pattern, line)
        if name_match:
            if current_entity:
                entities.append(current_entity)
            current_entity = {"name": name_match.group(1)}
        
        # –ò—â–µ–º type
        type_match = re.search(type_pattern, line)
        if type_match and current_entity:
            current_entity["type"] = type_match.group(1)
        
        # –ò—â–µ–º confidence
        conf_match = re.search(confidence_pattern, line)
        if conf_match and current_entity:
            current_entity["confidence"] = float(conf_match.group(1))
        
        # –ò—â–µ–º context
        context_match = re.search(context_pattern, line)
        if context_match and current_entity:
            current_entity["context"] = context_match.group(1)
        
        # –ò—â–µ–º description (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        desc_match = re.search(description_pattern, line)
        if desc_match and current_entity:
            current_entity["description"] = desc_match.group(1)
        
        # –ò—â–µ–º theme (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
        theme_match = re.search(theme_pattern, line)
        if theme_match and current_entity:
            current_entity["theme"] = theme_match.group(1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ–±—ä–µ–∫—Ç
    if current_entity:
        entities.append(current_entity)
    
    return entities


def parse_image_json(response_text: str) -> Dict[str, Any]:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è JSON —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    
    Args:
        response_text: –û—Ç–≤–µ—Ç –æ—Ç LLM —Å JSON –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        Dict[str, Any]: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –ø—É—Å—Ç–æ–π dict
    """
    try:
        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º JSON —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º IMAGE! (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
        image_pattern = r'IMAGE!\s*(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
        match = re.search(image_pattern, response_text, re.IGNORECASE | re.DOTALL)
        
        if not match:
            # 2. Fallback: –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ–π JSON —Å IMAGE!
            simple_pattern = r'IMAGE!\s*(\{[^}]+\})'
            match = re.search(simple_pattern, response_text, re.IGNORECASE)
            
        if not match:
            # 3. –ù–û–í–´–ô: –∏—â–µ–º JSON –≤ markdown –±–ª–æ–∫–∞—Ö (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ IMAGE!)
            markdown_pattern = r'```json\s*(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(markdown_pattern, response_text, re.IGNORECASE | re.DOTALL)
            
        if not match:
            # 4. Fallback: –∏—â–µ–º –ª—é–±–æ–π JSON –±–ª–æ–∫ –≤ markdown
            any_markdown_pattern = r'```\s*(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(any_markdown_pattern, response_text, re.IGNORECASE | re.DOTALL)
            
        if not match:
            # 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å: –∏—â–µ–º JSON –±–µ–∑ markdown
            json_pattern = r'(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(json_pattern, response_text, re.IGNORECASE | re.DOTALL)
            
        if not match:
            logger.warning("üé® JSON –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return {}
        
        json_str = match.group(1)
        logger.info(f"üé® –ù–∞–π–¥–µ–Ω JSON –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {json_str[:100]}...")
        
        # –û—á–∏—â–∞–µ–º JSON –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        json_str = json_str.strip()
        # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if json_str.startswith('```json'):
            json_str = json_str[7:]
        elif json_str.startswith('```'):
            json_str = json_str[3:]
        if json_str.endswith('```'):
            json_str = json_str[:-3]
        json_str = json_str.strip()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä
        json_objects = robust_json_parser(json_str)
        
        if json_objects and len(json_objects) > 0:
            return json_objects[0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
        
        return {}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return {} 


def parse_speak_json(response_text: str) -> Dict[str, Any]:
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è JSON —Å –æ–∑–≤—É—á–∫–æ–π (SPEAK!).
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ –∂–µ —Ö–∏—Ç—Ä–æ—Å—Ç–∏ —á—Ç–æ –∏ parse_image_json –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    """
    try:
        import re
        # 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ–π JSON —Å SPEAK! (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
        simple_pattern = r'SPEAK!\s*(\{.*\})'
        match = re.search(simple_pattern, response_text, re.IGNORECASE | re.DOTALL)
        
        if not match:
            # 2. Fallback: –∏—â–µ–º —Å–ª–æ–∂–Ω—ã–π JSON —Å SPEAK!
            speak_pattern = r'SPEAK!\s*(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(speak_pattern, response_text, re.IGNORECASE | re.DOTALL)
            
        if not match:
            # 3. –ù–û–í–´–ô: –∏—â–µ–º JSON –≤ markdown –±–ª–æ–∫–∞—Ö (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ SPEAK!)
            markdown_pattern = r'```json\s*(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(markdown_pattern, response_text, re.IGNORECASE | re.DOTALL)
            
        if not match:
            # 4. Fallback: –∏—â–µ–º –ª—é–±–æ–π JSON –±–ª–æ–∫ –≤ markdown
            any_markdown_pattern = r'```\s*(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(any_markdown_pattern, response_text, re.IGNORECASE | re.DOTALL)
            
        if not match:
            # 5. –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å: –∏—â–µ–º JSON –±–µ–∑ markdown
            json_pattern = r'(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(json_pattern, response_text, re.IGNORECASE | re.DOTALL)
            
        if not match:
            logger.warning("üé§ JSON –¥–ª—è –æ–∑–≤—É—á–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
            return {}
        
        json_str = match.group(1)
        logger.info(f"üé§ –ù–∞–π–¥–µ–Ω JSON –¥–ª—è –æ–∑–≤—É—á–∫–∏: {json_str[:100]}...")
        
        # –û—á–∏—â–∞–µ–º JSON –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–∫–∞–∫ –≤ parse_image_json)
        json_str = json_str.strip()
        # –£–±–∏—Ä–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if json_str.startswith('```json'):
            json_str = json_str[7:]
        elif json_str.startswith('```'):
            json_str = json_str[3:]
        if json_str.endswith('```'):
            json_str = json_str[:-3]
        json_str = json_str.strip()
        
        # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON –ø–∞—Ä—Å–µ—Ä
        try:
            import json
            import re
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º JSON –±–æ–ª–µ–µ —Ä–∞–¥–∏–∫–∞–ª—å–Ω–æ
            fixed_json = json_str.replace('\n', '\\n').replace('\r', '\\r')
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Ç–µ–∫—Å—Ç–µ
            fixed_json = re.sub(r'"text":\s*"([^"]*?)"', lambda m: f'"text": "{m.group(1).replace("  ", " ")}"', fixed_json)
            result = json.loads(fixed_json)
            # –§–ò–õ–¨–¢–†: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º JSON, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —è–≤–Ω—ã—Ö –ø–æ–ª–µ–π TTS
            if isinstance(result, dict) and ("emotion_video" in result) and not any(k in result for k in ("text", "tts", "voice")):
                logger.info("üé§ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º JSON —Å emotion_video –¥–ª—è SPEAK! (–Ω–µ—Ç –ø–æ–ª–µ–π text/tts/voice)")
                return {}
            logger.info(f"üé§ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {list(result.keys())}")
            return result
        except Exception as e:
            logger.warning(f"üé§ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JSON –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        
        # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä
        json_objects = robust_json_parser(json_str)
        
        if json_objects and len(json_objects) > 0:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
            result = json_objects[0]
            logger.info(f"üé§ –ö—Ä—É—Ç–æ–π –ø–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª: {list(result.keys())}")
            # –§–ò–õ–¨–¢–†: –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –≤–∏–¥–µ–æ-only JSON
            if isinstance(result, dict) and ("emotion_video" in result) and not any(k in result for k in ("text", "tts", "voice")):
                logger.info("üé§ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º JSON —Å emotion_video –¥–ª—è SPEAK! (fallback)")
                return {}
            
            # –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ voice, –Ω–æ –Ω–µ—Ç tts, —Å–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if "voice" in result and "tts" not in result:
                logger.info("üé§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É tts –∏–∑ voice")
                return {
                    "text": result.get("text", ""),
                    "tts": {
                        "provider": "elevenlabs",
                        "voice": result,
                        "model_id": "eleven_multilingual_v2",
                        "output_format": "mp3_44100_128",
                        "stability": 0.5,
                        "similarity_boost": 0.75,
                        "style": "emotional",
                        "use_speaker_boost": True
                    }
                }
            
            return result
        
        logger.warning("üé§ –í—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        return {}
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ–∑–≤—É—á–∫–∏: {e}")
        return {}


def _extract_first_balanced_json(text: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç {...} –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å —É—á—ë—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∫–æ–±–æ–∫
    –∏ —Å—Ç—Ä–æ–∫ –≤ –∫–∞–≤—ã—á–∫–∞—Ö. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –º—É—Å–æ—Ä –ø–æ—Å–ª–µ –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–æ–π –∂–µ —Å—Ç—Ä–æ–∫–µ/–±–ª–æ–∫–µ.
    """
    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—É—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Ñ–∏–≥—É—Ä–Ω—É—é —Å–∫–æ–±–∫—É
    try:
        start = text.find('{')
        if start == -1:
            return ""

        depth = 0
        in_string = False
        escape = False
        for i in range(start, len(text)):
            ch = text[i]
            if in_string:
                if escape:
                    escape = False
                elif ch == '\\':
                    escape = True
                elif ch == '"':
                    in_string = False
                continue
            else:
                if ch == '"':
                    in_string = True
                    continue
                if ch == '{':
                    depth += 1
                elif ch == '}':
                    depth -= 1
                    if depth == 0:
                        return text[start:i+1]
        return ""
    except Exception:
        return ""
