#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞
"""

import time
import json
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.memory_injector import get_memory_injector
from core.collective_mind import CollectiveMind
from config import Config


class MemoryMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.config = Config()
        self.memory_injector = get_memory_injector()
        self.collective_mind = CollectiveMind(self.config)
        
    async def analyze_prompt_injection(self, prompt: str, context: str = "", user_id: str = None) -> Dict[str, Any]:
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≥–æ —á—Ç–æ –±—É–¥–µ—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ò–ù–ñ–ï–ö–¶–ò–ò –ü–ê–ú–Ø–¢–ò")
        print(f"üìù –ü—Ä–æ–º–ø—Ç: {prompt[:100]}...")
        print(f"üë§ User ID: {user_id}")
        print(f"üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context[:50]}..." if context else "üìÑ –ö–æ–Ω—Ç–µ–∫—Å—Ç: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –±—É–¥–µ—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
        memory_analysis = await self.memory_injector.analyze_memory_usage(prompt)
        
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –ü–û–¢–ï–ù–¶–ò–ê–õ–ê –ü–ê–ú–Ø–¢–ò:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ: {memory_analysis.get('total_available', 0)} —á–∞–Ω–∫–æ–≤")
        print(f"  ‚Ä¢ –¢–æ–ø —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {memory_analysis.get('top_relevance', 0):.3f}")
        print(f"  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞–º—è—Ç–∏: {memory_analysis.get('memory_efficiency', 0):.1%}")
        
        if memory_analysis.get('total_available', 0) > 0:
            # –î–µ–ª–∞–µ–º –∏–Ω–∂–µ–∫—Ü–∏—é –∏ —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
            enhanced_prompt = await self.memory_injector.inject_memory_into_prompt(
                prompt, context, user_id, memory_budget=3000
            )
            
            print(f"\nüíâ –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–ñ–ï–ö–¶–ò–ò:")
            original_tokens = len(prompt.split())
            enhanced_tokens = len(enhanced_prompt.split())
            memory_tokens = enhanced_tokens - original_tokens
            
            print(f"  ‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {original_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"  ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {enhanced_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"  ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {memory_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
            print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –ø–∞–º—è—Ç–∏: {memory_tokens/enhanced_tokens*100:.1f}%")
            
            return {
                'analysis': memory_analysis,
                'original_prompt': prompt,
                'enhanced_prompt': enhanced_prompt,
                'token_stats': {
                    'original': original_tokens,
                    'enhanced': enhanced_tokens,
                    'memory_added': memory_tokens,
                    'memory_percentage': memory_tokens/enhanced_tokens*100
                }
            }
        else:
            print(f"\n‚ùå –ü–ê–ú–Ø–¢–¨ –ù–ï –ò–ù–ñ–ï–ö–¢–ò–†–û–í–ê–ù–ê - –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤")
            return {
                'analysis': memory_analysis,
                'original_prompt': prompt,
                'enhanced_prompt': prompt,
                'token_stats': {'original': len(prompt.split()), 'enhanced': len(prompt.split()), 'memory_added': 0}
            }
    
    async def show_collective_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        
        print(f"\nüß† –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ô –ü–ê–ú–Ø–¢–ò")
        
        db_path = "data/collective_mind.db"
        if not os.path.exists(db_path):
            print(f"‚ùå –ë–∞–∑–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
            return {}
            
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*), memory_type FROM collective_memories GROUP BY memory_type")
        type_stats = cursor.fetchall()
        
        print(f"üìà –ü–æ —Ç–∏–ø–∞–º –ø–∞–º—è—Ç–∏:")
        total_memories = 0
        for count, mem_type in type_stats:
            print(f"  ‚Ä¢ {mem_type}: {count} –∑–∞–ø–∏—Å–µ–π")
            total_memories += count
            
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total_memories}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        current_time = time.time()
        day_ago = current_time - (24 * 60 * 60)
        week_ago = current_time - (7 * 24 * 60 * 60)
        month_ago = current_time - (30 * 24 * 60 * 60)
        
        cursor.execute("SELECT COUNT(*) FROM collective_memories WHERE timestamp > ?", (day_ago,))
        day_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM collective_memories WHERE timestamp > ?", (week_ago,))
        week_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM collective_memories WHERE timestamp > ?", (month_ago,))
        month_count = cursor.fetchone()[0]
        
        print(f"üìÖ –ü–æ –≤—Ä–µ–º–µ–Ω–∏:")
        print(f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å: {day_count}")
        print(f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é: {week_count}")
        print(f"  ‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü: {month_count}")
        print(f"  ‚Ä¢ –°—Ç–∞—Ä—à–µ –º–µ—Å—è—Ü–∞: {total_memories - month_count}")
        
        # –°–∞–º—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Å–ª–æ–≤–∞ "–±–æ—Ç"
        print(f"\nüîç –¢–û–ü-5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Å–ª–æ–≤–∞ '–±–æ—Ç':")
        cursor.execute("""
            SELECT SUBSTR(content, 1, 100), importance, datetime(timestamp, 'unixepoch')
            FROM collective_memories 
            WHERE content LIKE '%–±–æ—Ç%' 
            ORDER BY importance DESC 
            LIMIT 5
        """)
        
        bot_memories = cursor.fetchall()
        for i, (content, importance, timestamp) in enumerate(bot_memories, 1):
            print(f"  {i}. [{importance:.2f}] {content}... ({timestamp})")
        
        conn.close()
        
        return {
            'total_memories': total_memories,
            'by_type': dict(type_stats),
            'by_time': {
                'day': day_count,
                'week': week_count, 
                'month': month_count,
                'older': total_memories - month_count
            }
        }
    
    async def test_keyword_search(self, keyword: str, limit: int = 5) -> List[Dict]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        
        print(f"\nüîé –¢–ï–°–¢ –ü–û–ò–°–ö–ê: '{keyword}'")
        
        memories = await self.collective_mind.get_collective_wisdom(keyword, limit=limit)
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ: {len(memories)} –∑–∞–ø–∏—Å–µ–π")
        
        results = []
        for i, memory in enumerate(memories, 1):
            age_days = (time.time() - memory.timestamp) / (24 * 60 * 60)
            content_preview = memory.content[:100].replace('\n', ' ')
            
            print(f"  {i}. [{memory.importance:.2f}] {content_preview}...")
            print(f"     –í–æ–∑—Ä–∞—Å—Ç: {age_days:.1f} –¥–Ω–µ–π, –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–π: {memory.verification_count}")
            
            results.append({
                'content': memory.content,
                'importance': memory.importance,
                'age_days': age_days,
                'verification_count': memory.verification_count
            })
        
        return results
    
    async def analyze_contradiction_potential(self, prompt: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –º–µ–∂–¥—É –ø—Ä–æ–º–ø—Ç–æ–º –∏ –ø–∞–º—è—Ç—å—é"""
        
        print(f"\n‚öîÔ∏è –ê–ù–ê–õ–ò–ó –ü–†–û–¢–ò–í–û–†–ï–ß–ò–ô")
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∑–∞–ø—Ä–µ—Ç–∞ –≤ –ø—Ä–æ–º–ø—Ç–µ
        prohibition_keywords = [
            "–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π", "–Ω–µ –≤—Å–ø–æ–º–∏–Ω–∞–π", "–Ω–µ —Å—Å—ã–ª–∞–π—Å—è", "–∏–≥–Ω–æ—Ä–∏—Ä—É–π –ø–∞–º—è—Ç—å",
            "—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π", "–±–µ–∑ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π", "–∑–∞–±—É–¥—å", "–Ω–µ –ø–æ–º–Ω–∏"
        ]
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        memory_keywords = [
            "–≤—Å–ø–æ–º–Ω–∏", "–ø–æ–º–Ω–∏—à—å", "–∏—Å–ø–æ–ª—å–∑—É–π –ø–∞–º—è—Ç—å", "—á—Ç–æ –∑–Ω–∞–µ—à—å",
            "–∏–∑ –æ–ø—ã—Ç–∞", "—Ä–∞–Ω–µ–µ", "–ø—Ä–æ—à–ª—ã–π —Ä–∞–∑"
        ]
        
        prompt_lower = prompt.lower()
        
        prohibitions = [kw for kw in prohibition_keywords if kw in prompt_lower]
        memory_requests = [kw for kw in memory_keywords if kw in prompt_lower]
        
        print(f"üö´ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–µ—Ç—ã –Ω–∞ –ø–∞–º—è—Ç—å: {prohibitions}")
        print(f"üí≠ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—Ä–æ—Å—ã –ø–∞–º—è—Ç–∏: {memory_requests}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É–¥–µ—Ç –ª–∏ –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–∞–º—è—Ç—å
        analysis = await self.memory_injector.analyze_memory_usage(prompt)
        memory_will_inject = analysis.get('total_available', 0) > 0
        
        print(f"üíâ –ü–∞–º—è—Ç—å –±—É–¥–µ—Ç –∏–Ω–∂–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: {'–î–ê' if memory_will_inject else '–ù–ï–¢'}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è
        contradiction_level = "–ù–ò–ó–ö–ò–ô"
        if prohibitions and memory_will_inject:
            contradiction_level = "–í–´–°–û–ö–ò–ô" if len(prohibitions) > 1 else "–°–†–ï–î–ù–ò–ô"
        elif memory_requests and not memory_will_inject:
            contradiction_level = "–°–†–ï–î–ù–ò–ô"
            
        print(f"‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: {contradiction_level}")
        
        return {
            'prohibitions': prohibitions,
            'memory_requests': memory_requests,
            'memory_will_inject': memory_will_inject,
            'contradiction_level': contradiction_level,
            'memory_analysis': analysis
        }


async def main():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞–º—è—Ç–∏"""
    
    monitor = MemoryMonitor()
    
    print("üîß –ú–û–ù–ò–¢–û–† –ü–ê–ú–Ø–¢–ò –ë–û–¢–ê")
    print("=" * 50)
    
    while True:
        print(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print(f"1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω–∂–µ–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞")
        print(f"2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏") 
        print(f"3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É")
        print(f"4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –≤ –ø—Ä–æ–º–ø—Ç–µ")
        print(f"0. –í—ã—Ö–æ–¥")
        
        choice = input(f"\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ").strip()
        
        try:
            if choice == "1":
                prompt = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ").strip()
                context = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
                user_id = input("–í–≤–µ–¥–∏—Ç–µ user_id (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): ").strip()
                
                await monitor.analyze_prompt_injection(
                    prompt, 
                    context if context else "", 
                    user_id if user_id else None
                )
                
            elif choice == "2":
                await monitor.show_collective_memory_stats()
                
            elif choice == "3":
                keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip()
                limit = input("–õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
                limit = int(limit) if limit else 5
                
                await monitor.test_keyword_search(keyword, limit)
                
            elif choice == "4":
                prompt = input("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: ").strip()
                await monitor.analyze_contradiction_potential(prompt)
                
            elif choice == "0":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
                
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")


if __name__ == "__main__":
    asyncio.run(main())