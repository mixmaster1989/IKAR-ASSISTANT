#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω–∂–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏ - –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤  
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.memory_injector import get_memory_injector
from core.collective_mind import CollectiveMind
from config import Config


async def quick_test(query: str, show_full_prompt: bool = False, user_id: str = None):
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω–∂–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    
    print(f"üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–ê–ú–Ø–¢–ò")
    print(f"üîç –ó–∞–ø—Ä–æ—Å: '{query}'")
    print(f"üë§ User ID: {user_id or 'None'}")
    print("-" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        memory_injector = get_memory_injector()
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø–∞–º—è—Ç–∏
        print(f"1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –ø–∞–º—è—Ç–∏...")
        analysis = await memory_injector.analyze_memory_usage(query, user_id)
        
        # üîí –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º user_id –≤ –∞–Ω–∞–ª–∏–∑
        if user_id:
            print(f"   üë§ –ò—â–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–∞–º—è—Ç—å –¥–ª—è user_id: {user_id}")
        
        total_available = analysis.get('total_available', 0)
        top_relevance = analysis.get('top_relevance', 0)
        efficiency = analysis.get('memory_efficiency', 0)
        
        print(f"   üìä –î–æ—Å—Ç—É–ø–Ω–æ —á–∞–Ω–∫–æ–≤: {total_available}")
        print(f"   üìà –¢–æ–ø —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {top_relevance:.3f}")
        print(f"   ‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1%}")
        
        if total_available == 0:
            print(f"‚ùå –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            # üîí –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ø—Ä–æ–±—É–µ–º —Å user_id –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            if not user_id:
                print(f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å user_id –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏")
            return
        
        # –ò–Ω–∂–µ–∫—Ü–∏—è
        print(f"\n2Ô∏è‚É£ –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å...")
        enhanced_prompt = await memory_injector.inject_memory_into_prompt(
            query, "", user_id, memory_budget_ratio=0.3
        )
        
        original_tokens = len(query.split())
        enhanced_tokens = len(enhanced_prompt.split())
        memory_tokens = enhanced_tokens - original_tokens
        
        print(f"   üìù –û—Ä–∏–≥–∏–Ω–∞–ª: {original_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   üöÄ –£–ª—É—á—à–µ–Ω–Ω—ã–π: {enhanced_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
        print(f"   üí≠ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–∞–º—è—Ç–∏: {memory_tokens} —Ç–æ–∫–µ–Ω–æ–≤ ({memory_tokens/enhanced_tokens*100:.1f}%)")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å
        print(f"\n3Ô∏è‚É£ –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:")
        memory_part = enhanced_prompt[len(query):].strip()
        
        if len(memory_part) > 500:
            print(f"   {memory_part[:500]}...")
            print(f"   [...–æ–±—Ä–µ–∑–∞–Ω–æ, –≤—Å–µ–≥–æ {len(memory_part)} —Å–∏–º–≤–æ–ª–æ–≤]")
        else:
            print(f"   {memory_part}")
        
        # –ü–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if show_full_prompt:
            print(f"\n4Ô∏è‚É£ –ü–û–õ–ù–´–ô –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–†–û–ú–ü–¢:")
            print(f"{enhanced_prompt}")
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()


async def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print(f"üîß –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢ –ü–ê–ú–Ø–¢–ò")
    print(f"–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("=" * 50)
    
    while True:
        try:
            query = input(f"\nüîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞: ").strip()
            
            if query.lower() in ['exit', 'quit', '–≤—ã—Ö–æ–¥']:
                print(f"üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not query:
                print(f"‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
                continue
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
            user_id = input(f"üë§ User ID (Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
            user_id = user_id if user_id else None
            
            show_full = input(f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç? (y/N): ").strip().lower()
            show_full = show_full in ['y', 'yes', '–¥–∞']
            
            print()  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
            
            await quick_test(query, show_full, user_id)
            
        except KeyboardInterrupt:
            print(f"\nüëã –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def batch_test():
    """–ü–∞–∫–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    test_queries = [
        "–±–æ—Ç, –ø—Ä–∏–≤–µ—Ç",
        "—á—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ –Ω–∞—à–µ–π –≥—Ä—É–ø–ø–µ",
        "–±–æ—Ç, –∫–∞–∫ –¥–µ–ª–∞ —Å —Ç–æ—Ä–≥–æ–≤–ª–µ–π", 
        "—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—Ä–∏–ø—Ç—É",
        "–±–æ—Ç, —á—Ç–æ –Ω–æ–≤–æ–≥–æ",
        "–ø–æ–º–Ω–∏—à—å –ø—Ä–æ —Å–µ—Ä–≤–µ—Ä"
    ]
    
    print(f"üß™ –ü–ê–ö–ï–¢–ù–´–ô –¢–ï–°–¢ ({len(test_queries)} –∑–∞–ø—Ä–æ—Å–æ–≤)")
    print("=" * 50)
    
    results = []
    
    for i, query in enumerate(test_queries, 1):
        print(f"\nüìã –¢–µ—Å—Ç {i}/{len(test_queries)}: '{query}'")
        print("-" * 30)
        
        try:
            memory_injector = get_memory_injector()
            analysis = await memory_injector.analyze_memory_usage(query)
            
            total_available = analysis.get('total_available', 0)
            top_relevance = analysis.get('top_relevance', 0)
            
            if total_available > 0:
                enhanced_prompt = await memory_injector.inject_memory_into_prompt(query, "", user_id, memory_budget_ratio=0.3)
                memory_tokens = len(enhanced_prompt.split()) - len(query.split())
                status = "‚úÖ –ü–ê–ú–Ø–¢–¨ –î–û–ë–ê–í–õ–ï–ù–ê"
            else:
                memory_tokens = 0
                status = "‚ùå –ü–ê–ú–Ø–¢–¨ –ù–ï –ù–ê–ô–î–ï–ù–ê"
            
            print(f"   {status}")
            print(f"   üìä –ß–∞–Ω–∫–æ–≤: {total_available} | –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {top_relevance:.3f} | –¢–æ–∫–µ–Ω–æ–≤: {memory_tokens}")
            
            results.append({
                'query': query,
                'chunks': total_available,
                'relevance': top_relevance,
                'memory_tokens': memory_tokens,
                'success': total_available > 0
            })
            
        except Exception as e:
            print(f"   ‚ùå –û–®–ò–ë–ö–ê: {e}")
            results.append({
                'query': query,
                'chunks': 0,
                'relevance': 0,
                'memory_tokens': 0,
                'success': False,
                'error': str(e)
            })
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    successful = [r for r in results if r['success']]
    total_tests = len(results)
    success_rate = len(successful) / total_tests * 100
    
    print(f"   üéØ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: {len(successful)}/{total_tests} ({success_rate:.1f}%)")
    
    if successful:
        avg_chunks = sum(r['chunks'] for r in successful) / len(successful)
        avg_relevance = sum(r['relevance'] for r in successful) / len(successful)
        avg_tokens = sum(r['memory_tokens'] for r in successful) / len(successful)
        
        print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ —á–∞–Ω–∫–æ–≤: {avg_chunks:.1f}")
        print(f"   üìà –°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {avg_relevance:.3f}")
        print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–∞–º—è—Ç–∏: {avg_tokens:.0f}")
    
    print(f"\nüèÜ –¢–û–ü-3 –ü–û –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò:")
    top_results = sorted(successful, key=lambda x: x['relevance'], reverse=True)[:3]
    for i, result in enumerate(top_results, 1):
        print(f"   {i}. '{result['query']}' | –†–µ–ª: {result['relevance']:.3f} | –ß–∞–Ω–∫–æ–≤: {result['chunks']}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'batch':
            await batch_test()
        elif command == 'interactive':
            await interactive_test()
        else:
            # –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            query = ' '.join(sys.argv[1:])
            user_id = None
            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –ø–æ—Ö–æ–∂ –Ω–∞ user_id (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if len(sys.argv) > 2 and sys.argv[-1].isdigit():
                user_id = sys.argv[-1]
                query = ' '.join(sys.argv[1:-1])  # –£–±–∏—Ä–∞–µ–º user_id –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
            await quick_test(query, show_full_prompt=False, user_id=user_id)
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await interactive_test()


if __name__ == "__main__":
    asyncio.run(main())