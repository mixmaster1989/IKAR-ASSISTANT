"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ–∫—Å–∏
–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API
"""

import random
import logging
from typing import List, Dict, Optional, Tuple
import requests
import asyncio
import aiohttp

logger = logging.getLogger("chatumba.proxy_manager")

class ProxyManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–∫—Å–∏"""
        
        # HTTP –ø—Ä–æ–∫—Å–∏ (—Ä–∞–±–æ—Ç–∞—é—Ç —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º API)
        self.http_proxies = [
            "http://43.156.66.39:8080",      # –°–∏–Ω–≥–∞–ø—É—Ä - –õ–£–ß–®–ò–ô
            "http://65.21.34.102:80",        # –§–∏–Ω–ª—è–Ω–¥–∏—è
            "http://103.156.75.213:8787",    # –ò–Ω–¥–æ–Ω–µ–∑–∏—è
            "http://109.135.16.145:8789",    # –ë–µ–ª—å–≥–∏—è
            "http://47.89.184.18:3128",      # –°–®–ê
        ]
        
        # SOCKS4 –ø—Ä–æ–∫—Å–∏ (—Ä–∞–±–æ—Ç–∞—é—Ç —Å Google AI API)
        self.socks4_proxies = [
            "socks4://192.252.208.70:14282",  # –°–®–ê - –°–ê–ú–´–ô –ë–´–°–¢–†–´–ô
            "socks4://198.8.84.3:4145",       # –ö–∞–Ω–∞–¥–∞
            "socks4://72.211.46.124:4145",    # –°–®–ê
            "socks4://199.116.112.6:4145",    # –°–®–ê
            "socks4://67.201.59.70:4145",     # –°–®–ê
        ]
        
        # SOCKS5 –ø—Ä–æ–∫—Å–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è)
        self.socks5_proxies = [
            "socks5://128.199.202.122:1080",  # –°–∏–Ω–≥–∞–ø—É—Ä
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.usage_stats = {
            "http": {proxy: {"success": 0, "failures": 0} for proxy in self.http_proxies},
            "socks4": {proxy: {"success": 0, "failures": 0} for proxy in self.socks4_proxies},
            "socks5": {proxy: {"success": 0, "failures": 0} for proxy in self.socks5_proxies},
        }
    
    def get_random_http_proxy(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π HTTP –ø—Ä–æ–∫—Å–∏"""
        return random.choice(self.http_proxies)
    
    def get_random_socks4_proxy(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π SOCKS4 –ø—Ä–æ–∫—Å–∏"""
        return random.choice(self.socks4_proxies)
    
    def get_best_http_proxy(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π HTTP –ø—Ä–æ–∫—Å–∏ (–°–∏–Ω–≥–∞–ø—É—Ä)"""
        return "http://43.156.66.39:8080"
    
    def get_best_socks4_proxy(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª—É—á—à–∏–π SOCKS4 –ø—Ä–æ–∫—Å–∏ (–°–®–ê)"""
        return "socks4://192.252.208.70:14282"
    
    def get_proxies_for_requests(self, proxy_type: str = "http") -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è requests
        
        Args:
            proxy_type: "http", "socks4", "socks5"
            
        Returns:
            Dict —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è requests
        """
        if proxy_type == "http":
            proxy = self.get_best_http_proxy()
        elif proxy_type == "socks4":
            proxy = self.get_best_socks4_proxy()
        elif proxy_type == "socks5":
            proxy = self.socks5_proxies[0] if self.socks5_proxies else self.get_best_http_proxy()
        else:
            proxy = self.get_best_http_proxy()
        
        return {
            "http": proxy,
            "https": proxy
        }
    
    def get_proxy_for_aiohttp(self, proxy_type: str = "http") -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –¥–ª—è aiohttp
        
        Args:
            proxy_type: "http", "socks4", "socks5"
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–∫—Å–∏ –¥–ª—è aiohttp
        """
        if proxy_type == "http":
            return self.get_best_http_proxy()
        elif proxy_type == "socks4":
            return self.get_best_socks4_proxy()
        elif proxy_type == "socks5":
            return self.socks5_proxies[0] if self.socks5_proxies else self.get_best_http_proxy()
        else:
            return self.get_best_http_proxy()
    
    async def test_proxy_async(self, proxy: str, test_url: str = "http://httpbin.org/ip") -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        
        Args:
            proxy: URL –ø—Ä–æ–∫—Å–∏
            test_url: URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    test_url,
                    proxy=proxy,
                    timeout=aiohttp.ClientTimeout(total=10)
                ) as response:
                    if response.status == 200:
                        logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        return True
                    else:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        return False
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–∫—Å–∏ {proxy} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False
    
    def test_proxy_sync(self, proxy: str, test_url: str = "http://httpbin.org/ip") -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∫—Å–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        
        Args:
            proxy: URL –ø—Ä–æ–∫—Å–∏
            test_url: URL –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        try:
            proxies = {"http": proxy, "https": proxy}
            response = requests.get(test_url, proxies=proxies, timeout=10)
            
            if response.status_code == 200:
                logger.info(f"‚úÖ –ü—Ä–æ–∫—Å–∏ {proxy} —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ {proxy} –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –ü—Ä–æ–∫—Å–∏ {proxy} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False
    
    async def test_all_proxies(self) -> Dict[str, List[str]]:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–æ–∫—Å–∏
        
        Returns:
            Dict —Å —Ä–∞–±–æ—á–∏–º–∏ –ø—Ä–æ–∫—Å–∏ –ø–æ —Ç–∏–ø–∞–º
        """
        working_proxies = {
            "http": [],
            "socks4": [],
            "socks5": []
        }
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏...")
        for proxy in self.http_proxies:
            if await self.test_proxy_async(proxy):
                working_proxies["http"].append(proxy)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SOCKS4 –ø—Ä–æ–∫—Å–∏
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SOCKS4 –ø—Ä–æ–∫—Å–∏...")
        for proxy in self.socks4_proxies:
            if await self.test_proxy_async(proxy):
                working_proxies["socks4"].append(proxy)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏
        logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏...")
        for proxy in self.socks5_proxies:
            if await self.test_proxy_async(proxy):
                working_proxies["socks5"].append(proxy)
        
        return working_proxies
    
    def get_stats(self) -> Dict[str, Dict[str, Dict[str, int]]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏"""
        return self.usage_stats
    
    def record_success(self, proxy: str, proxy_type: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        if proxy_type in self.usage_stats and proxy in self.usage_stats[proxy_type]:
            self.usage_stats[proxy_type][proxy]["success"] += 1
    
    def record_failure(self, proxy: str, proxy_type: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏"""
        if proxy_type in self.usage_stats and proxy in self.usage_stats[proxy_type]:
            self.usage_stats[proxy_type][proxy]["failures"] += 1

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏
proxy_manager = ProxyManager()

def get_proxy_manager() -> ProxyManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–∫—Å–∏"""
    return proxy_manager
