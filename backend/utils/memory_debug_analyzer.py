#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä debug –ª–æ–≥–æ–≤ –ø–∞–º—è—Ç–∏ - –ø–∞—Ä—Å–∏—Ç logs/memory_debug.log
"""

import re
import json
from datetime import datetime
from typing import Dict, List, Any, Optional
from collections import defaultdict, Counter


class MemoryDebugAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä debug –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏"""
    
    def __init__(self, log_file: str = "logs/memory_debug.log"):
        self.log_file = log_file
        
    def parse_log_file(self) -> List[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç —Ñ–∞–π–ª –ª–æ–≥–æ–≤ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –ø–∞–º—è—Ç–∏"""
        
        events = []
        
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                for line in f:
                    event = self._parse_log_line(line.strip())
                    if event:
                        events.append(event)
        except FileNotFoundError:
            print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.log_file}")
            return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
            
        return events
    
    def _parse_log_line(self, line: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞"""
        
        # –®–∞–±–ª–æ–Ω –¥–ª—è debug –ª–æ–≥–æ–≤ –ø–∞–º—è—Ç–∏
        pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}).*?\| DEBUG\s+\| memory_debug\s+\| (\w+):(\d+)\s+\| (.+)'
        
        match = re.match(pattern, line)
        if not match:
            return None
            
        timestamp_str, function, line_num, message = match.groups()
        
        try:
            timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S")
        except:
            timestamp = None
            
        return {
            'timestamp': timestamp,
            'function': function,
            'line_number': int(line_num),
            'message': message,
            'raw_line': line
        }
    
    def analyze_memory_injection_sessions(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Å—Å–∏–∏ –∏–Ω–∂–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        
        events = self.parse_log_file()
        
        if not events:
            return {'error': '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'}
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ —Å–µ—Å—Å–∏—è–º (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å log_memory_injector_start)
        sessions = []
        current_session = None
        
        for event in events:
            if event['function'] == 'log_memory_injector_start':
                if current_session:
                    sessions.append(current_session)
                current_session = {
                    'start_time': event['timestamp'],
                    'events': [event],
                    'chunks_selected': 0,
                    'memory_used': 0,
                    'keywords': [],
                    'wisdom_searches': [],
                    'relevance_scores': []
                }
            elif current_session:
                current_session['events'].append(event)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                if 'MEMORY CHUNKS | Selected:' in event['message']:
                    match = re.search(r'Selected: (\d+)/(\d+)', event['message'])
                    if match:
                        current_session['chunks_selected'] = int(match.group(1))
                        
                elif 'MEMORY INJECTION | Used' in event['message']:
                    match = re.search(r'Memory: (\d+) tokens', event['message'])
                    if match:
                        current_session['memory_used'] = int(match.group(1))
                        
                elif 'INJECTOR KEYWORDS' in event['message']:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—ç—Ç–æ —Å–ª–æ–∂–Ω–æ –∏–∑-–∑–∞ —Ñ–æ—Ä–º–∞—Ç–∞)
                    if 'Query:' in event['message']:
                        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                        current_session['keywords'] = 'extracted'  # –ó–∞–≥–ª—É—à–∫–∞
                        
                elif 'COLLECTIVE WISDOM | Search:' in event['message']:
                    match = re.search(r"Search: '([^']+)'", event['message'])
                    if match:
                        current_session['wisdom_searches'].append(match.group(1))
                        
                elif 'RELEVANCE | ‚úÖ' in event['message']:
                    match = re.search(r'(\d+\.\d+) \(threshold:', event['message'])
                    if match:
                        current_session['relevance_scores'].append(float(match.group(1)))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–µ—Å—Å–∏—é
        if current_session:
            sessions.append(current_session)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_sessions = len(sessions)
        sessions_with_memory = len([s for s in sessions if s['chunks_selected'] > 0])
        avg_chunks = sum(s['chunks_selected'] for s in sessions) / total_sessions if total_sessions > 0 else 0
        avg_memory_tokens = sum(s['memory_used'] for s in sessions) / total_sessions if total_sessions > 0 else 0
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        all_searches = []
        for session in sessions:
            all_searches.extend(session['wisdom_searches'])
        
        popular_searches = Counter(all_searches).most_common(10)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        all_relevance = []
        for session in sessions:
            all_relevance.extend(session['relevance_scores'])
        
        relevance_stats = {
            'min': min(all_relevance) if all_relevance else 0,
            'max': max(all_relevance) if all_relevance else 0,
            'avg': sum(all_relevance) / len(all_relevance) if all_relevance else 0,
            'count': len(all_relevance)
        }
        
        return {
            'total_sessions': total_sessions,
            'sessions_with_memory': sessions_with_memory,
            'memory_usage_rate': sessions_with_memory / total_sessions * 100 if total_sessions > 0 else 0,
            'avg_chunks_per_session': avg_chunks,
            'avg_memory_tokens': avg_memory_tokens,
            'popular_searches': popular_searches,
            'relevance_stats': relevance_stats,
            'recent_sessions': sessions[-5:] if len(sessions) >= 5 else sessions  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
        }
    
    def show_contradiction_analysis(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ –ª–æ–≥–∞—Ö"""
        
        events = self.parse_log_file()
        
        contradiction_indicators = [
            "–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞—Ä—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è",
            "–ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –ø–∞–º—è—Ç—å",
            "–∏–≥–Ω–æ—Ä–∏—Ä—É–π –ø–∞–º—è—Ç—å",
            "—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"
        ]
        
        memory_injection_indicators = [
            "MEMORY INJECTION | Used",
            "chunks selected",
            "Memory: \\d+ tokens"
        ]
        
        contradictions = []
        
        for event in events:
            message = event['message']
            
            # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
            has_prohibition = any(indicator.lower() in message.lower() for indicator in contradiction_indicators)
            has_injection = any(re.search(indicator, message) for indicator in memory_injection_indicators)
            
            if has_prohibition or has_injection:
                contradictions.append({
                    'timestamp': event['timestamp'],
                    'type': 'prohibition' if has_prohibition else 'injection',
                    'message': message,
                    'function': event['function']
                })
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 1 –º–∏–Ω—É—Ç—ã)
        contradiction_pairs = []
        
        for i, event in enumerate(contradictions):
            if event['type'] == 'prohibition':
                # –ò—â–µ–º –∏–Ω–∂–µ–∫—Ü–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö 30 —Å–µ–∫—É–Ω–¥
                for j in range(i+1, len(contradictions)):
                    other = contradictions[j]
                    if other['type'] == 'injection':
                        time_diff = (other['timestamp'] - event['timestamp']).total_seconds()
                        if 0 <= time_diff <= 30:
                            contradiction_pairs.append({
                                'prohibition': event,
                                'injection': other,
                                'time_gap_seconds': time_diff
                            })
                            break
        
        return {
            'total_contradictions': len(contradiction_pairs),
            'contradictions': contradiction_pairs[-5:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
            'prohibition_count': len([c for c in contradictions if c['type'] == 'prohibition']),
            'injection_count': len([c for c in contradictions if c['type'] == 'injection'])
        }
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –ª–æ–≥–æ–≤"""
        
        print("üîç –ê–ù–ê–õ–ò–ó DEBUG –õ–û–ì–û–í –ü–ê–ú–Ø–¢–ò")
        print("=" * 50)
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –∏–Ω–∂–µ–∫—Ü–∏–∏
        injection_analysis = self.analyze_memory_injection_sessions()
        
        if 'error' in injection_analysis:
            return f"‚ùå {injection_analysis['error']}"
        
        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ù–ñ–ï–ö–¶–ò–ô:")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: {injection_analysis['total_sessions']}")
        print(f"  ‚Ä¢ –°–µ—Å—Å–∏–π —Å –ø–∞–º—è—Ç—å—é: {injection_analysis['sessions_with_memory']}")
        print(f"  ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {injection_analysis['memory_usage_rate']:.1f}%")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —á–∞–Ω–∫–æ–≤ –Ω–∞ —Å–µ—Å—Å–∏—é: {injection_analysis['avg_chunks_per_session']:.1f}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–∞–º—è—Ç–∏: {injection_analysis['avg_memory_tokens']:.0f}")
        
        print(f"\nüîé –ü–û–ü–£–õ–Ø–†–ù–´–ï –ü–û–ò–°–ö–û–í–´–ï –ó–ê–ü–†–û–°–´:")
        for search, count in injection_analysis['popular_searches'][:5]:
            print(f"  ‚Ä¢ '{search}': {count} —Ä–∞–∑")
        
        relevance = injection_analysis['relevance_stats']
        print(f"\nüìà –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨:")
        print(f"  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è: {relevance['min']:.3f}")
        print(f"  ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: {relevance['max']:.3f}")
        print(f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è: {relevance['avg']:.3f}")
        print(f"  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {relevance['count']}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
        contradiction_analysis = self.show_contradiction_analysis()
        
        print(f"\n‚öîÔ∏è –ê–ù–ê–õ–ò–ó –ü–†–û–¢–ò–í–û–†–ï–ß–ò–ô:")
        print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π: {contradiction_analysis['total_contradictions']}")
        print(f"  ‚Ä¢ –ó–∞–ø—Ä–µ—Ç–æ–≤ –Ω–∞ –ø–∞–º—è—Ç—å: {contradiction_analysis['prohibition_count']}")
        print(f"  ‚Ä¢ –ò–Ω–∂–µ–∫—Ü–∏–π –ø–∞–º—è—Ç–∏: {contradiction_analysis['injection_count']}")
        
        if contradiction_analysis['contradictions']:
            print(f"\nüö® –ü–û–°–õ–ï–î–ù–ò–ï –ü–†–û–¢–ò–í–û–†–ï–ß–ò–Ø:")
            for i, contradiction in enumerate(contradiction_analysis['contradictions'], 1):
                prohibition = contradiction['prohibition']
                injection = contradiction['injection']
                gap = contradiction['time_gap_seconds']
                
                print(f"  {i}. –ó–∞–ø—Ä–µ—Ç –≤ {prohibition['timestamp']} ‚Üí –ò–Ω–∂–µ–∫—Ü–∏—è —á–µ—Ä–µ–∑ {gap:.1f}—Å")
                print(f"     –ó–∞–ø—Ä–µ—Ç: {prohibition['message'][:100]}...")
                print(f"     –ò–Ω–∂–µ–∫—Ü–∏—è: {injection['message'][:100]}...")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        print(f"\nüìù –ü–û–°–õ–ï–î–ù–ò–ï 3 –°–ï–°–°–ò–ò:")
        for i, session in enumerate(injection_analysis['recent_sessions'][-3:], 1):
            print(f"  {i}. {session['start_time']} | –ß–∞–Ω–∫–æ–≤: {session['chunks_selected']} | "
                  f"–¢–æ–∫–µ–Ω–æ–≤: {session['memory_used']} | –ü–æ–∏—Å–∫–∏: {len(session['wisdom_searches'])}")
        
        return "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"


def main():
    """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    
    analyzer = MemoryDebugAnalyzer()
    result = analyzer.generate_report()
    print(f"\n{result}")


if __name__ == "__main__":
    main()