"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.
"""
import logging
import sys
from pathlib import Path

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞."""
    
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    root_logger = logging.getLogger()
    if hasattr(setup_logging, '_initialized') and setup_logging._initialized:
        return  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.DEBUG)
    console_handler.setFormatter(formatter)
    
    # –§–∞–π–ª–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä
    log_file = Path(__file__).parent.parent / "chatumba_debug.log"
    file_handler = logging.FileHandler(log_file, encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º root logger
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)
    root_logger.handlers.clear()
    root_logger.addHandler(console_handler)
    root_logger.addHandler(file_handler)
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –º–æ–¥—É–ª–µ–π
    loggers = [
        'chatumba.telegram',
        'chatumba.telegram_main', 
        'chatumba.personality',
        'chatumba.vision',
        'chatumba.llm',
        'chatumba.embeddings',
        'uvicorn',
        'fastapi'
    ]
    
    for logger_name in loggers:
        logger = logging.getLogger(logger_name)
        logger.setLevel(logging.DEBUG)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º DEBUG –ª–æ–≥–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    external_loggers = [
        'urllib3',
        'urllib3.connectionpool',
        'sentence_transformers',
        'sentence_transformers.SentenceTransformer',
        'transformers',
        'huggingface_hub',
        'requests',
        'httpx',
        'watchfiles',  # –û—Ç–∫–ª—é—á–∞–µ–º DEBUG –ª–æ–≥–∏ –æ—Ç watchfiles
        'watchfiles.main'  # –û—Ç–∫–ª—é—á–∞–µ–º DEBUG –ª–æ–≥–∏ –æ—Ç watchfiles.main
    ]
    
    for logger_name in external_loggers:
        logger = logging.getLogger(logger_name)
        logger.setLevel(logging.WARNING)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º DEBUG-—Å–ø–∞–º –æ—Ç numba
    logging.getLogger('numba').setLevel(logging.WARNING)
    logging.getLogger('numba.core.byteflow').setLevel(logging.WARNING)

    logging.info("üîß –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    logging.info(f"üìÅ –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤: {log_file}")
    
    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    setup_logging._initialized = True

def get_logger(name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–≥–µ—Ä —Å –∑–∞–¥–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º."""
    return logging.getLogger(name)