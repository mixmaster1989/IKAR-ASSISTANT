"""
üß† –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
–î–µ—Ç–∞–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ—Ç –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É
"""

import logging
import json
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

class MemoryDebugLogger:
    """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞–º—è—Ç–∏"""
    
    def __init__(self):
        self.log_file = Path("logs/memory_debug.log")
        self.setup_logger()
        self.current_request_id = None
        self.request_start_time = None
        
    def setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–∞–º—è—Ç–∏
        self.logger = logging.getLogger('memory_debug')
        self.logger.setLevel(logging.DEBUG)
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.logger.handlers.clear()
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)-8s | %(name)-15s | %(funcName)-20s:%(lineno)-4d | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S.%f'
        )
        
        # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        file_handler = logging.FileHandler(self.log_file, encoding='utf-8')
        file_handler.setLevel(logging.DEBUG)
        file_handler.setFormatter(formatter)
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        console_handler = logging.StreamHandler()
        console_handler.setLevel(logging.INFO)
        console_formatter = logging.Formatter(
            'üß† %(asctime)s | %(levelname)s | %(message)s',
            datefmt='%H:%M:%S'
        )
        console_handler.setFormatter(console_formatter)
        
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)
        self.logger.propagate = False
        
    def start_request(self, user_id: str, chat_id: str, message: str) -> str:
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        self.current_request_id = f"req_{int(time.time() * 1000)}_{user_id[-4:]}"
        self.request_start_time = time.time()
        
        self.logger.info("=" * 100)
        self.logger.info(f"üöÄ –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ó–ê–ü–†–û–°–ê | ID: {self.current_request_id}")
        self.logger.info(f"üë§ User ID: {user_id}")
        self.logger.info(f"üí¨ Chat ID: {chat_id}")
        self.logger.info(f"üìù Message: {message[:200]}{'...' if len(message) > 200 else ''}")
        self.logger.info("-" * 100)
        
        return self.current_request_id
    
    def log_trigger_bot(self, trigger_type: str, details: Dict[str, Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –±–æ—Ç–∞"""
        self.logger.info(f"üéØ BOT TRIGGER | Type: {trigger_type}")
        self.logger.debug(f"   Details: {json.dumps(details, ensure_ascii=False, indent=2)}")
    
    def log_lazy_memory_start(self, user_id: str, query: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã LazyMemory"""
        self.logger.info(f"üîç LAZY MEMORY | Start search for user: {user_id}")
        self.logger.debug(f"   Query: {query}")
    
    def log_lazy_memory_cache(self, cache_hit: bool, cache_key: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫—ç—à–∞ LazyMemory"""
        status = "HIT" if cache_hit else "MISS"
        self.logger.debug(f"üíæ LAZY MEMORY CACHE | {status} | Key: {cache_key}")
    
    def log_lazy_memory_keywords(self, keywords: List[str]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
        self.logger.debug(f"üîë LAZY MEMORY KEYWORDS | Found: {keywords}")
    
    def log_lazy_memory_results(self, results_count: int, results: List[Dict[str, Any]]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ LazyMemory"""
        self.logger.info(f"üìä LAZY MEMORY RESULTS | Found: {results_count} messages")
        
        for i, result in enumerate(results[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            content_preview = result.get('content', '')[:100]
            timestamp = result.get('timestamp', 'unknown')
            self.logger.debug(f"   {i}. [{timestamp}] {content_preview}...")
    
    def log_memory_injector_start(self, query: str, context: str, user_id: Optional[str]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã MemoryInjector"""
        self.logger.info(f"üíâ MEMORY INJECTOR | Start injection")
        self.logger.debug(f"   Query: {query[:150]}{'...' if len(query) > 150 else ''}")
        self.logger.debug(f"   Context: {context[:100]}{'...' if len(context) > 100 else ''}")
        self.logger.debug(f"   User ID: {user_id}")
    
    def log_memory_injector_keywords(self, query_keywords: List[str], context_keywords: List[str]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–Ω—ä–µ–∫—Ç–æ—Ä–∞"""
        self.logger.debug(f"üîë INJECTOR KEYWORDS | Query: {query_keywords}")
        self.logger.debug(f"üîë INJECTOR KEYWORDS | Context: {context_keywords}")
    
    def log_collective_wisdom_search(self, keyword: str, limit: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏"""
        self.logger.debug(f"üß† COLLECTIVE WISDOM | Search: '{keyword}' (limit: {limit})")
    
    def log_collective_wisdom_results(self, keyword: str, results_count: int, results: List[Any]):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏"""
        self.logger.debug(f"üß† COLLECTIVE WISDOM RESULTS | '{keyword}': {results_count} memories")
        
        for i, result in enumerate(results[:2], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
            content_preview = getattr(result, 'content', '')[:80]
            importance = getattr(result, 'importance', 0)
            memory_type = getattr(result, 'memory_type', 'unknown')
            self.logger.debug(f"   {i}. [{memory_type}] Importance: {importance:.2f} | {content_preview}...")
    
    def log_relevance_calculation(self, memory_id: str, relevance_score: float, threshold: float):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–∞—Å—á—ë—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏"""
        passed = "‚úÖ" if relevance_score > threshold else "‚ùå"
        self.logger.debug(f"üìà RELEVANCE | {passed} Memory {memory_id}: {relevance_score:.3f} (threshold: {threshold})")
    
    def log_memory_chunks_selection(self, total_chunks: int, selected_chunks: int, token_budget: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–±–æ—Ä —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏"""
        self.logger.info(f"üì¶ MEMORY CHUNKS | Selected: {selected_chunks}/{total_chunks} (budget: {token_budget} tokens)")
    
    def log_memory_chunk_details(self, chunk_index: int, chunk_type: str, relevance: float, tokens: int, content_preview: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —á–∞–Ω–∫–∞ –ø–∞–º—è—Ç–∏"""
        self.logger.debug(f"   üìÑ Chunk {chunk_index+1}: [{chunk_type}] Rel: {relevance:.3f} | Tokens: {tokens} | {content_preview[:80]}...")
    
    def log_memory_injection_result(self, original_tokens: int, injected_tokens: int, chunks_used: int):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
        total_tokens = original_tokens + injected_tokens
        memory_ratio = (injected_tokens / total_tokens * 100) if total_tokens > 0 else 0
        
        self.logger.info(f"‚úÖ MEMORY INJECTION | Used {chunks_used} chunks | Memory: {injected_tokens} tokens ({memory_ratio:.1f}%)")
        self.logger.debug(f"   Original prompt: {original_tokens} tokens")
        self.logger.debug(f"   Final prompt: {total_tokens} tokens")
    
    def log_no_memory_injection(self, reason: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ –ø–∞–º—è—Ç—å –Ω–µ –∏–Ω—ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è"""
        self.logger.info(f"‚ö†Ô∏è NO MEMORY INJECTION | Reason: {reason}")
    
    def end_request(self, success: bool = True):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        if self.request_start_time:
            duration = time.time() - self.request_start_time
            status = "‚úÖ SUCCESS" if success else "‚ùå FAILED"
            
            self.logger.info("-" * 100)
            self.logger.info(f"üèÅ –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò | {status} | Duration: {duration:.3f}s | ID: {self.current_request_id}")
            self.logger.info("=" * 100)
            self.logger.info("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        
        self.current_request_id = None
        self.request_start_time = None
    
    def log_error(self, component: str, error: Exception, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"""
        self.logger.error(f"üí• ERROR in {component} | {type(error).__name__}: {str(error)}")
        if details:
            self.logger.error(f"   Details: {json.dumps(details, ensure_ascii=False, indent=2)}")

# –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
_memory_debug_logger = None

def get_memory_debug_logger() -> MemoryDebugLogger:
    """–ü–æ–ª—É—á–∏—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –æ—Ç–ª–∞–¥–∫–∏ –ø–∞–º—è—Ç–∏"""
    global _memory_debug_logger
    if _memory_debug_logger is None:
        _memory_debug_logger = MemoryDebugLogger()
    return _memory_debug_logger

def enable_memory_debug_logging():
    """–í–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    logger = get_memory_debug_logger()
    logger.logger.info("üîß MEMORY DEBUG LOGGING ENABLED")
    return logger

def disable_memory_debug_logging():
    """–û—Ç–∫–ª—é—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    global _memory_debug_logger
    if _memory_debug_logger:
        _memory_debug_logger.logger.info("üîß MEMORY DEBUG LOGGING DISABLED")
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        for handler in _memory_debug_logger.logger.handlers:
            _memory_debug_logger.logger.removeHandler(handler)
        _memory_debug_logger = None