#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
"""

import sys
sys.path.append('backend')

def test_memory_logging():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
    
    print("üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏ —Ä–∞–±–æ—Ç—ã –ª–æ–≥–≥–µ—Ä–∞
        from utils.memory_debug_logger import get_memory_debug_logger
        
        logger = get_memory_debug_logger()
        print("‚úÖ –õ–æ–≥–≥–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        request_id = logger.start_request("test_user", "test_chat", "—Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏")
        print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞—Ç: {request_id}")
        
        logger.log_trigger_bot("test_trigger", {
            "user_id": "test_user",
            "message_length": 50,
            "test": True
        })
        print("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")
        
        logger.log_lazy_memory_start("test_user", "—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        logger.log_lazy_memory_keywords(["—Ç–µ—Å—Ç–æ–≤—ã–π", "–∑–∞–ø—Ä–æ—Å"])
        logger.log_lazy_memory_results(2, [
            {"content": "—Ç–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ 1", "timestamp": "2025-08-02"},
            {"content": "—Ç–µ—Å—Ç–æ–≤–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ 2", "timestamp": "2025-08-01"}
        ])
        print("‚úÖ Lazy Memory –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∞")
        
        logger.log_memory_injector_start("—Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç", "–∫–æ–Ω—Ç–µ–∫—Å—Ç", "test_user")
        logger.log_memory_injection_result(100, 200, 2)
        print("‚úÖ Memory Injector –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω")
        
        logger.end_request(True)
        print("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ logs/memory_debug.log")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    test_memory_logging()