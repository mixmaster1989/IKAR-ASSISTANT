#!/usr/bin/env python3
"""
üß† –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê –° IKAR
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–∞ —Å–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –±–æ—Ç–∞
"""

import asyncio
import re
import logging
from typing import Dict, List, Optional, Tuple, Any
from datetime import datetime, timedelta
from dataclasses import dataclass
import json
from pathlib import Path

from internet_intelligence_system import InternetIntelligenceSystem, ProcessedInformation

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class EnhancedResponse:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    original_response: str
    internet_info: Optional[ProcessedInformation]
    combined_response: str
    confidence_score: float
    sources: List[str]
    needs_internet: bool
    processing_time: float

class IKARInternetIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Å IKAR"""
    
    def __init__(self):
        self.internet_system = None
        self.query_patterns = self._load_query_patterns()
        self.cache = {}
        self.cache_duration = timedelta(minutes=30)
        
    def _load_query_patterns(self) -> Dict[str, List[str]]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–∞"""
        return {
            "news": [
                r"–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
                r"—á—Ç–æ –Ω–æ–≤–æ–≥–æ",
                r"–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                r"—Å–µ–≥–æ–¥–Ω—è –≤ –º–∏—Ä–µ",
                r"–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
                r"—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç",
                r"—Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
                r"–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"
            ],
            "current_events": [
                r"—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å",
                r"—Å—Ç–∞—Ç—É—Å",
                r"—Å–∏—Ç—É–∞—Ü–∏—è",
                r"—Ä–∞–∑–≤–∏—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π",
                r"—Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ",
                r"–ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
            ],
            "real_time": [
                r"—Å–µ–π—á–∞—Å",
                r"–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
                r"—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è",
                r"–∂–∏–≤—ã–µ –¥–∞–Ω–Ω—ã–µ",
                r"–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                r"—Å–µ–≥–æ–¥–Ω—è"
            ],
            "technical": [
                r"–ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–µ—Ä—Å–∏–∏",
                r"–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
                r"–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏",
                r"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                r"–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏",
                r"—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
            ],
            "market": [
                r"–∫—É—Ä—Å –≤–∞–ª—é—Ç",
                r"—Ü–µ–Ω—ã",
                r"—Ä—ã–Ω–æ–∫",
                r"—ç–∫–æ–Ω–æ–º–∏–∫–∞",
                r"—Ñ–∏–Ω–∞–Ω—Å—ã",
                r"–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
            ],
            "weather": [
                r"–ø–æ–≥–æ–¥–∞",
                r"–∫–ª–∏–º–∞—Ç",
                r"—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                r"–æ—Å–∞–¥–∫–∏",
                r"–ø—Ä–æ–≥–Ω–æ–∑"
            ],
            "sports": [
                r"—Å–ø–æ—Ä—Ç",
                r"–º–∞—Ç—á",
                r"—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è",
                r"—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
                r"—á–µ–º–ø–∏–æ–Ω–∞—Ç"
            ]
        }
    
    async def _get_internet_system(self) -> InternetIntelligenceSystem:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
        if self.internet_system is None:
            self.internet_system = InternetIntelligenceSystem()
        return self.internet_system
    
    def needs_internet_search(self, user_query: str) -> Tuple[bool, str, float]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            (needs_search, search_query, confidence)
        """
        query_lower = user_query.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for category, patterns in self.query_patterns.items():
            for pattern in patterns:
                if re.search(pattern, query_lower):
                    confidence = self._calculate_pattern_confidence(pattern, query_lower)
                    return True, user_query, confidence
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if self._has_time_indicators(query_lower):
            return True, user_query, 0.7
        
        if self._has_current_events_keywords(query_lower):
            return True, user_query, 0.8
        
        return False, "", 0.0
    
    def _calculate_pattern_confidence(self, pattern: str, query: str) -> float:
        """–†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ"""
        # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–∞—é—Ç –±–æ–ª—å—à—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if re.search(pattern, query):
            return 0.9
        return 0.7
    
    def _has_time_indicators(self, query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        time_indicators = [
            "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å", "–≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", "–Ω–µ–¥–∞–≤–Ω–æ", 
            "–ø–æ—Å–ª–µ–¥–Ω–∏–µ", "–Ω–æ–≤—ã–µ", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ", "–∂–∏–≤—ã–µ"
        ]
        return any(indicator in query for indicator in time_indicators)
    
    def _has_current_events_keywords(self, query: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"""
        current_keywords = [
            "–Ω–æ–≤–æ—Å—Ç–∏", "—Å–æ–±—ã—Ç–∏—è", "–ø—Ä–æ–∏—Å—à–µ—Å—Ç–≤–∏—è", "–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
            "–∏–∑–º–µ–Ω–µ–Ω–∏—è", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "–ø—Ä–æ–≥—Ä–µ—Å—Å", "—Å—Ç–∞—Ç—É—Å"
        ]
        return any(keyword in query for keyword in current_keywords)
    
    async def enhance_response_with_internet(
        self, 
        user_query: str, 
        original_response: str
    ) -> EnhancedResponse:
        """
        –£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        
        Args:
            user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_response: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            
        Returns:
            EnhancedResponse: –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        start_time = datetime.now()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫
        needs_search, search_query, confidence = self.needs_internet_search(user_query)
        
        if not needs_search:
            return EnhancedResponse(
                original_response=original_response,
                internet_info=None,
                combined_response=original_response,
                confidence_score=1.0,
                sources=[],
                needs_internet=False,
                processing_time=(datetime.now() - start_time).total_seconds()
            )
        
        logger.info(f"üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{user_query}'")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            internet_system = await self._get_internet_system()
            internet_info = await internet_system.get_internet_intelligence(search_query)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã
            combined_response = self._combine_responses(
                original_response, 
                internet_info, 
                user_query
            )
            
            processing_time = (datetime.now() - start_time).total_seconds()
            
            return EnhancedResponse(
                original_response=original_response,
                internet_info=internet_info,
                combined_response=combined_response,
                confidence_score=internet_info.confidence_score,
                sources=internet_info.sources,
                needs_internet=True,
                processing_time=processing_time
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return EnhancedResponse(
                original_response=original_response,
                internet_info=None,
                combined_response=original_response,
                confidence_score=0.0,
                sources=[],
                needs_internet=True,
                processing_time=(datetime.now() - start_time).total_seconds()
            )
    
    def _combine_responses(
        self, 
        original_response: str, 
        internet_info: ProcessedInformation, 
        user_query: str
    ) -> str:
        """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–º–µ–µ—Ç –Ω–∏–∑–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        if internet_info.confidence_score < 0.3:
            return original_response
        
        # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        combined = f"{original_response}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if internet_info.ai_summary:
            combined += "üåê **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞:**\n"
            combined += f"{internet_info.ai_summary}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        if internet_info.key_points:
            combined += "üîë **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
            for i, point in enumerate(internet_info.key_points, 1):
                combined += f"{i}. {point}\n"
            combined += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        if internet_info.sources:
            combined += "üìö **–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**\n"
            for i, source in enumerate(internet_info.sources[:3], 1):
                combined += f"{i}. {source}\n"
        
        return combined
    
    async def process_user_message(
        self, 
        user_query: str, 
        bot_response: str,
        user_id: str = None
    ) -> EnhancedResponse:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
        
        Args:
            user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot_response: –û—Ç–≤–µ—Ç –±–æ—Ç–∞
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏)
            
        Returns:
            EnhancedResponse: –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        """
        logger.info(f"üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_query[:50]}...'")
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        enhanced_response = await self.enhance_response_with_internet(
            user_query, 
            bot_response
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self._log_enhancement(user_query, enhanced_response, user_id)
        
        return enhanced_response
    
    def _log_enhancement(
        self, 
        user_query: str, 
        enhanced_response: EnhancedResponse, 
        user_id: str = None
    ):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"""
        log_data = {
            "timestamp": datetime.now().isoformat(),
            "user_id": user_id,
            "query": user_query,
            "needs_internet": enhanced_response.needs_internet,
            "confidence_score": enhanced_response.confidence_score,
            "processing_time": enhanced_response.processing_time,
            "sources_count": len(enhanced_response.sources)
        }
        
        logger.info(f"üìä –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {json.dumps(log_data, ensure_ascii=False)}")
    
    async def get_internet_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            internet_system = await self._get_internet_system()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            conn = internet_system.db_path
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            
            return {
                "total_searches": 0,
                "successful_enhancements": 0,
                "average_confidence": 0.0,
                "average_processing_time": 0.0,
                "most_common_queries": [],
                "last_enhancement": None
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        if self.internet_system:
            await self.internet_system.close()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
ikar_internet_integration = None

async def get_ikar_internet_integration() -> IKARInternetIntegration:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    global ikar_internet_integration
    if ikar_internet_integration is None:
        ikar_internet_integration = IKARInternetIntegration()
    return ikar_internet_integration

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π IKAR
async def enhance_ikar_response(user_query: str, bot_response: str, user_id: str = None) -> str:
    """
    –£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç IKAR –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    
    Args:
        user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot_response: –û—Ç–≤–µ—Ç –±–æ—Ç–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    """
    try:
        integration = await get_ikar_internet_integration()
        enhanced = await integration.process_user_message(user_query, bot_response, user_id)
        return enhanced.combined_response
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        return bot_response

async def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    integration = await get_ikar_internet_integration()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_cases = [
        "–ö–∞–∫–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ò–ò?",
        "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ–≥–æ–¥–µ –≤ –ú–æ—Å–∫–≤–µ",
        "–ö–∞–∫ –¥–µ–ª–∞?",
        "–ö–∞–∫–∏–µ –Ω–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ —ç—Ç–æ–º –≥–æ–¥—É?"
    ]
    
    for query in test_cases:
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: '{query}'")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        bot_response = "–≠—Ç–æ –º–æ–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–∏—Ö –∑–Ω–∞–Ω–∏–π."
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç
        enhanced = await integration.process_user_message(query, bot_response, "test_user")
        
        print(f"–ù—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {enhanced.needs_internet}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced.confidence_score:.2f}")
        print(f"–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {enhanced.processing_time:.2f}—Å")
        
        if enhanced.needs_internet:
            print(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(enhanced.sources)}")
            print(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:\n{enhanced.combined_response[:200]}...")
        else:
            print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç")
    
    await integration.close()

if __name__ == "__main__":
    asyncio.run(main()) 