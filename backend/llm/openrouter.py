"""
OpenRouter API –∫–ª–∏–µ–Ω—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
"""

import asyncio
import json
import random
import time
import sys
import os
from typing import Dict, List, Optional, Any
import aiohttp

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ sys.path –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from core.memory_injector import get_memory_injector
from utils.logger import get_logger
from config import Config

# –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = get_logger('openrouter')


# –û–±—â–∏–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
class OpenRouterClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter API —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏.

    –í–ê–ñ–ù–û: –Ω–∞—á–∏–Ω–∞—è —Å –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ FastAPI –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞ –æ–∂–∏–¥–∞—é—Ç, —á—Ç–æ
    –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è *–±–µ–∑* –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —á—Ç–æ —É –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥
    ``chat_completion``. –ß—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å –¥–µ—Å—è—Ç–∫–∏ —Ç–∞–∫–∏—Ö –≤—ã–∑–æ–≤–æ–≤, –∑–¥–µ—Å—å
    —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:

    1. ``config`` —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π.  –ï—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äì —Å–æ–∑–¥–∞—ë—Ç—Å—è
       –Ω–æ–≤—ã–π ``Config``.
    2. –î–æ–±–∞–≤–ª–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ ``chat_completion``-–æ–±—ë—Ä—Ç–∫–∞, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Ç–µ –∂–µ
       –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ (``user_message``,
       ``system_prompt``, ``chat_history`` –∏ –¥—Ä.) –∏ –ø—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤ –≤
       ``generate_response``.
    """

    def __init__(self, config: Optional[Config] = None):
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏, —Å–æ–∑–¥–∞—ë–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –≤—ã–∑–æ–≤—ã
        if config is None:
            config = Config()
        self.config = config
        self.api_keys = config.OPENROUTER_API_KEYS
        self.current_key_index = 0
        self.base_url = "https://openrouter.ai/api/v1"
        
        # –õ–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.max_attempts = 3  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏
        self.attempt_count = 0  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã LLM –±–µ—Ä—ë–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π override)
        llm_cfg = getattr(self.config, "LLM_CONFIG", {}) if self.config else {}

        # –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω–∞ –º–æ–¥–µ–ª—å/—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞/–º–∞–∫—Å.—Ç–æ–∫–µ–Ω—ã ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö,
        # –∏–Ω–∞—á–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.
        self.default_model = llm_cfg.get("model", "x-ai/grok-4-fast:free")  # –†–∞–±–æ—á–∞—è –º–æ–¥–µ–ª—å
        self.fallback_model = llm_cfg.get("fallback_model", "deepseek/deepseek-chat-v3.1:free")
        self.max_tokens = llm_cfg.get("max_tokens", 200000)  # –°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        self.temperature = llm_cfg.get("temperature", 0.6)    # –°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é
        self.memory_injector = get_memory_injector()
        self.memory_enabled = True
        self.memory_budget = 0.2  # –°–Ω–∏–∂–∞–µ–º –¥–æ 20% –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
        self.memory_stats = {
            'total_requests': 0,
            'memory_enhanced_requests': 0,
            'memory_chunks_used': 0,
            'average_relevance': 0.0
        }
        
        logger.info(f"OpenRouter –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {len(self.api_keys)} –∫–ª—é—á–∞–º–∏")
        logger.info(f"–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {'–≤–∫–ª—é—á–µ–Ω–∞' if self.memory_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")

    def get_current_api_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ API –∫–ª—é—á–∞"""
        if not self.api_keys:
            raise ValueError("API –∫–ª—é—á–∏ OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return self.api_keys[self.current_key_index]
    
    def rotate_api_key(self):
        """–†–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π"""
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
        logger.info(f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ API –∫–ª—é—á #{self.current_key_index + 1}")
    
    async def generate_response(self, prompt: str, context: str = "", 
                              use_memory: bool = True, memory_budget: float = None,
                              model: str = None, max_tokens: int = None,
                              temperature: float = None, user_id: str = None, **kwargs) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏."""
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self.attempt_count = 0
        
        try:
            self.memory_stats['total_requests'] += 1
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            model = model or self.default_model
            max_tokens = max_tokens or self.max_tokens
            temperature = temperature or self.temperature
            memory_budget = memory_budget or self.memory_budget
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é
            enhanced_prompt = prompt
            memory_analysis = {}
            
            if use_memory and self.memory_enabled:
                try:
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
                    memory_analysis = await self.memory_injector.analyze_memory_usage(prompt)
                    
                    if memory_analysis.get('total_available', 0) > 0:
                        # üîí –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º user_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
                        enhanced_prompt = await self.memory_injector.inject_memory_into_prompt(
                            prompt, context, user_id, memory_budget
                        )
                        
                        self.memory_stats['memory_enhanced_requests'] += 1
                        self.memory_stats['memory_chunks_used'] += memory_analysis.get('total_available', 0)
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                        current_relevance = memory_analysis.get('top_relevance', 0)
                        total_enhanced = self.memory_stats['memory_enhanced_requests']
                        self.memory_stats['average_relevance'] = (
                            (self.memory_stats['average_relevance'] * (total_enhanced - 1) + current_relevance) / total_enhanced
                        )
                        
                        logger.info(f"–ü–∞–º—è—Ç—å –∏–Ω—ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞: {memory_analysis.get('total_available', 0)} —á–∞–Ω–∫–æ–≤, "
                                   f"—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {current_relevance:.2f}")
                    else:
                        logger.debug("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                        
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            
            # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ª–æ–≥: –∫–∞–∫–∞—è –º–æ–¥–µ–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
            logger.info(
                f"üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ‚Äî –º–æ–¥–µ–ª—å: {model}, fallback: {getattr(self, 'fallback_model', '–Ω–µ—Ç')}, "
                f"max_tokens: {max_tokens}, temperature: {temperature}, memory_used: {use_memory and self.memory_enabled}"
            )

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            headers = {
                "Authorization": f"Bearer {self.get_current_api_key()}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/yourusername/ikar",
                "X-Title": "IKAR Collective Mind"
            }
            
            payload = {
                "model": model,
                "messages": [
                    {
                        "role": "user",
                        "content": enhanced_prompt
                    }
                ],
                "max_tokens": max_tokens,
                "temperature": temperature,
                "stream": False,
                **kwargs
            }
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=600)  # 10 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 60 —Å–µ–∫—É–Ω–¥
                ) as response:
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                    self.attempt_count += 1
                    if self.attempt_count >= self.max_attempts:
                        logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({self.max_attempts}), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ API –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    
                    if response.status == 401:
                        logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á #{self.current_key_index + 1}, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {self.attempt_count}/{self.max_attempts})")
                        self.rotate_api_key()
                        return await self.generate_response(
                            prompt, context, use_memory, memory_budget, 
                            model, max_tokens, temperature, user_id, **kwargs
                        )
                    
                    if response.status == 429:
                        logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤, –æ–∂–∏–¥–∞–µ–º... (–ø–æ–ø—ã—Ç–∫–∞ {self.attempt_count}/{self.max_attempts})")
                        await asyncio.sleep(2)  # –£–º–µ–Ω—å—à–∏–ª–∏ –ø–∞—É–∑—É
                        self.rotate_api_key()
                        return await self.generate_response(
                            prompt, context, use_memory, memory_budget,
                            model, max_tokens, temperature, user_id, **kwargs
                        )

                    # 402 ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–ª—é—á–µ
                    if response.status == 402:
                        logger.warning(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤ –Ω–∞ –∫–ª—é—á–µ #{self.current_key_index + 1}, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π (–ø–æ–ø—ã—Ç–∫–∞ {self.attempt_count}/{self.max_attempts})")
                        self.rotate_api_key()
                        return await self.generate_response(
                            prompt, context, use_memory, memory_budget,
                            model, max_tokens, temperature, user_id, **kwargs
                        )
                    
                    # 502 ‚Äî Bad Gateway, –ø—Ä–æ–±—É–µ–º —Ä–µ—Ç—Ä–∞–π 3 —Ä–∞–∑–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 1 —Å–µ–∫
                    if response.status == 502:
                        logger.warning(f"502 Bad Gateway –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, —Ä–µ—Ç—Ä–∞–π #{getattr(self, '_502_retry_count', 0) + 1}/3")
                        if not hasattr(self, '_502_retry_count'):
                            self._502_retry_count = 0
                        
                        self._502_retry_count += 1
                        if self._502_retry_count <= 3:
                            await asyncio.sleep(1)  # –¢–∞–π–º–∞—É—Ç 1 —Å–µ–∫—É–Ω–¥–∞
                            return await self.generate_response(
                                prompt, context, use_memory, memory_budget,
                                model, max_tokens, temperature, user_id, **kwargs
                            )
                        else:
                            # –ü–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á
                            logger.warning("502 —Ä–µ—Ç—Ä–∞–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á")
                            self._502_retry_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                            self.rotate_api_key()
                            return await self.generate_response(
                                prompt, context, use_memory, memory_budget,
                                model, max_tokens, temperature, user_id, **kwargs
                            )
                    
                    response_data = await response.json()
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                    logger.debug(f"–û—Ç–≤–µ—Ç API: {response_data}")
                    
                    if response.status != 200:
                        logger.error(f"–û—à–∏–±–∫–∞ API: {response.status}, {response_data}")
                        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
                    if 'choices' in response_data and response_data['choices']:
                        generated_text = response_data['choices'][0]['message']['content']
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
                        if use_memory and memory_analysis:
                            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é {model} —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏: "
                                       f"{memory_analysis.get('total_available', 0)} —á–∞–Ω–∫–æ–≤")
                        else:
                            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é {model}")
                        
                        logger.debug(
                            "‚úèÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–±—Ä–µ–∑–∞–Ω –¥–æ 200 —Å–∏–º–≤.): %s‚Ä¶",
                            generated_text.replace("\n", " ")[:200]
                        )
                        return generated_text.strip()
                    else:
                        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {response_data}")
                        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {e}")
            
            # –ü—Ä–æ–±—É–µ–º fallback –º–æ–¥–µ–ª—å –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π
            if hasattr(self, 'fallback_model') and self.fallback_model and model != self.fallback_model:
                logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ fallback –º–æ–¥–µ–ª—å: {self.fallback_model}")
                try:
                    return await self.generate_response(
                        prompt, context, use_memory, memory_budget,
                        self.fallback_model, max_tokens, temperature, user_id, **kwargs
                    )
                except Exception as fallback_error:
                    logger.error(f"–û—à–∏–±–∫–∞ fallback –º–æ–¥–µ–ª–∏ {self.fallback_model}: {fallback_error}")
            
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
    
    async def generate_with_memory_analysis(self, prompt: str, context: str = "") -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            # –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏ –¥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            memory_analysis = await self.memory_injector.analyze_memory_usage(prompt)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            start_time = time.time()
            response = await self.generate_response(prompt, context, use_memory=True)
            generation_time = time.time() - start_time
            
            return {
                'response': response,
                'memory_analysis': memory_analysis,
                'generation_time': generation_time,
                'memory_used': memory_analysis.get('total_available', 0) > 0,
                'memory_efficiency': memory_analysis.get('memory_efficiency', 0)
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–∞–º—è—Ç–∏: {e}")
            return {
                'response': "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞.",
                'memory_analysis': {},
                'generation_time': 0,
                'memory_used': False,
                'memory_efficiency': 0
            }
    
    async def generate_philosophical_thought(self, context: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–π –º—ã—Å–ª–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏"""
        prompt = """
        –°–æ–∑–¥–∞–π –≥–ª—É–±–æ–∫—É—é —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –º—ã—Å–ª—å –æ –ø—Ä–∏—Ä–æ–¥–µ —Å–æ–∑–Ω–∞–Ω–∏—è, —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–ª–∏ —ç–≤–æ–ª—é—Ü–∏–∏ —Ä–∞–∑—É–º–∞.
        –ú—ã—Å–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π, –Ω–æ –æ—Å–Ω–æ–≤–∞–Ω–Ω–æ–π –Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–º –æ–ø—ã—Ç–µ.
        –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—É—é –º—É–¥—Ä–æ—Å—Ç—å —Å–µ—Ç–∏, –Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É.
        –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        """
        
        return await self.generate_response(
            prompt, context, use_memory=True, memory_budget=0.4, temperature=0.8
        )
    
    async def generate_crypto_analysis(self, symbol: str, context: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—ã—Ç–∞"""
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É {symbol} –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π –æ–ø—ã—Ç —Å–µ—Ç–∏.
        –£—á—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∞–Ω–∞–ª–∏–∑—ã, –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∏–Ω—Å–∞–π—Ç—ã –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤.
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —É—á–µ—Ç–æ–º:
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
        - –†—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        - –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        - –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –º—É–¥—Ä–æ—Å—Ç–∏ —Å–µ—Ç–∏
        """
        
        return await self.generate_response(
            prompt, context, use_memory=True, memory_budget=0.5
        )
    
    def toggle_memory(self, enabled: bool):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        self.memory_enabled = enabled
        logger.info(f"–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: {'–≤–∫–ª—é—á–µ–Ω–∞' if enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}")
    
    def set_memory_budget(self, budget: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±—é–¥–∂–µ—Ç–∞ –ø–∞–º—è—Ç–∏ (0.0 - 1.0)"""
        self.memory_budget = max(0.0, min(1.0, budget))
        logger.info(f"–ë—é–¥–∂–µ—Ç –ø–∞–º—è—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {self.memory_budget:.1%}")
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        if self.memory_stats['total_requests'] == 0:
            return {
                'total_requests': 0,
                'memory_usage_rate': 0.0,
                'average_chunks_per_request': 0.0,
                'average_relevance': 0.0
            }
        
        return {
            'total_requests': self.memory_stats['total_requests'],
            'memory_enhanced_requests': self.memory_stats['memory_enhanced_requests'],
            'memory_usage_rate': self.memory_stats['memory_enhanced_requests'] / self.memory_stats['total_requests'],
            'average_chunks_per_request': self.memory_stats['memory_chunks_used'] / max(self.memory_stats['memory_enhanced_requests'], 1),
            'average_relevance': self.memory_stats['average_relevance']
        }
    
    async def test_memory_integration(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
        test_prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
        
        try:
            # –¢–µ—Å—Ç –±–µ–∑ –ø–∞–º—è—Ç–∏
            start_time = time.time()
            response_without_memory = await self.generate_response(
                test_prompt, use_memory=False
            )
            time_without_memory = time.time() - start_time
            
            # –¢–µ—Å—Ç —Å –ø–∞–º—è—Ç—å—é
            start_time = time.time()
            response_with_memory = await self.generate_response(
                test_prompt, use_memory=True
            )
            time_with_memory = time.time() - start_time
            
            # –ê–Ω–∞–ª–∏–∑ –ø–∞–º—è—Ç–∏
            memory_analysis = await self.memory_injector.analyze_memory_usage(test_prompt)
            
            return {
                'test_successful': True,
                'memory_available': memory_analysis.get('total_available', 0),
                'response_length_without_memory': len(response_without_memory),
                'response_length_with_memory': len(response_with_memory),
                'time_without_memory': time_without_memory,
                'time_with_memory': time_with_memory,
                'memory_analysis': memory_analysis
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏: {e}")
            return {
                'test_successful': False,
                'error': str(e)
            }

    # ---------------------------------------------------------------------
    # –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    # ---------------------------------------------------------------------

    async def chat_completion(
        self,
        user_message: str,
        system_prompt: str = "",
        chat_history: Optional[List[Dict[str, str]]] = None,
        context: str = "",
        user_id: str = None,
        **kwargs,
    ) -> str:
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞—Ç–Ω–æ-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –º–µ—Ç–æ–¥, –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.

        Parameters
        ----------
        user_message : str
            –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        system_prompt : str, optional
            –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ.
        chat_history : list[dict], optional
            –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å –≤–∏–¥–∞
            ``{"role": "user"|"assistant", "content": "..."}``.
        context : str, optional
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç ‚Äì –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ ``context`` –≤
            ``generate_response``.
        user_id : str, optional
            ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏.
        **kwargs : Any
            –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ ``generate_response``
            (model, max_tokens, temperature, use_memory, memory_budget, ...).
        """

        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
        prompt_parts: List[str] = []
        if system_prompt:
            prompt_parts.append(system_prompt.strip())

        if chat_history:
            for msg in chat_history:
                role = msg.get("role", "user").upper()
                content = msg.get("content", "")
                prompt_parts.append(f"{role}: {content}")

        prompt_parts.append(user_message.strip())

        full_prompt = "\n".join(prompt_parts)

        # üîí –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º user_id –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–∞–º—è—Ç–∏
        return await self.generate_response(full_prompt, context=context, user_id=user_id, **kwargs)

    # ------------------------------------------------------------------
    # Vision: –∑–∞–ø—Ä–æ—Å—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    # ------------------------------------------------------------------

    async def _try_model_with_key(
        self,
        model: str,
        messages: List[Dict[str, Any]],
        params: Dict[str, Any],
        api_key: str,
    ) -> Optional[str]:
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –ø—Ä–∏ –æ—à–∏–±–∫–µ, —Å—Ç—Ä–æ–∫—É "RATE_LIMIT_EXCEEDED" –ø—Ä–∏ 429,
        –ª–∏–±–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
        """

        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/ikar-project/ikar",
            "X-Title": "IKAR Vision"
        }

        payload = {
            "model": model,
            "messages": messages,
            **params,
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=600),  # 10 –º–∏–Ω—É—Ç –≤–º–µ—Å—Ç–æ 90 —Å–µ–∫—É–Ω–¥
                ) as resp:
                    if resp.status == 429:
                        return "RATE_LIMIT_EXCEEDED"
                    if resp.status == 402:
                        return "INSUFFICIENT_CREDITS"
                    if resp.status != 200:
                        text = await resp.text()
                        logger.error(f"[VISION] –û—à–∏–±–∫–∞ {resp.status}: {text}")
                        return None
                    data = await resp.json()
                    if data.get("choices"):
                        return data["choices"][0]["message"]["content"].strip()
                    return None
        except Exception as exc:
            logger.error(f"[VISION] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {exc}")
            return None

    async def chat_completion_with_image(
        self,
        user_message: str,
        image_base64: str,
        system_prompt: str = "",
        model: str = "qwen/qwen2.5-vl-72b-instruct:free",
        max_tokens: int = 2000,
        **kwargs,
    ) -> Optional[str]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (base64)."""

        if not self.api_keys:
            logger.error("‚ùå OPENROUTER API –ö–õ–Æ–ß–ò –ù–ï –ù–ê–°–¢–†–û–ï–ù–´!")
            return None

        messages = []
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})

        messages.append({
            "role": "user",
            "content": [
                {"type": "text", "text": user_message},
                {
                    "type": "image_url",
                    "image_url": {"url": f"data:image/jpeg;base64,{image_base64}"},
                },
            ],
        })

        params = {"max_tokens": max_tokens, **kwargs}

        logger.info(f"üñºÔ∏è [VISION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ {model}")

        # –†–æ—Ç–∞—Ü–∏—è –∫–ª—é—á–µ–π –≤—Ä—É—á–Ω—É—é: –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—Å–µ –∫–ª—é—á–∏
        for api_key in self.api_keys:
            key_suffix = api_key[-10:] if len(api_key) > 10 else api_key
            logger.info(f"üîë [VISION] –ü—Ä–æ–±—É–µ–º –∫–ª—é—á ...{key_suffix}")

            result = await self._try_model_with_key(model, messages, params, api_key)

            if result and result not in ("RATE_LIMIT_EXCEEDED", "INSUFFICIENT_CREDITS"):
                logger.info(f"‚úÖ [VISION] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {result[:100]}‚Ä¶")
                return result
            elif result in ("RATE_LIMIT_EXCEEDED", "INSUFFICIENT_CREDITS"):
                logger.warning(
                    f"‚ö†Ô∏è [VISION] –ö–ª—é—á ...{key_suffix} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (rate/credits). –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π"
                )
                continue

            # –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∫–ª—é—á–∞–º–∏
            await asyncio.sleep(1)

        logger.error("‚ùå [VISION] –í—Å–µ –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return None


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
openrouter_client = None

def get_openrouter_client(config: Config = None) -> OpenRouterClient:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ OpenRouter –∫–ª–∏–µ–Ω—Ç–∞"""
    global openrouter_client
    if openrouter_client is None and config:
        openrouter_client = OpenRouterClient(config)
    return openrouter_client


def get_llm_client() -> Optional[OpenRouterClient]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OpenRouterClient (singleton pattern)
    
    Returns:
        OpenRouterClient –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    """
    return get_openrouter_client()


def init_llm_client(config: Config) -> OpenRouterClient:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OpenRouterClient
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        
    Returns:
        OpenRouterClient: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    """
    return get_openrouter_client(config)