"""
üöÄ –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞ IKAR —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
"""

import asyncio
import logging
import sys
import os
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ sys.path
sys.path.append(str(Path(__file__).parent))

from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –ò–º–ø–æ—Ä—Ç—ã API
from api import routes
from api.admin_api import admin_router
from api.telegram_polling import start_telegram_polling

# –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
from memory.memory_integration import initialize_smart_memory_system
from utils.component_manager import get_component_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import os
os.makedirs('logs', exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s',
    handlers=[
        logging.FileHandler('logs/chatumba.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger("chatumba.main")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="IKAR (–ß–∞—Ç—É–º–±–∞) API",
    description="AI –ö–æ–º–ø–∞–Ω—å–æ–Ω —Å –î—É—à–æ–π –∏ –£–º–Ω–æ–π –ü–∞–º—è—Ç—å—é",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.include_router(routes.router, prefix="/api")
app.include_router(admin_router, prefix="/api")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
frontend_path = Path(__file__).parent.parent / "frontend" / "public"
if frontend_path.exists():
    app.mount("/", StaticFiles(directory=str(frontend_path), html=True), name="static")

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ IKAR (–ß–∞—Ç—É–º–±–∞) v2.0.0")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs("data", exist_ok=True)
        os.makedirs("logs", exist_ok=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        logger.info("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏...")
        await initialize_smart_memory_system()
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–º–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø
        logger.info("üìö –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø...")
        from memory.startup_memory_loader import initialize_memory_from_existing_groups
        loader = await initialize_memory_from_existing_groups()
        stats = await loader.get_loading_stats()
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {stats['processed_messages']} —Å–æ–æ–±—â–µ–Ω–∏–π, {stats['created_chunks']} —á–∞–Ω–∫–æ–≤ –∏–∑ {stats['total_chats']} —á–∞—Ç–æ–≤")
        logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {stats['processed_chats']}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram polling
        logger.info("üì± –ó–∞–ø—É—Å–∫ Telegram polling...")
        asyncio.create_task(start_telegram_polling())
        logger.info("‚úÖ Telegram polling –∑–∞–ø—É—â–µ–Ω")
        
        logger.info("üéâ IKAR –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã IKAR...")
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ—á–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        from memory.memory_integration import get_memory_integration
        integration = get_memory_integration()
        integration.stop_optimization()
        
        logger.info("‚úÖ IKAR –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return {"message": "IKAR (–ß–∞—Ç—É–º–±–∞) API v2.0.0 —Å –£–º–Ω–æ–π –ü–∞–º—è—Ç—å—é"}

@app.get("/api/startup/loader/stats")
async def get_startup_loader_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        from memory.startup_memory_loader import get_startup_loader
        loader = get_startup_loader()
        stats = await loader.get_loading_stats()
        
        from memory.memory_integration import get_memory_integration
        integration = get_memory_integration()
        memory_stats = await integration.get_memory_stats()
        
        return {
            "status": "success",
            "loader_stats": stats,
            "memory_stats": memory_stats
        }
        
    except Exception as e:
        return {
            "status": "error",
            "error": str(e)
        }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from memory.memory_integration import get_memory_integration
        integration = get_memory_integration()
        
        if integration.initialized:
            memory_stats = await integration.get_memory_stats()
            return {
                "status": "healthy",
                "version": "2.0.0",
                "memory_system": "active",
                "memory_stats": memory_stats
            }
        else:
            return {
                "status": "initializing",
                "version": "2.0.0",
                "memory_system": "initializing"
            }
            
    except Exception as e:
        return {
            "status": "error",
            "version": "2.0.0",
            "error": str(e)
        }

@app.get("/health/llm")
async def health_llm():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ LLM —á–µ—Ä–µ–∑ OpenRouter.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∏ –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –Ω–∞ –ø–∏–Ω–≥.
    """
    try:
        cm = get_component_manager()
        llm = cm.get_llm_client()
        if not llm:
            return {"status": "error", "error": "LLM client not initialized"}

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –≤—ã–∑–æ–≤
        response = await llm.chat_completion(
            user_message="ping",
            system_prompt="healthcheck",
            temperature=0.0,
            max_tokens=64,
        )
        return {"status": "ok", "response": response[:200] if response else None}
    except Exception as e:
        return {"status": "error", "error": str(e)}

@app.get("/api/health/llm")
async def api_health_llm():
    """–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ health LLM –ø–æ–¥ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å–æ —Å—Ç–∞—Ç–∏–∫–æ–π."""
    return await health_llm()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=6767,
        reload=False,
        log_level="info"
    )
