#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π ElevenLabs –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∑–≤—É—á–∫–∏
"""

import os
import sys
import requests
import json
from pathlib import Path

def load_env_file():
    """–ß–∏—Ç–∞–µ—Ç .env —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
    env_path = Path(__file__).parent / '.env'
    env_vars = {}
    
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    try:
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
        print("‚úÖ .env —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω")
        return env_vars
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")
        return None

def test_elevenlabs_api(api_key):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API ElevenLabs"""
    base_url = "https://api.elevenlabs.io"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞...")
    try:
        response = requests.get(
            f"{base_url}/v1/voices",
            headers={"xi-api-key": api_key}
        )
        
        if response.status_code == 200:
            voices = response.json()
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(voices.get('voices', []))} –≥–æ–ª–æ—Å–æ–≤")
            
            # –ò—â–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –≥–æ–ª–æ—Å
            russian_voices = []
            for voice in voices.get('voices', []):
                if 'russian' in voice.get('name', '').lower() or 'ru' in voice.get('name', '').lower():
                    russian_voices.append(voice)
            
            if russian_voices:
                print("üá∑üá∫ –ù–∞–π–¥–µ–Ω—ã —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –≥–æ–ª–æ—Å–∞:")
                for voice in russian_voices[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                    print(f"  - {voice['name']} (ID: {voice['voice_id']})")
                voice_id = russian_voices[0]['voice_id']
            else:
                print("‚ö†Ô∏è –†—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")
                voice_id = voices['voices'][0]['voice_id']
                print(f"  - {voices['voices'][0]['name']} (ID: {voice_id})")
            
            return voice_id
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥–æ–ª–æ—Å–æ–≤: {e}")
        return None

def generate_speech(api_key, voice_id, text):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–∑–≤—É—á–∫—É —Ç–µ–∫—Å—Ç–∞"""
    base_url = "https://api.elevenlabs.io"
    
    print(f"\nüé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞: '{text}'")
    
    try:
        response = requests.post(
            f"{base_url}/v1/text-to-speech/{voice_id}",
            headers={
                "xi-api-key": api_key,
                "Content-Type": "application/json"
            },
            json={
                "text": text,
                "model_id": "eleven_multilingual_v2",
                "voice_settings": {
                    "stability": 0.5,
                    "similarity_boost": 0.5
                }
            }
        )
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            audio_path = Path(__file__).parent / "test_audio.mp3"
            with open(audio_path, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ –û–∑–≤—É—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: {audio_path}")
            print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {e}")
        return False

def main():
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs API")
    print("=" * 40)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = load_env_file()
    if not env_vars:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = env_vars.get('ELEVEN_API')
    if not api_key:
        print("‚ùå ELEVEN_API –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: {api_key[:10]}...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    voice_id = test_elevenlabs_api(api_key)
    if not voice_id:
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É
    test_text = "–ü—Ä–∏–≤–µ—Ç –º–∏—Ä –∫–∞–∫ –¥–µ–ª–∞"  # 5 —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    success = generate_speech(api_key, voice_id, test_text)
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == "__main__":
    main()
