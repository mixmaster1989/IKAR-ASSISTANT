#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–±–æ—Ä–∞ –∫–ª—é—á–µ–π ElevenLabs
–ü—Ä–∏ –æ—à–∏–±–∫–µ –Ω–∞ –æ–¥–Ω–æ–º –∫–ª—é—á–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
"""

import os
import sys
import requests
import json
import time
from pathlib import Path

def load_env_file():
    """–ß–∏—Ç–∞–µ—Ç .env —Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏"""
    env_path = Path(__file__).parent / '.env'
    env_vars = {}
    
    if not env_path.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None
    
    try:
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
        return env_vars
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞: {e}")
        return None

def get_eleven_keys(env_vars):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏ ElevenLabs –∏–∑ .env —Ñ–∞–π–ª–∞"""
    keys = []
    for key, value in env_vars.items():
        if key.startswith('ELEVEN_') and value.startswith('sk_'):
            keys.append((key, value))
    return keys

def test_single_key(api_key, key_name, test_text="–ü—Ä–∏–≤–µ—Ç –º–∏—Ä –∫–∞–∫ –¥–µ–ª–∞"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–ª—é—á API"""
    base_url = "https://api.elevenlabs.io"
    
    print(f"üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á: {key_name}")
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
        response = requests.get(
            f"{base_url}/v1/voices",
            headers={"xi-api-key": api_key},
            timeout=10
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤: {response.status_code} - {response.text[:100]}")
            return False, f"HTTP {response.status_code}"
        
        voices = response.json()
        if not voices.get('voices'):
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤")
            return False, "No voices"
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≥–æ–ª–æ—Å
        voice_id = voices['voices'][0]['voice_id']
        voice_name = voices['voices'][0]['name']
        print(f"üé§ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å: {voice_name} (ID: {voice_id})")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—á—å
        response = requests.post(
            f"{base_url}/v1/text-to-speech/{voice_id}",
            headers={
                "xi-api-key": api_key,
                "Content-Type": "application/json"
            },
            json={
                "text": test_text,
                "model_id": "eleven_multilingual_v2",
                "voice_settings": {
                    "stability": 0.5,
                    "similarity_boost": 0.5
                }
            },
            timeout=30
        )
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
            audio_path = Path(__file__).parent / f"audio_{key_name}.mp3"
            with open(audio_path, 'wb') as f:
                f.write(response.content)
            
            print(f"‚úÖ –£—Å–ø–µ—Ö! –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {audio_path}")
            print(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(response.content)} –±–∞–π—Ç")
            return True, "Success"
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: {response.status_code} - {response.text[:100]}")
            return False, f"TTS HTTP {response.status_code}"
            
    except requests.exceptions.Timeout:
        print("‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
        return False, "Timeout"
    except requests.exceptions.RequestException as e:
        print(f"üåê –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        return False, f"Network: {str(e)[:50]}"
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False, f"Exception: {str(e)[:50]}"

def cycle_through_keys(keys, cycles=5, pause_between_cycles=10):
    """–¶–∏–∫–ª–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –∫–ª—é—á–∏"""
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä {len(keys)} –∫–ª—é—á–µ–π")
    print(f"üìä –í—Å–µ–≥–æ —Ü–∏–∫–ª–æ–≤: {cycles}, –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏: {pause_between_cycles} —Å–µ–∫")
    print("=" * 60)
    
    for cycle in range(1, cycles + 1):
        print(f"\nüîÑ –¶–ò–ö–õ {cycle}/{cycles}")
        print("-" * 40)
        
        successful_keys = 0
        failed_keys = 0
        
        for i, (key_name, api_key) in enumerate(keys, 1):
            print(f"\n[{i}/{len(keys)}] –ö–ª—é—á: {key_name}")
            success, error = test_single_key(api_key, key_name)
            
            if success:
                successful_keys += 1
                print(f"‚úÖ –ö–ª—é—á {key_name} —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                failed_keys += 1
                print(f"‚ùå –ö–ª—é—á {key_name} –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {error}")
                print("‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª—é—á—É...")
        
        print(f"\nüìä –ò—Ç–æ–≥–∏ —Ü–∏–∫–ª–∞ {cycle}:")
        print(f"   ‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π: {successful_keys}")
        print(f"   ‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∫–ª—é—á–µ–π: {failed_keys}")
        
        if cycle < cycles:
            print(f"\n‚è≥ –ü–∞—É–∑–∞ {pause_between_cycles} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º...")
            time.sleep(pause_between_cycles)
    
    print(f"\nüéâ –í—Å–µ {cycles} —Ü–∏–∫–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

def main():
    print("üîÑ –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∫–ª—é—á–µ–π ElevenLabs")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_vars = load_env_file()
    if not env_vars:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ ElevenLabs
    keys = get_eleven_keys(env_vars)
    if not keys:
        print("‚ùå –ö–ª—é—á–∏ ElevenLabs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
        return
    
    print(f"üîë –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")
    for key_name, key_value in keys:
        print(f"   - {key_name}: {key_value[:15]}...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–±–æ—Ä
    cycle_through_keys(keys, cycles=5, pause_between_cycles=10)

if __name__ == "__main__":
    main()
