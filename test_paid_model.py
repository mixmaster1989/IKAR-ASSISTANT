#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–ª–∞—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ OpenRouter
"""

import asyncio
import aiohttp
import json
import os
from dotenv import load_dotenv

load_dotenv('/root/IKAR-ASSISTANT/.env')

async def test_paid_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–ª–∞—Ç–Ω—É—é –º–æ–¥–µ–ª—å"""
    
    api_key = os.getenv('OPENROUTER_API_KEY_PAID')
    if not api_key:
        print("‚ùå –ü–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á: {api_key[:20]}...")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/yourusername/ikar",
        "X-Title": "IKAR Test"
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
    payload = {
        "model": "x-ai/grok-4-fast",
        "messages": [
            {
                "role": "user",
                "content": "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ: –∫–∞–∫ –¥–µ–ª–∞?"
            }
        ],
        "max_tokens": 100,
        "temperature": 0.3
    }
    
    print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Grok 4 Fast...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    data = await response.json()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º usage
                    if 'usage' in data:
                        usage = data['usage']
                        print(f"üìà –¢–û–ö–ï–ù–´:")
                        print(f"   –í—Ö–æ–¥–Ω—ã–µ: {usage.get('prompt_tokens', 0):,}")
                        print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ: {usage.get('completion_tokens', 0):,}")
                        print(f"   –í—Å–µ–≥–æ: {usage.get('total_tokens', 0):,}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
                    if 'choices' in data and data['choices']:
                        answer = data['choices'][0]['message']['content']
                        print(f"ü§ñ –û–¢–í–ï–¢: {answer}")
                        print("‚úÖ –ü–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    else:
                        print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")
                        print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(data, indent=2, ensure_ascii=False)}")
                else:
                    text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status}: {text}")
                    
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    asyncio.run(test_paid_model())
