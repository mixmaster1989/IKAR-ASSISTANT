#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∫–ª—é—á–µ–π ElevenLabs
"""
import os
import requests
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv("/root/IKAR-ASSISTANT/.env")

def test_elevenlabs_key(api_key, key_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∫–ª—é—á ElevenLabs"""
    print(f"\nüîë –¢–µ—Å—Ç–∏—Ä—É–µ–º {key_name}: {api_key[:20]}...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    url = "https://api.elevenlabs.io/v1/user"
    headers = {"xi-api-key": api_key}
    
    try:
        response = requests.get(url, headers=headers, timeout=10)
        if response.status_code == 200:
            data = response.json()
            subscription = data.get('subscription', {})
            character_count = subscription.get('character_count', 0)
            character_limit = subscription.get('character_limit', 0)
            print(f"‚úÖ {key_name}: {character_count}/{character_limit} —Å–∏–º–≤–æ–ª–æ–≤")
            return True, character_count, character_limit
        else:
            print(f"‚ùå {key_name}: –û—à–∏–±–∫–∞ {response.status_code} - {response.text[:100]}")
            return False, 0, 0
    except Exception as e:
        print(f"‚ùå {key_name}: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
        return False, 0, 0

def test_tts_generation(api_key, key_name):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é TTS"""
    print(f"\nüé§ –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS –¥–ª—è {key_name}...")
    
    url = "https://api.elevenlabs.io/v1/text-to-speech/pNInz6obpgDQGcFmaJgB"
    headers = {
        "xi-api-key": api_key,
        "Content-Type": "application/json"
    }
    
    payload = {
        "text": "–¢–µ—Å—Ç –æ–∑–≤—É—á–∫–∏",
        "model_id": "eleven_multilingual_v2",
        "voice_settings": {
            "stability": 0.5,
            "similarity_boost": 0.5
        }
    }
    
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        if response.status_code == 200:
            print(f"‚úÖ {key_name}: TTS —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå {key_name}: TTS –æ—à–∏–±–∫–∞ {response.status_code} - {response.text[:200]}")
            return False
    except Exception as e:
        print(f"‚ùå {key_name}: TTS –∏—Å–∫–ª—é—á–µ–Ω–∏–µ - {e}")
        return False

def main():
    print("üß™ –¢–ï–°–¢ –ö–õ–Æ–ß–ï–ô ELEVENLABS")
    print("=" * 50)
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
    keys = []
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á
    main_key = os.getenv("ELEVEN_API") or os.getenv("ELEVEN_API_KEY")
    if main_key:
        keys.append(("ELEVEN_API", main_key))
    
    # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
    for i in range(2, 11):
        key = os.getenv(f"ELEVEN_API{i}")
        if key:
            keys.append((f"ELEVEN_API{i}", key))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}")
    
    working_keys = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
    for key_name, api_key in keys:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        works, used, limit = test_elevenlabs_key(api_key, key_name)
        
        if works:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS
            tts_works = test_tts_generation(api_key, key_name)
            if tts_works:
                working_keys.append((key_name, api_key, used, limit))
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìã –ò–¢–û–ì–ò:")
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π: {len(working_keys)}")
    print(f"‚ùå –ù–µ—Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π: {len(keys) - len(working_keys)}")
    
    if working_keys:
        print("\nüéØ –†–ê–ë–û–ß–ò–ï –ö–õ–Æ–ß–ò:")
        for key_name, api_key, used, limit in working_keys:
            remaining = limit - used
            print(f"  {key_name}: {used}/{limit} —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining})")
    else:
        print("\nüíÄ –ù–ï–¢ –†–ê–ë–û–ß–ò–• –ö–õ–Æ–ß–ï–ô!")

if __name__ == "__main__":
    main()
