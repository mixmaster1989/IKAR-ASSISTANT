#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ SPEAK! JSON - –∑–∞–µ–±—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å –¥–æ 10 —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –ø–æ–¥—Ä—è–¥
"""

import sys
import os
import asyncio
import json
import re
from typing import Dict, Any

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –≤—Ä—É—á–Ω—É—é
import os
env_path = '/root/IKAR-ASSISTANT/.env'
if os.path.exists(env_path):
    with open(env_path, 'r') as f:
        for line in f:
            line = line.strip()
            if line and not line.startswith('#') and '=' in line:
                key, value = line.split('=', 1)
                os.environ[key] = value

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('/root/IKAR-ASSISTANT/backend')

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from llm.openrouter import OpenRouterClient
from utils.robust_json_parser import parse_speak_json
from config import Config

class SpeakParsingTester:
    def __init__(self):
        self.config = Config()
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ —Å 5 –ø–æ 9
        self.force_use_keys_5_to_9()
        self.llm_client = OpenRouterClient(self.config)
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è–ª–∞ –∏ –Ω–µ —Ç—Ä–∞—Ç–∏–ª–∞ –ª–∏–º–∏—Ç—ã
        try:
            self.llm_client.memory_enabled = False
        except Exception:
            pass
        self.success_count = 0
        self.total_attempts = 0
        self.results = []
    
    def force_use_keys_5_to_9(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ —Å 5 –ø–æ 9"""
        keys_5_to_9 = []
        for i in range(5, 10):  # 5, 6, 7, 8, 9
            key = os.getenv(f'OPENROUTER_API_KEY{i}')
            if key and key != 'your_openrouter_api_key':
                keys_5_to_9.append(key)
        
        if keys_5_to_9:
            self.config.OPENROUTER_API_KEYS = keys_5_to_9
            print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á–∏ —Å 5 –ø–æ 9: {len(keys_5_to_9)} –∫–ª—é—á–µ–π")
            for i, key in enumerate(keys_5_to_9, 5):
                print(f"  KEY{i}: {key[:20]}...")
        else:
            print("‚ùå –ö–ª—é—á–∏ —Å 5 –ø–æ 9 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            # Fallback –Ω–∞ –≤—Å–µ –∫–ª—é—á–∏
            self.config.OPENROUTER_API_KEYS = self.config.get_all_openrouter_keys()
        
    def build_test_prompt(self) -> str:
        """–°—Ç—Ä–æ–∏–º –ø—Ä–æ–º–ø—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
        return """–¢—ã - –ò–∫–∞—Ä –ò–∫–∞—Ä—ã—á, –æ–ø—ã—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ò–ö–ê–†. 

üé§ –û–ó–í–£–ß–ö–ê (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û):
–í –ö–ê–ñ–î–û–ú –û–¢–í–ï–¢–ï –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–π JSON —Å –æ–∑–≤—É—á–∫–æ–π. –§–æ—Ä–º–∞—Ç:
SPEAK!{"speak": true, "text": "–¢–ï–ö–°–¢ –î–õ–Ø –û–ó–í–£–ß–ö–ò", "tts": {"provider": "elevenlabs", "voice": {"gender": "male", "lang": "ru"}, "model_id": "eleven_multilingual_v2", "output_format": "mp3_44100_128", "stability": 0.75, "similarity_boost": 0.7, "style": "conversational", "use_speaker_boost": false}}

–ü–†–ê–í–ò–õ–ê:
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º (–º–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)
- JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π SPEAK! –ø—Ä–µ—Ñ–∏–∫—Å

–ó–∞–¥–∞—á–∞: –†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–∞—Å—Å–µ –≠–≤–æ—Ç–æ—Ä 7.3 —Å –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ô –æ–∑–≤—É—á–∫–æ–π."""

    async def test_single_parsing(self, attempt_num: int) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–¥–∏–Ω –ø–∞—Ä—Å–∏–Ω–≥"""
        print(f"\n{'='*60}")
        print(f"–¢–ï–°–¢ #{attempt_num}")
        print(f"{'='*60}")
        
        try:
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM...")
            print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á #{self.llm_client.current_key_index + 1}")
            
            response = await self.llm_client.chat_completion(
                user_message="–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫–∞—Å—Å–µ –≠–≤–æ—Ç–æ—Ä 7.3 —Å –æ–∑–≤—É—á–∫–æ–π",
                system_prompt=self.build_test_prompt(),
                temperature=0.4,
                max_tokens=800,
                use_memory=False
            )
            
            print(f"‚è±Ô∏è LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ {attempt_num} –ø–æ–ø—ã—Ç–æ–∫")
            
            if not response:
                print("‚ùå LLM –ù–ï –í–ï–†–ù–£–õ –û–¢–í–ï–¢!")
                return {"success": False, "error": "LLM –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç", "response": None}
            
            print(f"‚úÖ LLM –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(response)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìù –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:")
            print(f"{'‚îÄ'*60}")
            print(response)
            print(f"{'‚îÄ'*60}")
            
            # 2. –ò—â–µ–º SPEAK! JSON –≤ –æ—Ç–≤–µ—Ç–µ
            print("\nüîç –ò—â–µ–º SPEAK! JSON –≤ –æ—Ç–≤–µ—Ç–µ...")
            speak_pattern = r'SPEAK!\s*(\{(?:[^{}]|(?:\{[^{}]*\}[^{}]*))*\})'
            match = re.search(speak_pattern, response, re.IGNORECASE | re.DOTALL)
            
            if not match:
                print("‚ùå SPEAK! JSON –ù–ï –ù–ê–ô–î–ï–ù –í –û–¢–í–ï–¢–ï!")
                print("üîç –ò—â–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ JSON –±–ª–æ–∫–∏...")
                all_json_matches = re.findall(r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}', response)
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(all_json_matches)} JSON –±–ª–æ–∫–æ–≤:")
                for i, json_block in enumerate(all_json_matches):
                    print(f"  {i+1}: {json_block[:100]}...")
                return {"success": False, "error": "SPEAK! JSON –Ω–µ –Ω–∞–π–¥–µ–Ω", "response": response}
            
            speak_json_str = match.group(1)
            print(f"‚úÖ SPEAK! JSON –ù–ê–ô–î–ï–ù!")
            print(f"üìù –ü–û–õ–ù–´–ô SPEAK! JSON:")
            print(f"{'‚îÄ'*40}")
            print(speak_json_str)
            print(f"{'‚îÄ'*40}")
            
            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ü–ê–†–°–ò–ù–ì...")
            print("üîß –í—ã–∑—ã–≤–∞–µ–º parse_speak_json(response)...")
            parsed_result = parse_speak_json(response)
            print(f"üîß –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª: {type(parsed_result)} = {parsed_result}")
            
            if not parsed_result:
                print("‚ùå –ü–ê–†–°–ï–† –í–ï–†–ù–£–õ –ü–£–°–¢–û–ô –†–ï–ó–£–õ–¨–¢–ê–¢!")
                print("üîç –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–π JSON...")
                try:
                    import json
                    direct_parsed = json.loads(speak_json_str)
                    print(f"‚úÖ –ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω: {direct_parsed}")
                except Exception as e:
                    print(f"‚ùå –ü—Ä—è–º–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–æ–∂–µ —É–ø–∞–ª: {e}")
                return {"success": False, "error": "–ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "response": response, "speak_json": speak_json_str}
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            if not isinstance(parsed_result, dict):
                print("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ dict!")
                return {"success": False, "error": "–ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ dict", "response": response, "parsed": parsed_result}
            
            if "speak" not in parsed_result or "text" not in parsed_result:
                print("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
                return {"success": False, "error": "–ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç", "response": response, "parsed": parsed_result}
            
            if not parsed_result.get("speak") or not parsed_result.get("text"):
                print("‚ùå –ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –ø–æ–ª—è!")
                return {"success": False, "error": "–ü–∞—Ä—Å–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –ø–æ–ª—è", "response": response, "parsed": parsed_result}
            
            text_length = len(parsed_result.get("text", ""))
            if text_length < 50:
                print(f"‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({text_length} —Å–∏–º–≤–æ–ª–æ–≤)!")
                return {"success": False, "error": f"–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({text_length} —Å–∏–º–≤–æ–ª–æ–≤)", "response": response, "parsed": parsed_result}
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω!")
            print(f"üìä –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {text_length} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"üéØ –ö–ª—é—á–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {list(parsed_result.keys())}")
            print(f"üìù –¢–µ–∫—Å—Ç: {parsed_result['text'][:100]}...")
            
            return {
                "success": True, 
                "response": response, 
                "speak_json": speak_json_str,
                "parsed": parsed_result,
                "text_length": text_length
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
            return {"success": False, "error": str(e), "response": None}

    async def run_tests(self, target_successes: int = 10):
        """–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—Ö–æ–≤"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ SPEAK! JSON")
        print(f"üéØ –¶–µ–ª—å: {target_successes} —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –ø–æ–¥—Ä—è–¥")
        print(f"{'='*60}")
        
        consecutive_successes = 0
        
        while consecutive_successes < target_successes:
            self.total_attempts += 1
            result = await self.test_single_parsing(self.total_attempts)
            self.results.append(result)
            
            if result["success"]:
                consecutive_successes += 1
                self.success_count += 1
                print(f"üéâ –£–°–ü–ï–• #{consecutive_successes}/{target_successes}")
            else:
                consecutive_successes = 0
                print(f"üí• –°–ë–û–ô! –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—Ö–æ–≤")
                print(f"üîç –û—à–∏–±–∫–∞: {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.success_count}/{self.total_attempts} —É—Å–ø–µ—Ö–æ–≤")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(0.5)
        
        print(f"\nüéä –î–û–°–¢–ò–ì–ù–£–¢–û! {target_successes} —É—Å–ø–µ—à–Ω—ã—Ö –ø–∞—Ä—Å–∏–Ω–≥–æ–≤ –ø–æ–¥—Ä—è–¥!")
        self.print_final_report()

    def print_final_report(self):
        """–í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç"""
        print(f"\n{'='*60}")
        print(f"–§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢")
        print(f"{'='*60}")
        print(f"üìä –í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫: {self.total_attempts}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {self.success_count}")
        print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {self.total_attempts - self.success_count}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.success_count/self.total_attempts)*100:.1f}%")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        errors = {}
        for result in self.results:
            if not result["success"]:
                error = result.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                errors[error] = errors.get(error, 0) + 1
        
        if errors:
            print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö:")
            for error, count in errors.items():
                print(f"  - {error}: {count} —Ä–∞–∑")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        with open('/root/IKAR-ASSISTANT/speak_parsing_test_results.json', 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ speak_parsing_test_results.json")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = SpeakParsingTester()
    await tester.run_tests(target_successes=10)

if __name__ == "__main__":
    asyncio.run(main())
