#!/usr/bin/env python3
"""
–≠–∫—Å–ø–æ—Ä—Ç —á–∞–Ω–∫–æ–≤ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
–í—ã–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –∑–Ω–∞–Ω–∏—è –±–æ—Ç–∞ –æ –≥—Ä—É–ø–ø–∞—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
"""

import sqlite3
import json
from datetime import datetime
from pathlib import Path
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

def export_memory_chunks():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —á–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "data/smart_memory.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print("üß† –≠–ö–°–ü–û–†–¢ –ß–ê–ù–ö–û–í –ü–ê–ú–Ø–¢–ò –ë–û–¢–ê")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        cursor.execute("SELECT DISTINCT chat_id FROM memory_chunks")
        chat_ids = [row[0] for row in cursor.fetchall()]
        
        if not chat_ids:
            print("‚ùå –ß–∞–Ω–∫–∏ –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø —Å —á–∞–Ω–∫–∞–º–∏: {len(chat_ids)}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_dir = Path("exported_memory")
        export_dir.mkdir(exist_ok=True)
        
        total_chunks = 0
        
        for chat_id in chat_ids:
            print(f"\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥—Ä—É–ø–ø—É: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã
            cursor.execute("""
                SELECT id, topic, content, created_at, source_period_start, source_period_end, relevance_base, message_count, participants
                FROM memory_chunks 
                WHERE chat_id = ?
                ORDER BY created_at ASC
            """, (chat_id,))
            
            chunks = cursor.fetchall()
            
            if not chunks:
                print(f"   ‚ö†Ô∏è –ß–∞–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≥—Ä—É–ø–ø—ã {chat_id}")
                continue
            
            print(f"   üì¶ –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –≥—Ä—É–ø–ø—ã
            filename = f"group_{chat_id}_memory.txt"
            filepath = export_dir / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"üß† –ü–ê–ú–Ø–¢–¨ –ë–û–¢–ê –û –ì–†–£–ü–ü–ï {chat_id}\n")
                f.write(f"üìÖ –≠–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"üìä –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}\n")
                f.write("=" * 80 + "\n\n")
                
                for i, chunk in enumerate(chunks, 1):
                    chunk_id, topic, content, created_at, start_time, end_time, relevance, msg_count, participants = chunk
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º participants –∏–∑ JSON
                    try:
                        participants_list = json.loads(participants) if participants else []
                    except:
                        participants_list = []
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
                    created_str = datetime.fromtimestamp(created_at).strftime('%Y-%m-%d %H:%M:%S')
                    start_str = datetime.fromtimestamp(start_time).strftime('%Y-%m-%d %H:%M:%S') if start_time else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    end_str = datetime.fromtimestamp(end_time).strftime('%Y-%m-%d %H:%M:%S') if end_time else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    f.write(f"üì¶ –ß–ê–ù–ö #{i}\n")
                    f.write(f"üÜî ID: {chunk_id}\n")
                    f.write(f"üìã –¢–ï–ú–ê: {topic}\n")
                    f.write(f"üìÖ –°–û–ó–î–ê–ù: {created_str}\n")
                    f.write(f"‚è∞ –ü–ï–†–ò–û–î: {start_str} - {end_str}\n")
                    f.write(f"‚≠ê –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨: {relevance:.3f}\n")
                    f.write(f"üí¨ –°–û–û–ë–©–ï–ù–ò–ô: {msg_count}\n")
                    f.write(f"üë• –£–ß–ê–°–¢–ù–ò–ö–ò: {', '.join(participants_list) if participants_list else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n")
                    f.write(f"üìù –°–û–î–ï–†–ñ–ê–ù–ò–ï:\n{content}\n")
                    f.write("-" * 80 + "\n\n")
            
            print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤: {filepath}")
            total_chunks += len(chunks)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
        report_file = export_dir / "memory_export_report.txt"
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write("üìä –û–¢–ß–ï–¢ –û–ë –≠–ö–°–ü–û–†–¢–ï –ü–ê–ú–Ø–¢–ò –ë–û–¢–ê\n")
            f.write("=" * 50 + "\n")
            f.write(f"üìÖ –î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"üìä –í—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(chat_ids)}\n")
            f.write(f"üì¶ –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {total_chunks}\n")
            f.write(f"üìÅ –ü–∞–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {export_dir.absolute()}\n\n")
            
            f.write("üìã –°–ü–ò–°–û–ö –§–ê–ô–õ–û–í:\n")
            for chat_id in chat_ids:
                f.write(f"- group_{chat_id}_memory.txt\n")
        
        conn.close()
        
        print(f"\n‚úÖ –≠–ö–°–ü–û–†–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"üìÅ –ü–∞–ø–∫–∞: {export_dir.absolute()}")
        print(f"üìä –í—Å–µ–≥–æ —á–∞–Ω–∫–æ–≤: {total_chunks}")
        print(f"üìã –û—Ç—á–µ—Ç: {report_file}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

def export_raw_messages():
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—ã—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø"""
    
    db_path = "data/smart_memory.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    print("\nüìù –≠–ö–°–ü–û–†–¢ –°–´–†–´–• –°–û–û–ë–©–ï–ù–ò–ô")
    print("=" * 50)
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã
        cursor.execute("SELECT DISTINCT chat_id FROM group_messages")
        chat_ids = [row[0] for row in cursor.fetchall()]
        
        if not chat_ids:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        export_dir = Path("exported_memory")
        export_dir.mkdir(exist_ok=True)
        
        for chat_id in chat_ids:
            print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã: {chat_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            cursor.execute("""
                SELECT user_id, content, timestamp, processed
                FROM group_messages 
                WHERE chat_id = ?
                ORDER BY timestamp ASC
            """, (chat_id,))
            
            messages = cursor.fetchall()
            
            if not messages:
                continue
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
            filename = f"group_{chat_id}_raw_messages.txt"
            filepath = export_dir / filename
            
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"üí¨ –°–´–†–´–ï –°–û–û–ë–©–ï–ù–ò–Ø –ì–†–£–ü–ü–´ {chat_id}\n")
                f.write(f"üìÖ –≠–∫—Å–ø–æ—Ä—Ç: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write(f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}\n")
                f.write("=" * 80 + "\n\n")
                
                for i, msg in enumerate(messages, 1):
                    user_id, content, timestamp, processed = msg
                    time_str = datetime.fromtimestamp(timestamp).strftime('%Y-%m-%d %H:%M:%S')
                    status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ" if processed else "‚è≥ –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ"
                    
                    f.write(f"üí¨ –°–û–û–ë–©–ï–ù–ò–ï #{i}\n")
                    f.write(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n")
                    f.write(f"‚è∞ –í—Ä–µ–º—è: {time_str}\n")
                    f.write(f"üìä –°—Ç–∞—Ç—É—Å: {status}\n")
                    f.write(f"üìù –¢–µ–∫—Å—Ç:\n{content}\n")
                    f.write("-" * 80 + "\n\n")
            
            print(f"   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤: {filepath}")
        
        conn.close()
        print("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç —Å—ã—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

if __name__ == "__main__":
    export_memory_chunks()
    export_raw_messages()
