#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ openai/gpt-oss-20b:free —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞ IKAR
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π API –∫–ª—é—á–µ–π
"""

import asyncio
import json
import sys
import os
from typing import Dict, Any, List
import requests
from datetime import datetime

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
def load_env_file(env_path: str = ".env"):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞"""
    if os.path.exists(env_path):
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–∞–º–∏
load_env_file()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from backend.config import OPENROUTER_API_KEYS, LLM_CONFIG
from backend.utils.logger import get_logger

logger = get_logger('model_compatibility_test')

class ModelCompatibilityTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É API –∫–ª—é—á–µ–π –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        self.api_keys = OPENROUTER_API_KEYS.copy()
        if not self.api_keys:
            raise ValueError("OpenRouter API –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        logger.info(f"üîë –ù–∞–π–¥–µ–Ω–æ {len(self.api_keys)} API –∫–ª—é—á–µ–π OpenRouter")
        
        self.base_url = "https://openrouter.ai/api/v1/chat/completions"
        self.current_key_index = 0
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        self.test_prompts = {
            "basic_chat": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
            "json_response": "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {\"status\": \"ok\", \"message\": \"test\"}",
            "crypto_analysis": "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É Bitcoin. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
            "memory_format": "–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ç–µ–º–∞, –≤–∞–∂–Ω–æ—Å—Ç—å (0-1), –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            "image_generation": "–ù–∞—Ä–∏—Å—É–π –∫–æ—Ç–∏–∫–∞. –î–æ–±–∞–≤—å –≤ –∫–æ–Ω–µ—Ü JSON: {\"description\": \"–æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\"}",
            "system_prompt": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
        }
    
    def get_current_api_key(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ API –∫–ª—é—á–∞ (–∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)"""
        if not self.api_keys:
            raise ValueError("API –∫–ª—é—á–∏ OpenRouter –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        return self.api_keys[self.current_key_index]
    
    def rotate_api_key(self):
        """–†–æ—Ç–∞—Ü–∏—è API –∫–ª—é—á–µ–π (–∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)"""
        self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
        logger.info(f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ API –∫–ª—é—á #{self.current_key_index + 1}")
    
    def get_headers(self) -> Dict[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–∫–∞–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ)"""
        return {
            "Authorization": f"Bearer {self.get_current_api_key()}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/yourusername/ikar",
            "X-Title": "IKAR Collective Mind"
        }
    
    async def test_model_response_format(self, model: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"""
        logger.info(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model}")
        
        results = {}
        
        for test_name, prompt in self.test_prompts.items():
            try:
                logger.info(f"  üìù –¢–µ—Å—Ç: {test_name}")
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                messages = []
                if test_name == "system_prompt":
                    messages = [
                        {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                        {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç!"}
                    ]
                else:
                    messages = [{"role": "user", "content": prompt}]
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
                max_retries = len(self.api_keys)
                for attempt in range(max_retries):
                    try:
                        payload = {
                            "model": model,
                            "messages": messages,
                            "temperature": 0.7,
                            "max_tokens": 1000
                        }
                        
                        response = requests.post(
                            url=self.base_url,
                            headers=self.get_headers(),
                            data=json.dumps(payload),
                            timeout=30
                        )
                        
                        if response.status_code == 200:
                            data = response.json()
                            
                            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                            analysis = self._analyze_response_structure(data, test_name)
                            results[test_name] = {
                                "status": "success",
                                "response_time": response.elapsed.total_seconds(),
                                "analysis": analysis,
                                "raw_response": data,
                                "api_key_used": self.current_key_index
                            }
                            
                            logger.info(f"    ‚úÖ –£—Å–ø–µ—à–Ω–æ: {analysis['content_length']} —Å–∏–º–≤–æ–ª–æ–≤ (–∫–ª—é—á #{self.current_key_index + 1})")
                            break  # –£—Å–ø–µ—à–Ω–æ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ retry
                            
                        elif response.status_code == 429:  # Rate limit
                            logger.warning(f"    ‚ö†Ô∏è Rate limit –¥–ª—è –∫–ª—é—á–∞ #{self.current_key_index + 1}")
                            self.rotate_api_key()
                            if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                                results[test_name] = {
                                    "status": "error",
                                    "error": f"Rate limit –Ω–∞ –≤—Å–µ—Ö –∫–ª—é—á–∞—Ö: {response.text}",
                                    "response_time": response.elapsed.total_seconds()
                                }
                        else:
                            logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ HTTP {response.status_code} –¥–ª—è –∫–ª—é—á–∞ #{self.current_key_index + 1}")
                            self.rotate_api_key()
                            if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                                results[test_name] = {
                                    "status": "error",
                                    "error": f"HTTP {response.status_code}: {response.text}",
                                    "response_time": response.elapsed.total_seconds()
                                }
                                
                    except requests.exceptions.RequestException as e:
                        logger.error(f"    ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–ª—é—á–∞ #{self.current_key_index + 1}: {e}")
                        self.rotate_api_key()
                        if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            results[test_name] = {
                                "status": "error",
                                "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}"
                            }
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
                await asyncio.sleep(0.5)
                    
            except Exception as e:
                results[test_name] = {
                    "status": "error",
                    "error": str(e)
                }
                logger.error(f"    ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        return results
    
    def _analyze_response_structure(self, data: Dict[str, Any], test_name: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"""
        analysis = {
            "has_choices": "choices" in data,
            "choices_count": len(data.get("choices", [])),
            "has_message": False,
            "has_content": False,
            "content_length": 0,
            "content_type": "unknown",
            "json_compatible": False,
            "has_finish_reason": False,
            "usage_info": "usage" in data
        }
        
        if analysis["has_choices"] and data["choices"]:
            choice = data["choices"][0]
            analysis["has_message"] = "message" in choice
            analysis["has_finish_reason"] = "finish_reason" in choice
            
            if analysis["has_message"]:
                message = choice["message"]
                analysis["has_content"] = "content" in message
                
                if analysis["has_content"]:
                    content = message["content"]
                    analysis["content_length"] = len(content)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
                    if content.strip().startswith("{") and content.strip().endswith("}"):
                        analysis["content_type"] = "json"
                        try:
                            json.loads(content)
                            analysis["json_compatible"] = True
                        except:
                            analysis["json_compatible"] = False
                    elif "```json" in content:
                        analysis["content_type"] = "markdown_json"
                    else:
                        analysis["content_type"] = "text"
        
        return analysis
    
    async def test_models_comparison(self) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å —Å —Ç–µ–∫—É—â–µ–π"""
        logger.info("üîÑ –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏...")
        
        models = {
            "new_model": "openai/gpt-oss-20b:free",
            "current_model": "deepseek/deepseek-r1-0528:free"
        }
        
        comparison_results = {}
        
        for model_name, model_id in models.items():
            logger.info(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º {model_name}: {model_id}")
            results = await self.test_model_response_format(model_id)
            comparison_results[model_name] = results
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏
            await asyncio.sleep(1)
        
        return comparison_results
    
    def generate_compatibility_report(self, results: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        report = []
        report.append("# üìä –û–¢–ß–ï–¢ –û –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ú–û–î–ï–õ–ï–ô")
        report.append(f"–î–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"API –∫–ª—é—á–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(self.api_keys)}")
        report.append("")
        
        for model_name, model_results in results.items():
            report.append(f"## ü§ñ {model_name.upper()}")
            report.append("")
            
            success_count = 0
            total_count = len(model_results)
            
            for test_name, test_result in model_results.items():
                status = test_result["status"]
                if status == "success":
                    success_count += 1
                    analysis = test_result["analysis"]
                    report.append(f"### ‚úÖ {test_name}")
                    report.append(f"- –°—Ç–∞—Ç—É—Å: {status}")
                    report.append(f"- –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {test_result['response_time']:.2f}—Å")
                    report.append(f"- API –∫–ª—é—á: #{test_result.get('api_key_used', 0) + 1}")
                    report.append(f"- –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {analysis['content_length']} —Å–∏–º–≤–æ–ª–æ–≤")
                    report.append(f"- –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {analysis['content_type']}")
                    report.append(f"- JSON —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {'‚úÖ' if analysis['json_compatible'] else '‚ùå'}")
                    report.append("")
                else:
                    report.append(f"### ‚ùå {test_name}")
                    report.append(f"- –°—Ç–∞—Ç—É—Å: {status}")
                    report.append(f"- –û—à–∏–±–∫–∞: {test_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
                    report.append("")
            
            report.append(f"**–ò—Ç–æ–≥–æ: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ**")
            report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("## üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
        report.append("")
        
        new_model_results = results.get("new_model", {})
        current_model_results = results.get("current_model", {})
        
        if new_model_results and current_model_results:
            new_success = sum(1 for r in new_model_results.values() if r["status"] == "success")
            current_success = sum(1 for r in current_model_results.values() if r["status"] == "success")
            
            if new_success >= current_success:
                report.append("‚úÖ **–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞**")
                report.append("- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å")
                report.append("- DeepSeek –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ fallback")
                report.append("- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±–Ω–æ–≤–∏—Ç—å LLM_CONFIG –≤ config.py")
            else:
                report.append("‚ö†Ô∏è **–ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏**")
                report.append("- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
                report.append("- –í–æ–∑–º–æ–∂–Ω–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–¥–∞")
                report.append("- –û—Å—Ç–∞–≤–∏—Ç—å DeepSeek –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å")
        
        return "\n".join(report)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
        logger.info(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ —Å {len(OPENROUTER_API_KEYS)} API –∫–ª—é—á–∞–º–∏")
        
        tester = ModelCompatibilityTester()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
        results = await tester.test_models_comparison()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = tester.generate_compatibility_report(results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = "model_compatibility_report.md"
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(report)
        
        logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {report_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\n" + "="*50)
        print("–ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("="*50)
        
        for model_name, model_results in results.items():
            success_count = sum(1 for r in model_results.values() if r["status"] == "success")
            total_count = len(model_results)
            print(f"{model_name}: {success_count}/{total_count} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        print(f"\n–ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç: {report_file}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main()) 