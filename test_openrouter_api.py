#!/usr/bin/env python3
"""
–¢–µ—Å—Ç OpenRouter API –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ø—Ä–æ–µ–∫—Ç–∞ IKAR
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏ –∏ –∏—Ö —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
"""

import asyncio
import os
import sys
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(str(Path(__file__).parent / "backend"))

from backend.config import Config, get_all_openrouter_keys
from backend.llm.openrouter import OpenRouterClient
from backend.utils.logger import get_logger

logger = get_logger('openrouter_test')

async def test_openrouter_keys():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ OpenRouter API –∫–ª—é—á–∏"""
    
    print("üîç –¢–ï–°–¢ OPENROUTER API –ö–õ–Æ–ß–ï–ô")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    config = Config()
    api_keys = get_all_openrouter_keys()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–π: {len(api_keys)}")
    
    if not api_keys:
        print("‚ùå –ù–ï–¢ –ö–õ–Æ–ß–ï–ô! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   - OPENROUTER_API_KEY")
        print("   - OPENROUTER_API_KEY_2, OPENROUTER_API_KEY_3, etc.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = OpenRouterClient(config)
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç
    test_prompt = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
    
    print(f"\nüß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {test_prompt}")
    print("\n" + "=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
    working_keys = []
    failed_keys = []
    
    for i, key in enumerate(api_keys, 1):
        key_suffix = key[-10:] if len(key) > 10 else key
        print(f"\nüîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á #{i} (...{key_suffix})")
        
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª—é—á
            client.current_key_index = i - 1
            
            start_time = time.time()
            
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å —Å –ë–ï–°–ü–õ–ê–¢–ù–û–ô –º–æ–¥–µ–ª—å—é
            response = await client.generate_response(
                prompt=test_prompt,
                use_memory=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞
                model="deepseek/deepseek-r1-0528:free",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ë–ï–°–ü–õ–ê–¢–ù–£–Æ –º–æ–¥–µ–ª—å
                max_tokens=100,
                temperature=0.3
            )
            
            response_time = time.time() - start_time
            
            if response and len(response.strip()) > 0:
                print(f"‚úÖ –£–°–ü–ï–•! –í—Ä–µ–º—è: {response_time:.2f}—Å")
                print(f"üìù –û—Ç–≤–µ—Ç: {response[:100]}...")
                working_keys.append((i, key_suffix, response_time))
            else:
                print(f"‚ùå –ü–£–°–¢–û–ô –û–¢–í–ï–¢")
                failed_keys.append((i, key_suffix, "empty_response"))
                
        except Exception as e:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {str(e)[:100]}...")
            failed_keys.append((i, key_suffix, str(e)[:50]))
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(1)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)
    
    print(f"‚úÖ –†–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π: {len(working_keys)}")
    print(f"‚ùå –ù–µ–∏—Å–ø—Ä–∞–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(failed_keys)}")
    
    if working_keys:
        print(f"\nüéâ –†–ê–ë–û–ß–ò–ï –ö–õ–Æ–ß–ò:")
        for i, suffix, time_taken in working_keys:
            print(f"   #{i} (...{suffix}) - {time_taken:.2f}—Å")
    
    if failed_keys:
        print(f"\nüí• –ù–ï–ò–°–ü–†–ê–í–ù–´–ï –ö–õ–Æ–ß–ò:")
        for i, suffix, error in failed_keys:
            print(f"   #{i} (...{suffix}) - {error}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if len(working_keys) == 0:
        print("   üö® –í–°–ï –ö–õ–Æ–ß–ò –ù–ï –†–ê–ë–û–¢–ê–Æ–¢!")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ OpenRouter")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
    elif len(working_keys) < len(api_keys) // 2:
        print("   ‚ö†Ô∏è  –ú–ù–û–ì–û –ù–ï–ò–°–ü–†–ê–í–ù–´–• –ö–õ–Æ–ß–ï–ô")
        print("   - –û–±–Ω–æ–≤–∏—Ç–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω—ã–µ –∫–ª—é—á–∏")
        print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ OpenRouter")
    else:
        print("   ‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ù–û–†–ú–ê–õ–¨–ù–û")
        print("   - –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —Ä–æ—Ç–∞—Ü–∏–∏")
    
    return {
        'total_keys': len(api_keys),
        'working_keys': len(working_keys),
        'failed_keys': len(failed_keys),
        'working_details': working_keys,
        'failed_details': failed_keys
    }

async def test_memory_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ø–∞–º—è—Ç—å—é"""
    
    print("\n" + "=" * 50)
    print("üß† –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ü–ê–ú–Ø–¢–¨–Æ")
    print("=" * 50)
    
    try:
        config = Config()
        client = OpenRouterClient(config)
        
        # –¢–µ—Å—Ç —Å –ø–∞–º—è—Ç—å—é
        memory_prompt = "–ß—Ç–æ —Ç—ã –ø–æ–º–Ω–∏—à—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö?"
        
        print(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {memory_prompt}")
        
        start_time = time.time()
        response = await client.generate_response(
            prompt=memory_prompt,
            use_memory=True,
            max_tokens=200,
            temperature=0.5
        )
        response_time = time.time() - start_time
        
        if response:
            print(f"‚úÖ –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢! –í—Ä–µ–º—è: {response_time:.2f}—Å")
            print(f"üìù –û—Ç–≤–µ—Ç: {response[:200]}...")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏
            stats = client.get_memory_stats()
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏: {stats}")
            
        else:
            print("‚ùå –ü–ê–ú–Ø–¢–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê –ü–ê–ú–Ø–¢–ò: {e}")

async def test_fallback_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback –º–æ–¥–µ–ª–∏"""
    
    print("\n" + "=" * 50)
    print("üîÑ –¢–ï–°–¢ FALLBACK –ú–û–î–ï–õ–ï–ô")
    print("=" * 50)
    
    try:
        config = Config()
        client = OpenRouterClient(config)
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–¥–µ–ª—å...")
        response1 = await client.generate_response(
            prompt="–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            model=client.default_model,
            use_memory=False,
            max_tokens=50
        )
        
        if response1:
            print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç: {response1[:50]}...")
        else:
            print("‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç fallback –º–æ–¥–µ–ª–∏
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–æ–¥–µ–ª—å...")
        response2 = await client.generate_response(
            prompt="–°–∫–∞–∂–∏ '–ü—Ä–∏–≤–µ—Ç' –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            model=client.fallback_model,
            use_memory=False,
            max_tokens=50
        )
        
        if response2:
            print(f"‚úÖ Fallback –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç: {response2[:50]}...")
        else:
            print("‚ùå Fallback –º–æ–¥–µ–ª—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê FALLBACK: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í OPENROUTER API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    env_vars = [k for k in os.environ.keys() if k.startswith('OPENROUTER_API_KEY')]
    print(f"üìã –ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {env_vars}")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –∫–ª—é—á–µ–π
    result = await test_openrouter_keys()
    
    # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–±–æ—á–∏–µ –∫–ª—é—á–∏)
    if result and result['working_keys'] > 0:
        await test_memory_integration()
        await test_fallback_models()
    else:
        print("\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –ø–∞–º—è—Ç–∏ –∏ fallback - –Ω–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π")
    
    print("\n" + "=" * 60)
    print("üèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("=" * 60)

if __name__ == "__main__":
    asyncio.run(main())
