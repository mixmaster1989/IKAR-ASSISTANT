#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ OpenRouter API
"""

import asyncio
import aiohttp
import json
import os
from datetime import datetime

# –ú–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Ç–æ—á–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ)
MODELS_TO_TEST = [
    "openai/gpt-oss-20b:free",
    "deepseek/deepseek-chat-v3.1:free",
    "meta-llama/llama-3.1-8b-instruct:free",
    "microsoft/phi-3-medium-128k-instruct:free",
    "google/gemma-2-2b:free"
]

# API –∫–ª—é—á–∏ –∏–∑ .env
API_KEYS = [
    "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",
    "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",
    "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",
    "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",
    "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"
]

async def test_model(session, api_key, model):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –º–æ–¥–µ–ª—å —Å –æ–¥–Ω–∏–º API –∫–ª—é—á–æ–º"""
    url = "https://openrouter.ai/api/v1/chat/completions"
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/ikar-assistant",
        "X-Title": "IKAR Assistant"
    }
    
    payload = {
        "model": model,
        "messages": [
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"}
        ],
        "max_tokens": 50,
        "temperature": 0.1
    }
    
    try:
        async with session.post(url, headers=headers, json=payload, timeout=10) as response:
            status_code = response.status
            response_text = await response.text()
            
            if status_code == 200:
                return {
                    "status": "‚úÖ OK",
                    "model": model,
                    "api_key": api_key[:20] + "...",
                    "response": "–£—Å–ø–µ—à–Ω–æ"
                }
            else:
                return {
                    "status": f"‚ùå {status_code}",
                    "model": model,
                    "api_key": api_key[:20] + "...",
                    "response": response_text[:100] + "..." if len(response_text) > 100 else response_text
                }
                
    except asyncio.TimeoutError:
        return {
            "status": "‚è∞ TIMEOUT",
            "model": model,
            "api_key": api_key[:20] + "...",
            "response": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        }
    except Exception as e:
        return {
            "status": f"üí• ERROR",
            "model": model,
            "api_key": api_key[:20] + "...",
            "response": str(e)[:100]
        }

async def main():
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π OpenRouter - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    results = []
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å —Å –∫–∞–∂–¥—ã–º API –∫–ª—é—á–æ–º
        for model in MODELS_TO_TEST:
            print(f"\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model}")
            
            for i, api_key in enumerate(API_KEYS, 1):
                print(f"  üîë API –∫–ª—é—á #{i}...", end=" ")
                
                result = await test_model(session, api_key, model)
                results.append(result)
                
                print(result["status"])
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(0.5)
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–í–ï–†–ö–ò:")
    print("=" * 80)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–æ–¥–µ–ª—è–º
    model_results = {}
    for result in results:
        model = result["model"]
        if model not in model_results:
            model_results[model] = []
        model_results[model].append(result)
    
    for model, model_tests in model_results.items():
        print(f"\nü§ñ {model}")
        print("-" * 60)
        
        working_keys = []
        for test in model_tests:
            status = test["status"]
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –ø–æ –Ω–∞—á–∞–ª—É
            key_num = "?"
            for i, key in enumerate(API_KEYS):
                if test["api_key"].startswith(key[:20]):
                    key_num = i + 1
                    break
            
            print(f"  –ö–ª—é—á #{key_num}: {status}")
            
            if "‚úÖ" in status:
                working_keys.append(key_num)
        
        if working_keys:
            print(f"  ‚úÖ –†–∞–±–æ—á–∏–µ –∫–ª—é—á–∏: {', '.join(map(str, working_keys))}")
        else:
            print(f"  ‚ùå –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tests = len(results)
    successful_tests = len([r for r in results if "‚úÖ" in r["status"]])
    
    print(f"\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"  –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"  –£—Å–ø–µ—à–Ω—ã—Ö: {successful_tests}")
    print(f"  –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_tests/total_tests)*100:.1f}%")

if __name__ == "__main__":
    asyncio.run(main())
