#!/usr/bin/env python3
"""
üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ß–∞—Ç—É–º–±–µ
"""

import os
import sys
import asyncio
import time
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('backend')

async def test_models():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏"""
    print("üß™ –¢–ï–°–¢ –í–°–ï–• –ú–û–î–ï–õ–ï–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –í –ß–ê–¢–£–ú–ë–ï")
    print("=" * 70)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from vision.image_generator import HF_MODELS, generate_image_huggingface
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(HF_MODELS)} –º–æ–¥–µ–ª–µ–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        for i, (model_id, model_info) in enumerate(HF_MODELS.items(), 1):
            print(f"   {i}. {model_id}")
            print(f"      üìù {model_info['name']}")
            print(f"      ‚è±Ô∏è  {model_info['average_wait_time']}")
            print()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
        test_prompt = "A cute red cat sitting on a windowsill, sunlight, photorealistic, 4k, high detail"
        results = []
        
        print("üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ú–û–î–ï–õ–ï–ô...")
        print("=" * 70)
        
        for i, (model_id, model_info) in enumerate(HF_MODELS.items(), 1):
            print(f"\nüìä –¢–ï–°–¢ {i}/{len(HF_MODELS)}: {model_id}")
            print(f"   üìù {model_info['name']}")
            print(f"   üéØ –ü—Ä–æ–º–ø—Ç: {test_prompt[:50]}...")
            
            start_time = time.time()
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_data = await generate_image_huggingface(
                    prompt=test_prompt,
                    model=model_id,
                    width=512,
                    height=512,
                    timeout=60
                )
                
                elapsed = time.time() - start_time
                
                if image_data:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    output_dir = Path('temp') / 'test_images'
                    output_dir.mkdir(parents=True, exist_ok=True)
                    
                    filename = f"test_cat_{model_id.replace('/', '_')}_{int(time.time())}.jpg"
                    output_path = output_dir / filename
                    
                    with open(output_path, 'wb') as f:
                        f.write(image_data)
                    
                    result = {
                        'model_id': model_id,
                        'status': 'success',
                        'elapsed_time': elapsed,
                        'image_size': len(image_data),
                        'output_path': str(output_path)
                    }
                    
                    print(f"   ‚úÖ –£–°–ü–ï–•! –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {elapsed:.2f}—Å")
                    print(f"   üìÅ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
                    print(f"   üìè –†–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")
                    
                else:
                    result = {
                        'model_id': model_id,
                        'status': 'failed',
                        'elapsed_time': elapsed,
                        'error': 'No image data returned'
                    }
                    print(f"   ‚ùå –û–®–ò–ë–ö–ê: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
                    
            except Exception as e:
                elapsed = time.time() - start_time
                result = {
                    'model_id': model_id,
                    'status': 'error',
                    'elapsed_time': elapsed,
                    'error': str(e)
                }
                print(f"   ‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
            
            results.append(result)
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            if i < len(HF_MODELS):
                print("   ‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...")
                await asyncio.sleep(3)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("\n" + "=" * 70)
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 70)
        
        successful = [r for r in results if r['status'] == 'success']
        failed = [r for r in results if r['status'] != 'success']
        
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(successful)}/{len(results)}")
        print(f"‚ùå –û—à–∏–±–∫–∏: {len(failed)}/{len(results)}")
        
        if successful:
            print(f"\nüèÜ –õ–£–ß–®–ò–ï –ú–û–î–ï–õ–ò:")
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            sorted_successful = sorted(successful, key=lambda x: x['elapsed_time'])
            for i, result in enumerate(sorted_successful[:3], 1):
                print(f"   {i}. {result['model_id']} - {result['elapsed_time']:.2f}—Å")
        
        if failed:
            print(f"\n‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –ú–û–î–ï–õ–ò:")
            for result in failed:
                print(f"   ‚ùå {result['model_id']}: {result.get('error', 'Unknown error')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_file = Path('reports') / 'chatumba_models_test_results.json'
        results_file.parent.mkdir(parents=True, exist_ok=True)
        
        import json
        with open(results_file, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {results_file}")
        
        return len(successful) > 0
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –ß–∞—Ç—É–º–±—ã...")
    
    success = await test_models()
    
    if success:
        print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
        print("   –í—Å–µ —Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ö†Ô∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –° –û–®–ò–ë–ö–ê–ú–ò!")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    
    return success

if __name__ == "__main__":
    try:
        success = asyncio.run(main())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
