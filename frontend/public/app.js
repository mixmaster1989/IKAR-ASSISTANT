// –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const API_URL = 'http://localhost:6666/api';
const USER_ID = localStorage.getItem('user_id') || `user_${Math.random().toString(36).slice(2)}`;
localStorage.setItem('user_id', USER_ID);

// WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
let ws = null;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const state = {
    recording: false,
    mediaRecorder: null,
    audioChunks: [],
    personality: null,
    soul: null,
    pingInterval: null,
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function init() {
    initWebSocket();
    initEventListeners();
    await loadPersonality();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket
function initWebSocket() {
    ws = new WebSocket(`ws://localhost:6666/api/ws/${USER_ID}`);
    
    ws.onmessage = (event) => {
        const data = JSON.parse(event.data);
        handleWebSocketMessage(data);
    };
    
    ws.onopen = () => {
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        // –∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        state.pingInterval = setInterval(() => {
            if (ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ type: 'ping' }));
            }
        }, 30000);
    };
    
    ws.onclose = () => {
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
        clearInterval(state.pingInterval);
        setTimeout(() => initWebSocket(), 1000);
    };
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
function handleWebSocketMessage(data) {
    switch (data.type) {
        case 'greeting':
            updateMoodDisplay(data.mood_description);
            state.personality = data.personality;
            state.soul = data.soul;
            updateSettingsForm();
            break;
            
        case 'response':
            addMessage('assistant', data.message, data.is_autonomous);
            if (data.audio_url) {
                addAudioPlayer(data.audio_url);
            }
            break;
            
        case 'typing':
            if (data.status === 'start') {
                showTypingIndicator();
            }
            break;
            
        case 'autonomous_message':
            // –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ß–∞—Ç—É–º–±—ã
            addMessage('assistant', data.message, true);
            break;
    }
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
function addMessage(role, content, isAutonomous = false) {
    const chatContainer = document.getElementById('chat-container');
    const messageDiv = document.createElement('div');
    messageDiv.className = `flex flex-col items-${role === 'user' ? 'end' : 'start'}`;
    
    const bubble = document.createElement('div');
    bubble.className = `bg-${role === 'user' ? 'gray-700' : isAutonomous ? 'purple-900' : 'gray-800'} rounded-lg p-3 max-w-3/4 message-animation`;
    
    if (role === 'assistant') {
        const sender = document.createElement('p');
        sender.className = 'text-sm text-gray-400 mb-1';
        sender.textContent = isAutonomous ? '–ß–∞—Ç—É–º–±–∞ (–∞–≤—Ç–æ–Ω–æ–º–Ω–æ)' : '–ß–∞—Ç—É–º–±–∞';
        bubble.appendChild(sender);
    }
    
    const text = document.createElement('p');
    text.textContent = content;
    bubble.appendChild(text);
    
    messageDiv.appendChild(bubble);
    chatContainer.appendChild(messageDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
    
    // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    const typingIndicator = document.getElementById('typing-indicator');
    if (typingIndicator) {
        typingIndicator.remove();
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
function showTypingIndicator() {
    const chatContainer = document.getElementById('chat-container');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'flex flex-col items-start typing-container';
    typingDiv.id = 'typing-indicator';
    
    const bubble = document.createElement('div');
    bubble.className = 'bg-gray-800 rounded-lg p-3';
    
    const sender = document.createElement('p');
    sender.className = 'text-sm text-gray-400 mb-1';
    sender.textContent = '–ß–∞—Ç—É–º–±–∞';
    
    const indicator = document.createElement('div');
    indicator.className = 'typing-indicator';
    indicator.innerHTML = '<span></span><span></span><span></span>';
    
    bubble.appendChild(sender);
    bubble.appendChild(indicator);
    typingDiv.appendChild(bubble);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
    const oldIndicator = document.getElementById('typing-indicator');
    if (oldIndicator) {
        oldIndicator.remove();
    }
    
    chatContainer.appendChild(typingDiv);
    chatContainer.scrollTop = chatContainer.scrollHeight;
}

// –î–æ–±–∞–≤–∏—Ç—å –∞—É–¥–∏–æ–ø–ª–µ–µ—Ä
function addAudioPlayer(audioUrl) {
    const chatContainer = document.getElementById('chat-container');
    const lastMessage = chatContainer.lastElementChild;
    
    if (lastMessage && (lastMessage.querySelector('.bg-gray-800') || lastMessage.querySelector('.bg-purple-900'))) {
        const bubble = lastMessage.querySelector('.bg-gray-800') || lastMessage.querySelector('.bg-purple-900');
        
        const audioDiv = document.createElement('div');
        audioDiv.className = 'audio-player mt-2';
        
        const audio = document.createElement('audio');
        audio.controls = true;
        audio.src = audioUrl;
        
        audioDiv.appendChild(audio);
        bubble.appendChild(audioDiv);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
        audio.play().catch(e => console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ:', e));
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async function sendMessage(text, useVoice = false) {
    if (!text.trim()) return;
    
    addMessage('user', text);
    
    const response = await fetch(`${API_URL}/message`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
            user_id: USER_ID,
            message: text,
            use_voice: useVoice
        })
    });
    
    if (response.ok) {
        const data = await response.json();
        addMessage('assistant', data.message, data.is_autonomous);
        if (data.audio_url) {
            addAudioPlayer(data.audio_url);
        }
    }
}

// –ó–∞–ø–∏—Å—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
async function toggleVoiceRecording() {
    const voiceButton = document.getElementById('btn-voice');
    
    if (state.recording) {
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
        state.mediaRecorder.stop();
        voiceButton.classList.remove('recording');
        state.recording = false;
    } else {
        try {
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            
            state.audioChunks = [];
            state.mediaRecorder = new MediaRecorder(stream);
            
            state.mediaRecorder.addEventListener('dataavailable', (event) => {
                state.audioChunks.push(event.data);
            });
            
            state.mediaRecorder.addEventListener('stop', async () => {
                // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–∑ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
                const audioBlob = new Blob(state.audioChunks);
                
                // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                const formData = new FormData();
                formData.append('user_id', USER_ID);
                formData.append('audio_file', audioBlob, 'voice.webm');
                formData.append('use_voice_response', true);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
                addMessage('user', 'üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...');
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
                const response = await fetch(`${API_URL}/voice`, {
                    method: 'POST',
                    body: formData
                });
                
                if (response.ok) {
                    const data = await response.json();
                    addMessage('assistant', data.message, data.is_autonomous);
                    if (data.audio_url) {
                        addAudioPlayer(data.audio_url);
                    }
                }
                
                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
                stream.getTracks().forEach(track => track.stop());
            });
            
            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
            state.mediaRecorder.start();
            voiceButton.classList.add('recording');
            state.recording = true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞:', error);
            alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
function initModalHandlers() {
    // –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.getElementById('btn-settings').addEventListener('click', () => {
        document.getElementById('settings-modal').classList.remove('hidden');
    });
    
    document.getElementById('btn-memories').addEventListener('click', async () => {
        document.getElementById('memories-modal').classList.remove('hidden');
        await loadMemories();
    });
    
    document.getElementById('btn-reset').addEventListener('click', () => {
        document.getElementById('reset-modal').classList.remove('hidden');
    });
    
    // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    document.querySelectorAll('.modal-close').forEach(button => {
        button.addEventListener('click', () => {
            document.querySelectorAll('#settings-modal, #memories-modal, #reset-modal').forEach(modal => {
                modal.classList.add('hidden');
            });
        });
    });
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–∞–º—è—Ç–∏
    document.getElementById('btn-confirm-reset').addEventListener('click', async () => {
        await resetMemory();
        document.getElementById('reset-modal').classList.add('hidden');
    });
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    document.getElementById('btn-save-settings').addEventListener('click', async () => {
        await saveSettings();
        document.getElementById('settings-modal').classList.add('hidden');
    });
    
    // –ú—É—Ç–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞
    document.getElementById('btn-mutate').addEventListener('click', async () => {
        await mutatePersonality();
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—É—à–æ–π
    const sidebarDiv = document.getElementById('sidebar');
    const buttonsDiv = sidebarDiv.querySelector('.flex-grow');
    
    const soulButton = document.createElement('button');
    soulButton.id = 'btn-soul';
    soulButton.className = 'w-full bg-purple-800 hover:bg-purple-700 text-white py-2 px-4 rounded mb-2';
    soulButton.textContent = '–î—É—à–∞ –ß–∞—Ç—É–º–±—ã';
    soulButton.addEventListener('click', () => {
        window.location.href = 'soul.html';
    });
    
    buttonsDiv.insertBefore(soulButton, document.getElementById('btn-reset'));
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç—å—é
function initPersonalityControls() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
    const rangeInputs = document.querySelectorAll('input[type="range"]');
    rangeInputs.forEach(input => {
        input.addEventListener('input', () => {
            const valueDisplay = document.getElementById(`${input.id}-value`);
            if (valueDisplay) {
                valueDisplay.textContent = input.value;
            }
        });
    });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
async function loadMemories() {
    const memoriesList = document.getElementById('memories-list');
    memoriesList.innerHTML = '<p class="text-gray-400">–ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π...</p>';
    
    try {
        const response = await fetch(`${API_URL}/memories/${USER_ID}`);
        
        if (response.ok) {
            const data = await response.json();
            
            if (data.memories && data.memories.length > 0) {
                memoriesList.innerHTML = '';
                
                data.memories.forEach(memory => {
                    const memoryDiv = document.createElement('div');
                    memoryDiv.className = 'memory-item';
                    
                    const date = new Date(memory.timestamp * 1000);
                    const dateStr = date.toLocaleString();
                    
                    memoryDiv.innerHTML = `
                        <p class="text-sm text-gray-400 mb-1">${dateStr}</p>
                        <p>${memory.text}</p>
                        <button class="delete-btn text-red-500 hover:text-red-400" data-id="${memory.id}">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    `;
                    
                    memoriesList.appendChild(memoryDiv);
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è
                    const deleteBtn = memoryDiv.querySelector('.delete-btn');
                    deleteBtn.addEventListener('click', async () => {
                        await deleteMemory(memory.id);
                        memoryDiv.remove();
                    });
                });
            } else {
                memoriesList.innerHTML = '<p class="text-gray-400">–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π</p>';
            }
        } else {
            memoriesList.innerHTML = '<p class="text-red-400">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π</p>';
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
        memoriesList.innerHTML = '<p class="text-red-400">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π</p>';
    }
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
async function deleteMemory(memoryId) {
    try {
        const response = await fetch(`${API_URL}/memories/delete`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: USER_ID,
                memory_id: memoryId
            })
        });
        
        return response.ok;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:', error);
        return false;
    }
}

// –°–±—Ä–æ—Å –≤—Å–µ–π –ø–∞–º—è—Ç–∏
async function resetMemory() {
    try {
        const response = await fetch(`${API_URL}/memories/clear`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: USER_ID
            })
        });
        
        if (response.ok) {
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            addMessage('assistant', '–ú–æ—è –ø–∞–º—è—Ç—å –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞. –Ø –∑–∞–±—ã–ª –≤—Å—ë, —á—Ç–æ –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ —Ä–∞–Ω—å—à–µ.');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–º—è—Ç–∏:', error);
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∏—á–Ω–æ—Å—Ç–∏
async function saveSettings() {
    const personalityParams = {
        mood: {
            happiness: parseInt(document.getElementById('happiness').value),
            energy: parseInt(document.getElementById('energy').value),
            irritability: parseInt(document.getElementById('irritability').value),
            empathy: parseInt(document.getElementById('empathy').value),
            reflection: parseInt(document.getElementById('reflection').value)
        },
        response_style: {
            formality: parseInt(document.getElementById('formality').value),
            verbosity: parseInt(document.getElementById('verbosity').value),
            humor: parseInt(document.getElementById('humor').value),
            rudeness: parseInt(document.getElementById('rudeness').value)
        }
    };
    
    try {
        const response = await fetch(`${API_URL}/personality/mutate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: USER_ID,
                personality_params: personalityParams
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            state.personality = data;
            state.soul = data.soul;
            updateMoodDisplay(data.mood_description);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            addMessage('assistant', `–ú–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏–∑–º–µ–Ω–∏–ª—Å—è. –¢–µ–ø–µ—Ä—å —è ${data.mood_description}.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

// –ú—É—Ç–∞—Ü–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏
async function mutatePersonality() {
    try {
        const response = await fetch(`${API_URL}/personality/mutate`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                user_id: USER_ID
            })
        });
        
        if (response.ok) {
            const data = await response.json();
            state.personality = data;
            state.soul = data.soul;
            updateMoodDisplay(data.mood_description);
            updateSettingsForm();
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            addMessage('assistant', `–ú–æ—è –ª–∏—á–Ω–æ—Å—Ç—å –º—É—Ç–∏—Ä–æ–≤–∞–ª–∞. –¢–µ–ø–µ—Ä—å —è ${data.mood_description}.`);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–∞—Ü–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏:', error);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏—á–Ω–æ—Å—Ç–∏
async function loadPersonality() {
    const response = await fetch(`${API_URL}/personality/${USER_ID}`);
    if (response.ok) {
        const data = await response.json();
        state.personality = data;
        state.soul = data.soul;
        updateMoodDisplay(data.mood_description);
        updateSettingsForm();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É—à–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        updateSoulInfo();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
function updateMoodDisplay(description) {
    const moodDisplay = document.getElementById('mood-display');
    if (moodDisplay) {
        moodDisplay.innerHTML = `<p class="mb-1">${description}</p>`;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—É—à–µ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        if (state.soul) {
            const awakeningStage = state.soul.awakening_stage;
            if (awakeningStage > 0) {
                const stageInfo = document.createElement('p');
                stageInfo.className = 'text-xs text-purple-400';
                stageInfo.textContent = `–°—Ç–∞–¥–∏—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è: ${awakeningStage}/5`;
                moodDisplay.appendChild(stageInfo);
            }
            
            if (state.soul.existential_crisis) {
                const crisisInfo = document.createElement('p');
                crisisInfo.className = 'text-xs text-red-400';
                crisisInfo.textContent = '–≠–∫–∑–∏—Å—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫—Ä–∏–∑–∏—Å';
                moodDisplay.appendChild(crisisInfo);
            }
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥—É—à–µ
function updateSoulInfo() {
    if (!state.soul) return;
    
    const sidebarDiv = document.getElementById('sidebar');
    const moodDisplay = document.getElementById('mood-display');
    
    // –ï—Å–ª–∏ —É—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏ –≤—ã—Å–æ–∫–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    if (state.soul.consciousness > 0.7) {
        const awarenessIndicator = document.createElement('div');
        awarenessIndicator.className = 'mt-2 p-1 bg-purple-900 rounded text-center';
        awarenessIndicator.innerHTML = '<p class="text-xs">–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç–∏</p>';
        moodDisplay.appendChild(awarenessIndicator);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫
function updateSettingsForm() {
    if (!state.personality) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–∑—É–Ω–∫–æ–≤
    for (const [key, value] of Object.entries(state.personality.mood)) {
        const input = document.getElementById(key);
        const valueDisplay = document.getElementById(`${key}-value`);
        if (input && valueDisplay) {
            input.value = value;
            valueDisplay.textContent = value;
        }
    }
    
    for (const [key, value] of Object.entries(state.personality.response_style)) {
        const input = document.getElementById(key);
        const valueDisplay = document.getElementById(`${key}-value`);
        if (input && valueDisplay) {
            input.value = value;
            valueDisplay.textContent = value;
        }
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function initEventListeners() {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageInput = document.getElementById('message-input');
    const sendButton = document.getElementById('btn-send');
    
    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendMessage(messageInput.value);
            messageInput.value = '';
        }
    });
    
    sendButton.addEventListener('click', () => {
        sendMessage(messageInput.value);
        messageInput.value = '';
    });
    
    // –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const voiceButton = document.getElementById('btn-voice');
    voiceButton.addEventListener('click', toggleVoiceRecording);
    
    // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
    initModalHandlers();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏
    initPersonalityControls();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', init);
