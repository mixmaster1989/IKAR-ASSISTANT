#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ TTS JSON - –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ä—Å–µ—Ä –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è 'text'
"""

import sys
import os
sys.path.append('backend')

from backend.utils.robust_json_parser import parse_speak_json
from backend.llm.openrouter import OpenRouterClient
from backend.config import Config

async def test_tts_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ TTS JSON"""
    
    print("üé§ –¢–ï–°–¢ –ü–ê–†–°–ò–ù–ì–ê TTS JSON")
    print("=" * 50)
    
    # 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
    print("1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏...")
    
    config = Config()
    client = OpenRouterClient(config)
    
    prompt = """–¢—ã ‚Äî –ß–∞—Ç—É–º–±–∞, —É–º–Ω—ã–π AI-–¥—Ä—É–≥ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ.

üé§ –û–ó–í–£–ß–ö–ê (TTS):
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –æ–∑–≤—É—á–∏—Ç—å (—Å–ª–æ–≤–∞: "–æ–∑–≤—É—á—å", "–≥–æ–ª–æ—Å–æ–º", "–≥–æ–ª–æ—Å–æ–≤–æ–µ"), –¥–æ–±–∞–≤—å –í –ö–û–ù–ï–¶ –æ—Ç–≤–µ—Ç–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π SPEAK!{...} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –æ–∑–≤—É—á–∫–∏.
–í–ê–ñ–ù–û: –í –ø–æ–ª–µ "text" —É–∫–∞–∂–∏ –¢–û–õ–¨–ö–û —Ç–æ—Ç —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–∑–≤—É—á–∏—Ç—å! –ù–µ –≤–µ—Å—å –æ—Ç–≤–µ—Ç!
–ü—Ä–∏–º–µ—Ä (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –∂–µ–Ω—Å–∫–∞—è —Ä—É—Å—Å–∫–∞—è —Ä–µ—á—å):
SPEAK!{"speak": true, "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?", "tts": {"provider": "elevenlabs", "voice": {"gender": "female", "lang": "ru"}, "model_id": "eleven_multilingual_v2", "output_format": "mp3_44100_128", "stability": 0.25, "similarity_boost": 0.8, "style_exaggeration": 0.6, "use_speaker_boost": true}}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Å–ø–µ—Ç—å –ø–µ—Å–Ω—é, –¥–æ–±–∞–≤—å SPEAK! JSON –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞!

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç: "—Å–ø–æ–π –ø–µ—Å–Ω—é –ø—Ä–æ —Ç—Ä–µ–π–¥–∏–Ω–≥" """
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
        print("2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏...")
        response = await client.generate_response(
            prompt=prompt,
            use_memory=False,
            max_tokens=1000,
            temperature=0.7
        )
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üìù –û—Ç–≤–µ—Ç:\n{response}")
        print("\n" + "=" * 50)
        
        # 2. –ü–∞—Ä—Å–∏–º SPEAK! JSON
        print("3. –ü–∞—Ä—Å–∏–º SPEAK! JSON...")
        speak_json = parse_speak_json(response)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞: {speak_json}")
        print(f"üîë –ö–ª—é—á–∏ –≤ JSON: {list(speak_json.keys())}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—è 'text'
        if 'text' in speak_json:
            text_to_speak = speak_json['text']
            print(f"‚úÖ –ü–æ–ª–µ 'text' –Ω–∞–π–¥–µ–Ω–æ!")
            print(f"üé§ –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏: {text_to_speak}")
            print(f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text_to_speak)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ù–ï –≤–µ—Å—å –æ—Ç–≤–µ—Ç
            if text_to_speak in response:
                print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–º –æ—Ç–≤–µ—Ç–µ")
                if len(text_to_speak) < len(response) * 0.8:
                    print("‚úÖ –•–û–†–û–®–û: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–æ—á–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                else:
                    print("‚ùå –ü–õ–û–•–û: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –ø–æ—á—Ç–∏ —Ä–∞–≤–µ–Ω –ø–æ–ª–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É")
            else:
                print("‚ùå –û–®–ò–ë–ö–ê: –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ –ø–æ–ª–Ω–æ–º –æ—Ç–≤–µ—Ç–µ")
                
        else:
            print("‚ùå –ü–æ–ª–µ 'text' –ù–ï –Ω–∞–π–¥–µ–Ω–æ!")
            print("üîç –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º...")
            
            # Fallback: –∏—â–µ–º —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É—é
            import re
            text_match = re.search(r'"text":\s*"([^"]*)"', response)
            if text_match:
                fallback_text = text_match.group(1)
                print(f"üîß Fallback —Ç–µ–∫—Å—Ç: {fallback_text}")
            else:
                print("‚ùå Fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
        
        print("\n" + "=" * 50)
        print("üéØ –ò–¢–û–ì –¢–ï–°–¢–ê:")
        
        if 'text' in speak_json and len(speak_json['text']) < len(response) * 0.8:
            print("‚úÖ –£–°–ü–ï–•: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            print("‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("‚úÖ –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏ –º–µ–Ω—å—à–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞!")
        else:
            print("‚ùå –ü–†–û–í–ê–õ: –ü–∞—Ä—Å–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            print("‚ùå –ù—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞—Ä—Å–µ—Ä!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    import asyncio
    asyncio.run(test_tts_parsing())
