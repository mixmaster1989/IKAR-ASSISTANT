#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ OpenRouter
"""

import asyncio
import aiohttp
import json

async def test_specific_key():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á"""
    
    # –ö–ª—é—á –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –¥–∞–ª
    test_key = "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"
    key_suffix = test_key[-10:] if len(test_key) > 10 else test_key
    
    print(f"üîç –¢–ï–°–¢ –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –ö–õ–Æ–ß–ê")
    print("=" * 50)
    print(f"üîë –ö–ª—é—á: ...{key_suffix}")
    print(f"üìä –î–ª–∏–Ω–∞: {len(test_key)}")
    print(f"üìä –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {test_key[:10]}")
    print()
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    base_url = "https://openrouter.ai/api/v1"
    headers = {
        "Authorization": f"Bearer {test_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/ikar-project/ikar",
        "X-Title": "IKAR Test"
    }
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏
    models_to_test = [
        "deepseek/deepseek-r1-0528:free",
        "meta-llama/llama-3.1-8b-instruct:free",
        "microsoft/phi-3-mini-128k-instruct:free",
        "google/gemini-flash-1.5:free"
    ]
    
    for model in models_to_test:
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: {model}")
        
        payload = {
            "model": model,
            "messages": [
                {
                    "role": "user",
                    "content": "Hi"
                }
            ],
            "max_tokens": 10,
            "temperature": 0.3
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{base_url}/chat/completions",
                    headers=headers,
                    json=payload,
                    timeout=aiohttp.ClientTimeout(total=15)
                ) as response:
                    
                    print(f"üì• –°—Ç–∞—Ç—É—Å: {response.status}")
                    
                    response_text = await response.text()
                    
                    if response.status == 200:
                        try:
                            response_data = json.loads(response_text)
                            if 'choices' in response_data and response_data['choices']:
                                content = response_data['choices'][0]['message']['content']
                                print(f"‚úÖ –£–°–ü–ï–•! –û—Ç–≤–µ—Ç: {content}")
                                return True
                        except json.JSONDecodeError:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON")
                    else:
                        print(f"‚ùå –û–®–ò–ë–ö–ê {response.status}: {response_text}")
                        
        except Exception as e:
            print(f"‚ùå –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: {e}")
        
        print()
    
    return False

if __name__ == "__main__":
    result = asyncio.run(test_specific_key())
    if result:
        print("üéâ –ö–õ–Æ–ß –†–ê–ë–û–¢–ê–ï–¢!")
    else:
        print("üí• –ö–õ–Æ–ß –ù–ï –†–ê–ë–û–¢–ê–ï–¢!")
