#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Pollinations.ai –≤ –ø—Ä–æ–µ–∫—Ç IKAR
"""

import sys
import os
import asyncio
import logging
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_path = Path(__file__).parent / '.env'
if env_path.exists():
    load_dotenv(env_path)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω .env —Ñ–∞–π–ª: {env_path}")
else:
    print(f"‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {env_path}")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)-8s | %(name)-20s | %(message)s'
)

logger = logging.getLogger("test_pollinations_integration")

async def test_pollinations_primary():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Pollinations –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä"""
    print("\nüé® –¢–µ—Å—Ç 1: Pollinations –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä")
    print("=" * 60)
    
    try:
        from backend.vision.image_generator import image_generator, get_available_models
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
        models = await get_available_models()
        print(f"üìã –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Pollinations –º–æ–¥–µ–ª–∏
        pollinations_models = [k for k, v in models.items() if v.get('type') == 'pollinations']
        print(f"üé® Pollinations –º–æ–¥–µ–ª–∏: {pollinations_models}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Pollinations
        test_prompt = "Robot holding a red skateboard"
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {test_prompt}")
        
        image_data = await image_generator(
            prompt=test_prompt,
            model="pollinations_flux",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º Pollinations
            width=1024,
            height=1024
        )
        
        if image_data:
            print(f"‚úÖ Pollinations —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –†–∞–∑–º–µ—Ä: {len(image_data)} bytes")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            os.makedirs("test_images", exist_ok=True)
            with open("test_images/pollinations_test.png", "wb") as f:
                f.write(image_data)
            print("üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: test_images/pollinations_test.png")
            return True
        else:
            print("‚ùå Pollinations –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Pollinations: {e}")
        return False

async def test_huggingface_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç HuggingFace –∫–∞–∫ fallback"""
    print("\nü§ñ –¢–µ—Å—Ç 2: HuggingFace –∫–∞–∫ fallback")
    print("=" * 60)
    
    try:
        from backend.vision.image_generator import image_generator
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ HuggingFace
        test_prompt = "A beautiful sunset over mountains"
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {test_prompt}")
        
        image_data = await image_generator(
            prompt=test_prompt,
            model="hf_stabilityai/stable-diffusion-3-medium-diffusers",  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º HuggingFace
            width=512,
            height=512
        )
        
        if image_data:
            print(f"‚úÖ HuggingFace —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –†–∞–∑–º–µ—Ä: {len(image_data)} bytes")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            os.makedirs("test_images", exist_ok=True)
            with open("test_images/huggingface_test.jpg", "wb") as f:
                f.write(image_data)
            print("üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: test_images/huggingface_test.jpg")
            return True
        else:
            print("‚ùå HuggingFace –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HuggingFace: {e}")
        return False

async def test_auto_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback"""
    print("\nüîÑ –¢–µ—Å—Ç 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback")
    print("=" * 60)
    
    try:
        from backend.vision.image_generator import image_generator
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pollinations –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        test_prompt = "A cyberpunk city at night"
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {test_prompt}")
        
        image_data = await image_generator(
            prompt=test_prompt,
            width=1024,
            height=1024
        )
        
        if image_data:
            print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –†–∞–∑–º–µ—Ä: {len(image_data)} bytes")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            os.makedirs("test_images", exist_ok=True)
            with open("test_images/auto_test.png", "wb") as f:
                f.write(image_data)
            print("üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: test_images/auto_test.png")
            return True
        else:
            print("‚ùå –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ fallback: {e}")
        return False

async def test_backward_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å"""
    print("\nüîÑ –¢–µ—Å—Ç 4: –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
    print("=" * 60)
    
    try:
        from backend.vision.image_generator import (
            generate_image_hf,
            generate_image_stable_horde,
            generate_image_replicate,
            generate_image_deepai
        )
        
        test_prompt = "A cute cat"
        print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: {test_prompt}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
        functions_to_test = [
            ("generate_image_hf", generate_image_hf),
            ("generate_image_stable_horde", generate_image_stable_horde),
            ("generate_image_replicate", generate_image_replicate),
            ("generate_image_deepai", generate_image_deepai)
        ]
        
        success_count = 0
        
        for func_name, func in functions_to_test:
            try:
                print(f"üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º {func_name}...")
                image_data = await func(test_prompt, width=512, height=512)
                
                if image_data:
                    print(f"‚úÖ {func_name} —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–∞–∑–º–µ—Ä: {len(image_data)} bytes")
                    success_count += 1
                else:
                    print(f"‚ùå {func_name} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                    
            except Exception as e:
                print(f"‚ùå {func_name} –æ—à–∏–±–∫–∞: {e}")
        
        print(f"üìä –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: {success_count}/{len(functions_to_test)} —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç")
        return success_count > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Pollinations.ai –≤ –ø—Ä–æ–µ–∫—Ç IKAR")
    print("=" * 80)
    
    tests = [
        ("Pollinations –æ—Å–Ω–æ–≤–Ω–æ–π", test_pollinations_primary),
        ("HuggingFace fallback", test_huggingface_fallback),
        ("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π fallback", test_auto_fallback),
        ("–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å", test_backward_compatibility)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*80}")
        print(f"üß™ {test_name}")
        print('='*80)
        
        try:
            result = await test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–®–ï–õ")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–®–ï–õ")
                
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\n{'='*80}")
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print('='*80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
        print(f"{test_name}: {status}")
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    elif passed > 0:
        print("‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
    else:
        print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

if __name__ == "__main__":
    asyncio.run(main())
