#!/usr/bin/env python3
import os
import sys
import asyncio
from typing import Optional, List

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
CURRENT_DIR = os.path.dirname(__file__)
PROJECT_ROOT = os.path.abspath(os.path.join(CURRENT_DIR, '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)

from backend.utils.table_generator import send_table_to_telegram


def read_env_value(*keys: str) -> Optional[str]:
    for k in keys:
        val = os.getenv(k)
        if val:
            return val
    env_path = os.path.join(PROJECT_ROOT, '.env')
    if os.path.exists(env_path):
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                for line in f:
                    line = line.strip()
                    if not line or line.startswith('#') or '=' not in line:
                        continue
                    name, value = line.split('=', 1)
                    name = name.strip(); value = value.strip().strip('"').strip("'")
                    if name in keys and value:
                        return value
        except Exception:
            pass
    return None


def variants() -> List[str]:
    base = [
        ("–≠–∫—Ä–∞–Ω", "5‚Äë7‚Ä≥ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç) / 10‚Ä≥ (HoReCa)", "7‚Ä≥ / 8‚Ä≥ / 10‚Ä≥"),
        ("–ü–µ—á–∞—Ç–Ω–∞—è –≥–æ–ª–æ–≤–∫–∞", "–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è APS SS205‚ÄëV4‚ÄëLV (57 –º–º)", "–ü—Ä–∏–Ω—Ç–µ—Ä —Å –∞–≤—Ç–æ–æ—Ç—Ä–µ–∑—á–∏–∫–æ–º"),
        ("USB‚Äë–ø–æ—Ä—Ç—ã", "1‚Äì6 –ø–æ—Ä—Ç–æ–≤", "4‚Äì6 –ø–æ—Ä—Ç–æ–≤"),
        ("Wi‚ÄëFi / GSM", "–î–∞ –Ω–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö", "–î–∞ –Ω–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª—è—Ö"),
        ("–ë–∞—Ç–∞—Ä–µ—è", "–î–æ 12 —á –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏", "–î–æ 5‚Äì8 —á –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏"),
        ("–§–∏—Å–∫–∞–ª—å–Ω—ã–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å", "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π/–≤–Ω–µ—à–Ω–∏–π (FN15/FN36)", "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π/–≤–Ω–µ—à–Ω–∏–π"),
        ("–¶–µ–Ω–∞ –±–µ–∑ FN", "24 900‚Äì38 900 ‚ÇΩ", "21 500‚Äì33 000 ‚ÇΩ"),
    ]

    texts = []
    headings = [
        "üìå –ö—Ä–∞—Ç–∫–æ –æ –¥–≤—É—Ö ¬´—Å–µ–º–µ–π—Å—Ç–≤–∞—Ö¬ª –∫–∞—Å—Å",
        "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ Evotor vs Atol Sigma",
        "üßæ –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ–¥–æ–º–æ—Å—Ç—å –ø–æ Evotor –∏ Atol Sigma",
        "üîç –ë—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä Evotor / Sigma",
        "üß≠ –í—ã–±–æ—Ä –∫–∞—Å—Å—ã: Evotor –∏–ª–∏ Sigma?",
        "üìà –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Ä–∞–∑–ª–∏—á–∏—è",
        "üõ† –ü–æ—Ä—Ç—ã, —ç–∫—Ä–∞–Ω, –±–∞—Ç–∞—Ä–µ—è ‚Äî —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ",
        "üì¶ –ö–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å",
        "üè™ –î–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Ç–æ—á–∫–∏: —á—Ç–æ –≤—ã–±—Ä–∞—Ç—å?",
        "‚öñÔ∏è –°—Ä–∞–≤–Ω–∏–º –ø–æ –∫–ª—é—á–µ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º",
    ]

    for title in headings:
        rows = ["| –ü–∞—Ä–∞–º–µ—Ç—Ä | **Evotor** | **Atol Sigma** |"]
        rows.append("|----------|------------|----------------|")
        for name, ev, at in base:
            rows.append(f"| **{name}** | {ev} | {at} |")
        note = "\n\n*—Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –§–ù –∏ –Ω–∞–ª–æ–≥–æ–≤—ã—Ö —É—Å–ª—É–≥*"
        texts.append(f"{title}\n\n" + "\n".join(rows) + note)
    return texts


async def main():
    chat_id = read_env_value('TELEGRAM_CHANNEL_ID', 'IKAR_TELEGRAM_GROUP_ID', 'TELEGRAM_GROUP_ID')
    if not chat_id:
        raise SystemExit('No chat_id found in env/.env')
    token = read_env_value('TELEGRAM_BOT_TOKEN', 'BOT_TOKEN')
    if token:
        os.environ['TELEGRAM_BOT_TOKEN'] = token

    texts = variants()
    results = []
    for idx, md in enumerate(texts, 1):
        print(f"[ {idx}/10 ] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞‚Ä¶")
        mid = await send_table_to_telegram(chat_id, md, caption=None)
        if mid:
            print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, message_id={mid}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ #{idx}")
        results.append((idx, mid))

    print("\n–ò–¢–û–ì–û:")
    for idx, mid in results:
        print(f"#{idx}: {'OK '+str(mid) if mid else 'FAIL'}")


if __name__ == '__main__':
    asyncio.run(main())


