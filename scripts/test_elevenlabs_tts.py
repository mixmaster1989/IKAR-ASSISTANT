#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ElevenLabs TTS
"""

import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = Path(__file__).resolve().parents[1]
sys.path.insert(0, str(PROJECT_ROOT))

from backend.voice.tts import TextToSpeech

def test_elevenlabs_tts():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ElevenLabs TTS"""
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs TTS...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_file = PROJECT_ROOT / '.env'
    if env_file.exists():
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    voices_file = PROJECT_ROOT / 'data' / 'eleven_voices_ru.json'
    if voices_file.exists():
        with open(voices_file, 'r', encoding='utf-8') as f:
            voices = json.load(f)
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(voices)} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤:")
            for voice in voices:
                print(f"  - {voice.get('name')} ({voice.get('voice_id')}) - {voice.get('gender')}")
    else:
        print("‚ùå –§–∞–π–ª —Å –≥–æ–ª–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–µ–º TTS
    try:
        tts = TextToSpeech()
        print(f"‚úÖ TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üé§ ElevenLabs voice_id: {tts.eleven_voice_id}")
        print(f"üé§ ElevenLabs –º–æ–¥–µ–ª—å: {tts.eleven_model_id}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–∑–≤—É—á–∫—É
        test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç ElevenLabs TTS. –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
        print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: {test_text}")
        
        # –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ
        audio_path = tts.text_to_speech_with_params(
            test_text, 
            {
                "provider": "elevenlabs",
                "voice": {"gender": "female", "lang": "ru"},
                "model_id": "eleven_multilingual_v2",
                "output_format": "mp3_44100_128",
                "stability": 0.25,
                "similarity_boost": 0.8,
                "style_exaggeration": 0.6
            }
        )
        
        if audio_path and os.path.exists(audio_path):
            print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {audio_path}")
            print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(audio_path)} –±–∞–π—Ç")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ temp
            temp_dir = PROJECT_ROOT / 'temp'
            if temp_dir.exists():
                print(f"üìÅ –§–∞–π–ª—ã –≤ temp/:")
                for file in temp_dir.glob('*'):
                    if file.is_file():
                        print(f"  - {file.name} ({os.path.getsize(file)} –±–∞–π—Ç)")
        else:
            print(f"‚ùå –ê—É–¥–∏–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ: {audio_path}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    test_elevenlabs_tts()
