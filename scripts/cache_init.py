#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞ –¥–ª—è –ò–ö–ê–† –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—ç—à–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
"""

import asyncio
import aiohttp
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append('/root/IKAR-ASSISTANT')

from backend.prompts.ikar_system_prompt import IKAR_SYSTEM_PROMPT

async def init_cache():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫—ç—à —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv('/root/IKAR-ASSISTANT/.env')
    
    api_key = os.getenv('OPENROUTER_API_KEY_PAID')
    if not api_key:
        print("‚ùå OPENROUTER_API_KEY_PAID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
    
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á: {api_key[:20]}...")
    print(f"üìä –†–∞–∑–º–µ—Ä —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {len(IKAR_SYSTEM_PROMPT):,} —Å–∏–º–≤–æ–ª–æ–≤")
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/yourusername/ikar",
        "X-Title": "IKAR Cache Initialization"
    }
    
    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞
    payload = {
        "model": "x-ai/grok-4-fast",
        "messages": [
            {
                "role": "system",
                "content": IKAR_SYSTEM_PROMPT,
                "metadata": {"cache": True}  # –í–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
            },
            {
                "role": "user",
                "content": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ò–ö–ê–† –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."
            }
        ],
        "max_tokens": 100,
        "temperature": 0.2
    }
    
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=60)
            ) as response:
                
                if response.status == 200:
                    data = await response.json()
                    
                    if 'usage' in data:
                        usage = data['usage']
                        print(f"üìà –¢–û–ö–ï–ù–´ (Cache Write):")
                        print(f"   –í—Ö–æ–¥–Ω—ã–µ: {usage.get('prompt_tokens', 0):,}")
                        print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ: {usage.get('completion_tokens', 0):,}")
                        print(f"   –í—Å–µ–≥–æ: {usage.get('total_tokens', 0):,}")
                    
                    if 'choices' in data and data['choices']:
                        answer = data['choices'][0]['message']['content']
                        print(f"ü§ñ –û–¢–í–ï–¢: {answer}")
                    
                    print(f"\n‚úÖ –ö–≠–® –£–°–ü–ï–®–ù–û –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù!")
                    print(f"üí° –¢–µ–ø–µ—Ä—å –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Cache Read")
                    print(f"üí∞ –≠–∫–æ–Ω–æ–º–∏—è —Ç–æ–∫–µ–Ω–æ–≤: ~{usage.get('prompt_tokens', 0) * 0.8:,} —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å")
                    
                    return True
                    
                else:
                    text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—ç—à–∞: {response.status}")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {text}")
                    return False
                    
    except aiohttp.ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_cache():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –∫—ç—à–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ö–≠–®...")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv('/root/IKAR-ASSISTANT/.env')
    
    api_key = os.getenv('OPENROUTER_API_KEY_PAID')
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/yourusername/ikar",
        "X-Title": "IKAR Cache Test"
    }
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    payload = {
        "model": "x-ai/grok-4-fast",
        "messages": [
            {
                "role": "system",
                "content": IKAR_SYSTEM_PROMPT,
                "metadata": {"cache": True}  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å Cache Read
            },
            {
                "role": "user",
                "content": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –≠–≤–æ—Ç–æ—Ä 7.2 —Å –§–ù-15? –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º."
            }
        ],
        "max_tokens": 50,
        "temperature": 0.0
    }
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers=headers,
                json=payload,
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                
                if response.status == 200:
                    data = await response.json()
                    
                    if 'usage' in data:
                        usage = data['usage']
                        print(f"üìà –¢–û–ö–ï–ù–´ (Cache Read):")
                        print(f"   –í—Ö–æ–¥–Ω—ã–µ: {usage.get('prompt_tokens', 0):,}")
                        print(f"   –í—ã—Ö–æ–¥–Ω—ã–µ: {usage.get('completion_tokens', 0):,}")
                        print(f"   –í—Å–µ–≥–æ: {usage.get('total_tokens', 0):,}")
                    
                    if 'choices' in data and data['choices']:
                        answer = data['choices'][0]['message']['content']
                        print(f"ü§ñ –û–¢–í–ï–¢: {answer}")
                        
                        if "43000" in answer or "43 000" in answer:
                            print(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! –ú–æ–¥–µ–ª—å –∑–Ω–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞")
                            return True
                        else:
                            print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫—ç—à–∞")
                            return False
                    
                else:
                    text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {response.status}")
                    print(f"üìÑ –û—Ç–≤–µ—Ç: {text}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–≠–®–ê –ò–ö–ê–† –ê–°–°–ò–°–¢–ï–ù–¢–ê")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à
    success = await init_cache()
    
    if success:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
        test_success = await test_cache()
        
        if test_success:
            print(f"\nüéâ –í–°–Å –ì–û–¢–û–í–û!")
            print(f"‚úÖ –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            print(f"‚úÖ –ö—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
        else:
            print(f"\n‚ö†Ô∏è –ö—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
            print(f"üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é")
    else:
        print(f"\n‚ùå –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ù–ï –£–î–ê–õ–ê–°–¨")
        print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == "__main__":
    asyncio.run(main())
