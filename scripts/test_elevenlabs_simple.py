#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç ElevenLabs TTS –±–µ–∑ torch
"""

import os
import sys
import json
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = Path(__file__).resolve().parents[1]

def test_elevenlabs_direct():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ElevenLabs TTS –Ω–∞–ø—Ä—è–º—É—é"""
    print("üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ElevenLabs TTS –Ω–∞–ø—Ä—è–º—É—é...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_file = PROJECT_ROOT / '.env'
    if env_file.exists():
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                if '=' in line and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    voices_file = PROJECT_ROOT / 'data' / 'eleven_voices_ru.json'
    if voices_file.exists():
        with open(voices_file, 'r', encoding='utf-8') as f:
            voices = json.load(f)
            print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(voices)} –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤:")
            for voice in voices:
                print(f"  - {voice.get('name')} ({voice.get('voice_id')}) - {voice.get('gender')}")
    else:
        print("‚ùå –§–∞–π–ª —Å –≥–æ–ª–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å
    female_voice = None
    for voice in voices:
        if voice.get('gender') == 'female':
            female_voice = voice
            break
    
    if not female_voice:
        female_voice = voices[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –µ—Å–ª–∏ –∂–µ–Ω—Å–∫–æ–≥–æ –Ω–µ—Ç
    
    print(f"üé§ –í—ã–±—Ä–∞–Ω –≥–æ–ª–æ—Å: {female_voice.get('name')} ({female_voice.get('voice_id')})")
    
    # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
    api_keys = []
    for i in range(1, 11):
        key = os.getenv(f'ELEVEN_API{i}' if i > 1 else 'ELEVEN_API')
        if key:
            api_keys.append(key)
    
    if not api_keys:
        print("‚ùå API –∫–ª—é—á–∏ ElevenLabs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        return
    
    print(f"üîë –ù–∞–π–¥–µ–Ω–æ {len(api_keys)} API –∫–ª—é—á–µ–π")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏
    proxies = {}
    eleven_proxies = os.getenv('ELEVEN_PROXIES', '').strip()
    if eleven_proxies:
        proxies = {'https': eleven_proxies, 'http': eleven_proxies}
        print(f"üåê –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏: {eleven_proxies}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º TTS
    test_text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç ElevenLabs TTS. –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!"
    print(f"üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç: {test_text}")
    
    payload = {
        "text": test_text,
        "model_id": "eleven_multilingual_v2",
        "voice_settings": {
            "stability": 0.25,
            "similarity_boost": 0.8,
            "style_exaggeration": 0.6,
            "use_speaker_boost": True
        },
        "output_format": "mp3_44100_128",
        "optimize_streaming_latency": 2
    }
    
    url = f"https://api.elevenlabs.io/v1/text-to-speech/{female_voice.get('voice_id')}"
    
    for i, key in enumerate(api_keys):
        print(f"üîë –ü—Ä–æ–±—É–µ–º –∫–ª—é—á #{i+1}: {key[:10]}...")
        
        headers = {
            "xi-api-key": key, 
            "Content-Type": "application/json"
        }
        
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏
            verify_ssl = False  # –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É
            
            resp = requests.post(
                url, 
                headers=headers, 
                data=json.dumps(payload).encode("utf-8"), 
                timeout=60, 
                proxies=proxies or None, 
                verify=verify_ssl
            )
            
            print(f"üì° –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {resp.status_code}")
            
            if resp.ok and resp.content:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
                output_path = PROJECT_ROOT / 'temp' / f'test_elevenlabs_{i+1}.mp3'
                output_path.parent.mkdir(exist_ok=True)
                
                with open(output_path, "wb") as f:
                    f.write(resp.content)
                
                print(f"‚úÖ –ê—É–¥–∏–æ —Å–æ–∑–¥–∞–Ω–æ: {output_path}")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(resp.content)} –±–∞–π—Ç")
                print(f"üéâ ElevenLabs TTS —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ HTTP {resp.status_code}: {resp.text[:200]}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º #{i+1}: {e}")
    
    print("‚ùå –í—Å–µ –∫–ª—é—á–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç!")

if __name__ == '__main__':
    test_elevenlabs_direct()
