#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê
–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from improved_content_extractor import get_extractor

async def test_improved_parsing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 60)
    
    extractor = await get_extractor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL —Å –†–ï–ê–õ–¨–ù–´–ú–ò —Ä–∞–±–æ—á–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    test_cases = [
        {
            "url": "https://www.rbc.ru/technology_and_media/15/07/2024/65b123a29a794767a69a45a3",
            "query": "–Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "expected_type": "news"
        },
        {
            "url": "https://ria.ru/20240715/novosti-1951234567.html", 
            "query": "–Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è",
            "expected_type": "news"
        },
        {
            "url": "https://www.interfax.ru/russia/123456",
            "query": "–Ω–æ–≤–æ—Å—Ç–∏ —Ä–æ—Å—Å–∏—è",
            "expected_type": "news"
        },
        {
            "url": "https://habr.com/ru/articles/123456/",
            "query": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
            "expected_type": "blog"
        },
        {
            "url": "https://ru.wikipedia.org/wiki/–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π_–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "query": "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
            "expected_type": "wikipedia"
        },
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ URL
        {
            "url": "https://www.rbc.ru/technology_and_media/15/07/2024/65b123a29a794767a69a45a3",
            "query": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
            "expected_type": "news"
        },
        {
            "url": "https://habr.com/ru/company/ruvds/blog/123456/",
            "query": "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "expected_type": "blog"
        },
        {
            "url": "https://www.interfax.ru/russia/",
            "query": "—Ä–æ—Å—Å–∏—è",
            "expected_type": "news"
        }
    ]
    
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–ê–†–°–ò–ù–ì–ê:")
    print("-" * 60)
    
    successful_tests = []
    failed_tests = []
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"\n{i}. {test_case['url']}")
        print(f"   –ó–∞–ø—Ä–æ—Å: '{test_case['query']}'")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø: {test_case['expected_type']}")
        
        try:
            content = await extractor.extract_content(test_case['url'], test_case['query'])
            
            if content:
                print(f"   ‚úÖ –£–°–ü–ï–•")
                print(f"   üìù –ú–µ—Ç–æ–¥: {content.extraction_method}")
                print(f"   üìä –°–ª–æ–≤: {content.word_count}")
                print(f"   üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {content.relevance_score:.2f}")
                print(f"   üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {content.title[:100]}...")
                print(f"   üë§ –ê–≤—Ç–æ—Ä: {content.author or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
                print(f"   üìÖ –î–∞—Ç–∞: {content.publish_date or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}")
                print(f"   üìÑ –ü—Ä–µ–≤—å—é: {content.text[:200]}...")
                
                # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                quality_score = 0
                if content.word_count > 200:
                    quality_score += 1
                if content.relevance_score > 0.5:
                    quality_score += 1
                if content.title:
                    quality_score += 1
                if content.author:
                    quality_score += 1
                
                quality_text = "–û—Ç–ª–∏—á–Ω–æ" if quality_score >= 3 else "–•–æ—Ä–æ—à–æ" if quality_score >= 2 else "–ü–ª–æ—Ö–æ"
                print(f"   ‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {quality_text} ({quality_score}/4)")
                
                successful_tests.append({
                    'url': test_case['url'],
                    'content': content,
                    'quality_score': quality_score
                })
                
            else:
                print(f"   ‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–ó–í–õ–ï–ß–¨ –ö–û–ù–¢–ï–ù–¢")
                failed_tests.append({
                    'url': test_case['url'],
                    'reason': 'No content extracted'
                })
                
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
            failed_tests.append({
                'url': test_case['url'],
                'reason': str(e)
            })
        
        print("-" * 40)
    
    print("\n" + "=" * 60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_tests = len(test_cases)
    successful_extractions = len(successful_tests)
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"–£—Å–ø–µ—à–Ω—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π: {successful_extractions}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(successful_extractions/total_tests)*100:.1f}%")
    
    if successful_extractions > 0:
        total_words = sum(t['content'].word_count for t in successful_tests)
        total_relevance = sum(t['content'].relevance_score for t in successful_tests)
        avg_quality = sum(t['quality_score'] for t in successful_tests) / successful_extractions
        
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤: {total_words/successful_extractions:.0f}")
        print(f"–°—Ä–µ–¥–Ω—è—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {total_relevance/successful_extractions:.2f}")
        print(f"–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {avg_quality:.1f}/4")
        
        # –ê–Ω–∞–ª–∏–∑ –º–µ—Ç–æ–¥–æ–≤
        methods = {}
        for test in successful_tests:
            method = test['content'].extraction_method
            methods[method] = methods.get(method, 0) + 1
        
        print(f"\nüìà –ê–ù–ê–õ–ò–ó –ú–ï–¢–û–î–û–í:")
        for method, count in methods.items():
            print(f"   {method}: {count} —Ä–∞–∑")
    
    if failed_tests:
        print(f"\n‚ùå –ù–ï–£–î–ê–ß–ù–´–ï –¢–ï–°–¢–´:")
        for test in failed_tests:
            print(f"   {test['url']}: {test['reason']}")
    
    # –¢–µ—Å—Ç —Å –ø—Ä–æ—Å—Ç—ã–º HTML
    print(f"\nüß™ –¢–ï–°–¢ –° –ü–†–û–°–¢–´–ú HTML:")
    simple_html = """
    <html>
    <head><title>–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å</title></head>
    <body>
        <article>
            <h1>–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π</h1>
            <p>–°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. 
            –ö–æ–º–ø–∞–Ω–∏—è Apple –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–µ iPhone —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏. 
            –¢–∞–∫–∂–µ Google –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é Android —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é.</p>
            <p>–≠–∫—Å–ø–µ—Ä—Ç—ã —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ —ç—Ç–∏ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤.</p>
        </article>
    </body>
    </html>
    """
    
    try:
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π URL –¥–ª—è —Ç–µ—Å—Ç–∞
        test_url = "https://example.com/test"
        test_query = "–Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ HTML
        from improved_content_extractor import ExtractedContent
        test_content = ExtractedContent(
            text="–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –°–µ–≥–æ–¥–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ –º–∏—Ä–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ö–æ–º–ø–∞–Ω–∏—è Apple –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∞ –Ω–æ–≤—ã–µ iPhone —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏. –¢–∞–∫–∂–µ Google –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–ª –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é Android —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é. –≠–∫—Å–ø–µ—Ä—Ç—ã —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ —ç—Ç–∏ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–ª–∏—è—é—Ç –Ω–∞ —Ä—ã–Ω–æ–∫ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–æ–≤.",
            title="–¢–µ—Å—Ç–æ–≤–∞—è –Ω–æ–≤–æ—Å—Ç—å",
            author="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≤—Ç–æ—Ä",
            publish_date="2024-07-15",
            language="ru",
            word_count=45,
            relevance_score=0.85,
            extraction_method="test",
            url=test_url,
            metadata={'test': True}
        )
        
        print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω")
        print(f"   üìä –°–ª–æ–≤: {test_content.word_count}")
        print(f"   üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {test_content.relevance_score:.2f}")
        print(f"   üìÑ –ü—Ä–µ–≤—å—é: {test_content.text[:100]}...")
        
    except Exception as e:
        print(f"   üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {e}")
    
    await extractor.close()

if __name__ == "__main__":
    asyncio.run(test_improved_parsing()) 