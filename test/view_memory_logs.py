#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ª–æ–≥–æ–≤ –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏
"""
import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append('backend')

async def view_memory_injection_details():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏"""
    
    print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏\n")
    
    try:
        from backend.core.memory_injector import get_memory_injector
        from backend.core.collective_mind import get_collective_mind
        
        injector = get_memory_injector()
        collective_mind = get_collective_mind()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        test_prompts = [
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞?",
            "–û–±—ä—è—Å–Ω–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ –±–ª–æ–∫—á–µ–π–Ω?",
            "–ö–∞–∫ —Ç–æ—Ä–≥–æ–≤–∞—Ç—å –Ω–∞ –±–∏—Ä–∂–µ?"
        ]
        
        for i, prompt in enumerate(test_prompts, 1):
            print(f"üìù –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞ {i}: {prompt}")
            print("-" * 60)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø–∞–º—è—Ç–∏
            memory_analysis = await injector.analyze_memory_usage(prompt)
            
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {memory_analysis.get('total_available', 0)}")
            print(f"üìä –¢–æ–∫–µ–Ω–æ–≤: {memory_analysis.get('token_usage', 0):,}")
            print(f"‚≠ê –¢–æ–ø —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {memory_analysis.get('top_relevance', 0):.2f}")
            print(f"‚ö° –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {memory_analysis.get('memory_efficiency', 0):.1f}")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            relevance_dist = memory_analysis.get('relevance_distribution', {})
            if relevance_dist:
                print(f"üìà –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:")
                print(f"   üî¥ –í—ã—Å–æ–∫–∞—è (>0.7): {relevance_dist.get('high', 0)}")
                print(f"   üü° –°—Ä–µ–¥–Ω—è—è (0.3-0.7): {relevance_dist.get('medium', 0)}")
                print(f"   üü¢ –ù–∏–∑–∫–∞—è (<0.3): {relevance_dist.get('low', 0)}")
            
            # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º
            type_dist = memory_analysis.get('type_distribution', {})
            if type_dist:
                print(f"üè∑Ô∏è –¢–∏–ø—ã –ø–∞–º—è—Ç–∏:")
                for memory_type, count in type_dist.items():
                    type_names = {
                        'insight': '–ò–Ω—Å–∞–π—Ç—ã',
                        'wisdom': '–ú—É–¥—Ä–æ—Å—Ç—å',
                        'experience': '–û–ø—ã—Ç',
                        'observation': '–ù–∞–±–ª—é–¥–µ–Ω–∏—è',
                        'reflection': '–†–∞–∑–º—ã—à–ª–µ–Ω–∏—è'
                    }
                    name = type_names.get(memory_type, memory_type)
                    print(f"   üìö {name}: {count}")
            
            print()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–Ω—ä–µ–∫—Ü–∏–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
            if memory_analysis.get('total_available', 0) > 0:
                print("üíâ –ü—Ä–∏–º–µ—Ä –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏:")
                memory_chunks = await injector.select_relevant_memories(prompt, "")
                
                for j, chunk in enumerate(memory_chunks[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-3
                    stars = "‚≠ê" * min(int(chunk.relevance_score * 5), 5)
                    print(f"   {j}. {stars} (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {chunk.relevance_score:.2f})")
                    print(f"      –¢–∏–ø: {chunk.memory_type}")
                    print(f"      –¢–æ–∫–µ–Ω—ã: {chunk.tokens_count}")
                    print(f"      –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {chunk.content[:100]}...")
                    print()
            
            print("=" * 60)
            print()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏:")
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_memories = 0
            memory_types = {}
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            print("   üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print("      (–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –ë–î)")
            
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def view_log_files():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã"""
    print("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã:")
    
    log_files = [
        "logs/chatumba.log",
        "logs/memory.log", 
        "logs/error.log"
    ]
    
    for log_file in log_files:
        if os.path.exists(log_file):
            print(f"\nüìÑ {log_file}:")
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
                    memory_lines = [line for line in lines if '–ø–∞–º—è—Ç—å' in line.lower() or 'memory' in line.lower() or '–∏–Ω—ä–µ–∫—Ü–∏—è' in line.lower()]
                    
                    if memory_lines:
                        print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–∞–º—è—Ç–∏:")
                        for line in memory_lines[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                            print(f"   {line.strip()}")
                    else:
                        print("   –ó–∞–ø–∏—Å–µ–π –æ –ø–∞–º—è—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}")
        else:
            print(f"\n‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")

if __name__ == "__main__":
    print("üß† –ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø–∞–º—è—Ç–∏\n")
    
    # –ê–Ω–∞–ª–∏–∑ –¥–µ—Ç–∞–ª–µ–π
    asyncio.run(view_memory_injection_details())
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    view_log_files()
    
    print("\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏:")
    print("   tail -f logs/chatumba.log | grep -i –ø–∞–º—è—Ç—å")
    print("   tail -f logs/memory.log") 