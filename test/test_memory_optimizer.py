#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏.
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent / "backend"))

from memory.memory_optimizer import MemoryOptimizer, test_optimization
from memory.sqlite import SQLiteStorage
from llm.openrouter import OpenRouterClient
from config import Config
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_memory_optimizer():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
        from backend.utils.component_manager import get_component_manager
        component_manager = get_component_manager()
        
        config = component_manager.get_config()
        sqlite_storage = component_manager.get_sqlite_storage()
        llm_client = component_manager.get_llm_client()
        
        print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {sqlite_storage.db_path}")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        optimizer = MemoryOptimizer(sqlite_storage.db_path, llm_client, max_chunk_tokens=30000)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        print(f"üåô –ù–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {optimizer.is_night_time()}")
        print(f"‚è∞ –ù–æ—á–Ω—ã–µ —á–∞—Å—ã: {optimizer.night_start} - {optimizer.night_end}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await optimizer.get_optimization_stats()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        for key, value in stats.items():
            print(f"   {key}: {value}")
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        chunks = await optimizer.get_memory_chunks(limit=3)
        print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {len(chunks)}")
        
        for i, chunk in enumerate(chunks, 1):
            print(f"   –ß–∞–Ω–∫ {i}: {chunk['source']}, —Ç–æ–∫–µ–Ω–æ–≤: {chunk['tokens']}")
        
        if chunks:
            print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ —á–∞–Ω–∫–∞...")
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–µ–º –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–µ—Å—Ç–∞
            original_is_night_time = optimizer.is_night_time
            optimizer.is_night_time = lambda: True
            
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞
                first_chunk = chunks[0]
                print(f"üìù –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º: {first_chunk['source']}")
                
                optimized_content = await optimizer.optimize_chunk(first_chunk)
                
                if optimized_content:
                    original_tokens = optimizer.count_tokens(first_chunk['content'])
                    optimized_tokens = optimizer.count_tokens(optimized_content)
                    compression_ratio = original_tokens / optimized_tokens if optimized_tokens > 0 else 1
                    
                    print(f"‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                    print(f"   –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {original_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
                    print(f"   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {optimized_tokens} —Ç–æ–∫–µ–Ω–æ–≤")
                    print(f"   –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {compression_ratio:.2f}x")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    preview = optimized_content[:200] + "..." if len(optimized_content) > 200 else optimized_content
                    print(f"   –ü—Ä–µ–≤—å—é: {preview}")
                    
                    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
                    save_choice = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–∞–Ω–∫? (y/N): ").lower()
                    if save_choice == 'y':
                        success = await optimizer.save_optimized_chunk(first_chunk, optimized_content)
                        if success:
                            print("‚úÖ –ß–∞–Ω–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                        else:
                            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
                    else:
                        print("üö´ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
                    
            finally:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
                optimizer.is_night_time = original_is_night_time
        else:
            print("‚ÑπÔ∏è  –ù–µ—Ç —á–∞–Ω–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
            print("   –í–æ–∑–º–æ–∂–Ω–æ, –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        print("\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

async def test_full_cycle():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        from backend.utils.component_manager import get_component_manager
        component_manager = get_component_manager()
        
        config = component_manager.get_config()
        sqlite_storage = component_manager.get_sqlite_storage()
        llm_client = component_manager.get_llm_client()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
        await test_optimization(sqlite_storage.db_path, llm_client)
        print("‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: {e}")

def print_usage():
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    print("""
üß† –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ –ø–∞–º—è—Ç–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python test_memory_optimizer.py [–∫–æ–º–∞–Ω–¥–∞]

–ö–æ–º–∞–Ω–¥—ã:
    test        - –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    cycle       - –¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    help        - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã:
    python test_memory_optimizer.py
    python test_memory_optimizer.py test
    python test_memory_optimizer.py cycle
    """)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    command = sys.argv[1] if len(sys.argv) > 1 else "test"
    
    if command == "help":
        print_usage()
        return
    elif command == "test":
        await test_memory_optimizer()
    elif command == "cycle":
        await test_full_cycle()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print_usage()
        return

if __name__ == "__main__":
    asyncio.run(main()) 