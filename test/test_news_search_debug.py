#!/usr/bin/env python3
"""
üîç –¢–ï–°–¢ –û–¢–õ–ê–î–ö–ò –ü–û–ò–°–ö–ê –ù–û–í–û–°–¢–ï–ô
–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –ø–æ—á–µ–º—É –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

async def test_news_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
    print("üîç –¢–ï–°–¢ –ü–û–ò–°–ö–ê –ù–û–í–û–°–¢–ï–ô")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
        from internet_intelligence_system import InternetIntelligenceSystem
        from ikar_internet_integration import IKARInternetIntegration
        
        print("‚úÖ –ú–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—ã
        internet_system = InternetIntelligenceSystem()
        integration = IKARInternetIntegration()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞
        test_query = "–±–æ—Ç, –∫–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏?"
        print(f"\nüìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{test_query}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        needs_search, search_query, confidence = integration.needs_internet_search(test_query)
        print(f"üîç –ù—É–∂–µ–Ω –ø–æ–∏—Å–∫: {needs_search}")
        print(f"üîç –û—á–∏—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: '{search_query}'")
        print(f"üîç –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f}")
        
        if needs_search:
            print(f"\nüåê –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫: '{search_query}'")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            search_results = await internet_system.search_internet(search_query, max_total_results=10)
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(search_results)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, result in enumerate(search_results[:5], 1):
                print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
                print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.title}")
                print(f"   URL: {result.url}")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source}")
                print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_score:.2f}")
                print(f"   –°–Ω–∏–ø–ø–µ—Ç: {result.snippet[:100]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            print(f"\nüìÑ –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç...")
            results_with_content = await internet_system.extract_content(search_results)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            for i, result in enumerate(results_with_content[:3], 1):
                print(f"\nüìÑ –ö–æ–Ω—Ç–µ–Ω—Ç {i}:")
                print(f"   URL: {result.url}")
                if result.content:
                    print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç (–ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤.): {result.content[:200]}...")
                else:
                    print(f"   ‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI
            print(f"\nüß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ AI...")
            processed_info = await internet_system.process_with_ai(search_query, results_with_content)
            
            print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {processed_info.confidence_score:.2f}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(processed_info.sources)}")
            print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processed_info.processing_time:.2f}—Å")
            
            print(f"\nüìù AI-–≤—ã–∂–∏–º–∫–∞:")
            print(f"{processed_info.ai_summary}")
            
            print(f"\nüîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:")
            for i, point in enumerate(processed_info.key_points[:3], 1):
                print(f"   {i}. {point}")
            
            print(f"\nüìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏:")
            for i, source in enumerate(processed_info.sources[:3], 1):
                print(f"   {i}. {source}")
        
        else:
            print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def test_news_sources():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("\n\nüîç –¢–ï–°–¢ –ò–°–¢–û–ß–ù–ò–ö–û–í –ù–û–í–û–°–¢–ï–ô")
    print("=" * 50)
    
    try:
        from internet_intelligence_system import InternetIntelligenceSystem
        
        internet_system = InternetIntelligenceSystem()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞–ø—Ä—è–º—É—é
        print("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π...")
        news_results = await internet_system._search_news("–Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è", max_results=5)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news_results)}")
        
        for i, result in enumerate(news_results, 1):
            print(f"\nüì∞ –ù–æ–≤–æ—Å—Ç—å {i}:")
            print(f"   –ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.title}")
            print(f"   URL: {result.url}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source}")
            print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_score:.2f}")
            print(f"   –î–∞—Ç–∞: {result.timestamp}")
            print(f"   –°–Ω–∏–ø–ø–µ—Ç: {result.snippet[:100]}...")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –û–¢–õ–ê–î–ö–ò –ü–û–ò–°–ö–ê –ù–û–í–û–°–¢–ï–ô")
    print("=" * 60)
    
    await test_news_search()
    await test_news_sources()
    
    print("\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    asyncio.run(main()) 