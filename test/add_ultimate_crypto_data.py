import re

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('backend/api/telegram_polling.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ
ultimate_data_function = '''
async def fetch_ultimate_crypto_data(crypto_terms):
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."""
    import aiohttp
    import json
    
    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ù–∞—á–∏–Ω–∞—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è: {crypto_terms[:3]}")
    
    ultimate_data = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º–æ–Ω–µ—Ç—É –∏–∑ —Ç–µ—Ä–º–∏–Ω–æ–≤
    main_coin = None
    coin_mapping = {
        'bitcoin': 'bitcoin', 'btc': 'bitcoin',
        'ethereum': 'ethereum', 'eth': 'ethereum', 
        'pepe': 'pepe', '–ø–µ–ø–µ': 'pepe',
        'usdt': 'tether', 'tether': 'tether',
        'bnb': 'binancecoin', 'binance': 'binancecoin'
    }
    
    for term in crypto_terms:
        if term.lower() in coin_mapping:
            main_coin = coin_mapping[term.lower()]
            break
    
    if not main_coin:
        main_coin = 'bitcoin'  # Fallback
    
    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–Ω–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {main_coin}")
    
    async with aiohttp.ClientSession() as session:
        
        # 1. –î–ï–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï COINGECKO
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ CoinGecko...")
            url = f'https://api.coingecko.com/api/v3/coins/{main_coin}'
            async with session.get(url, timeout=15) as response:
                if response.status == 200:
                    data = await response.json()
                    market_data = data.get('market_data', {})
                    
                    current_price = market_data.get('current_price', {}).get('usd', 0)
                    price_change_24h = market_data.get('price_change_percentage_24h', 0)
                    price_change_7d = market_data.get('price_change_percentage_7d', 0)
                    market_cap = market_data.get('market_cap', {}).get('usd', 0)
                    volume_24h = market_data.get('total_volume', {}).get('usd', 0)
                    
                    ultimate_data.append(f"üí∞ {data.get('name', 'Unknown')} (${current_price:.6f})")
                    ultimate_data.append(f"üìä 24h: {price_change_24h:.2f}% | 7d: {price_change_7d:.2f}%")
                    ultimate_data.append(f"üíé Market Cap: ${market_cap:,.0f}")
                    ultimate_data.append(f"üìà Volume 24h: ${volume_24h:,.0f}")
                    
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] CoinGecko: {current_price} USD, {price_change_24h:.2f}%")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ CoinGecko: {e}")
        
        # 2. FEAR & GREED INDEX
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é Fear & Greed Index...")
            async with session.get('https://api.alternative.me/fng/', timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    fng_data = data.get('data', [{}])[0]
                    fng_value = fng_data.get('value', 'N/A')
                    fng_classification = fng_data.get('value_classification', 'Unknown')
                    
                    ultimate_data.append(f"üò± Fear & Greed: {fng_value} ({fng_classification})")
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] F&G Index: {fng_value} - {fng_classification}")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ F&G Index: {e}")
        
        # 3. BINANCE TICKER DATA (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ Binance...")
            symbol = f"{main_coin.upper()}USDT" if main_coin != 'tether' else 'BTCUSDT'
            if main_coin == 'pepe':
                symbol = 'PEPEUSDT'
            elif main_coin == 'ethereum':
                symbol = 'ETHUSDT'
            
            url = f'https://api.binance.com/api/v3/ticker/24hr?symbol={symbol}'
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    price = float(data.get('lastPrice', 0))
                    change_percent = float(data.get('priceChangePercent', 0))
                    volume = float(data.get('volume', 0))
                    high_24h = float(data.get('highPrice', 0))
                    low_24h = float(data.get('lowPrice', 0))
                    
                    ultimate_data.append(f"üî• Binance: ${price:.6f} ({change_percent:+.2f}%)")
                    ultimate_data.append(f"üìä 24h High: ${high_24h:.6f} | Low: ${low_24h:.6f}")
                    ultimate_data.append(f"üíπ Volume: {volume:,.0f}")
                    
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] Binance: {price} USD, {change_percent}%")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ Binance: {e}")
        
        # 4. COINPAPRIKA API (–æ—Ç–∫—Ä—ã—Ç—ã–π)
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ CoinPaprika...")
            # –ú–∞–ø–ø–∏–Ω–≥ –¥–ª—è CoinPaprika ID
            paprika_mapping = {
                'bitcoin': 'btc-bitcoin',
                'ethereum': 'eth-ethereum',
                'pepe': 'pepe-pepe',
                'tether': 'usdt-tether'
            }
            
            paprika_id = paprika_mapping.get(main_coin, 'btc-bitcoin')
            url = f'https://api.coinpaprika.com/v1/tickers/{paprika_id}'
            
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    quotes = data.get('quotes', {}).get('USD', {})
                    
                    price = quotes.get('price', 0)
                    change_1h = quotes.get('percent_change_1h', 0)
                    change_24h = quotes.get('percent_change_24h', 0)
                    ath_price = quotes.get('ath_price', 0)
                    
                    ultimate_data.append(f"üìà CoinPaprika: ${price:.6f}")
                    ultimate_data.append(f"‚è∞ 1h: {change_1h:+.2f}% | 24h: {change_24h:+.2f}%")
                    if ath_price > 0:
                        ath_distance = ((price - ath_price) / ath_price) * 100
                        ultimate_data.append(f"üèîÔ∏è ATH: ${ath_price:.6f} ({ath_distance:+.1f}%)")
                    
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] CoinPaprika: {price} USD")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ CoinPaprika: {e}")
        
        # 5. CRYPTO COMPARE (–æ—Ç–∫—Ä—ã—Ç—ã–π API)
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–∞–Ω–Ω—ã–µ CryptoCompare...")
            symbol_map = {
                'bitcoin': 'BTC',
                'ethereum': 'ETH', 
                'pepe': 'PEPE',
                'tether': 'USDT'
            }
            
            symbol = symbol_map.get(main_coin, 'BTC')
            url = f'https://min-api.cryptocompare.com/data/pricemultifull?fsyms={symbol}&tsyms=USD'
            
            async with session.get(url, timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    raw_data = data.get('RAW', {}).get(symbol, {}).get('USD', {})
                    
                    price = raw_data.get('PRICE', 0)
                    change_24h = raw_data.get('CHANGEPCT24HOUR', 0)
                    volume_24h = raw_data.get('VOLUME24HOUR', 0)
                    supply = raw_data.get('SUPPLY', 0)
                    
                    ultimate_data.append(f"üíé CryptoCompare: ${price:.6f}")
                    ultimate_data.append(f"üìä Change 24h: {change_24h:+.2f}%")
                    ultimate_data.append(f"üîÑ Supply: {supply:,.0f}")
                    
                    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] CryptoCompare: {price} USD")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ CryptoCompare: {e}")
        
        # 6. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –†–´–ù–û–ß–ù–´–ï –î–ê–ù–ù–´–ï
        try:
            logger.info("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            
            # Bitcoin dominance –∏ –æ–±—â–∏–π —Ä—ã–Ω–æ–∫
            async with session.get('https://api.coingecko.com/api/v3/global', timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    global_data = data.get('data', {})
                    
                    total_market_cap = global_data.get('total_market_cap', {}).get('usd', 0)
                    btc_dominance = global_data.get('market_cap_percentage', {}).get('btc', 0)
                    eth_dominance = global_data.get('market_cap_percentage', {}).get('eth', 0)
                    
                    ultimate_data.append(f"üåç Total Market Cap: ${total_market_cap:,.0f}")
                    ultimate_data.append(f"üëë BTC Dominance: {btc_dominance:.1f}%")
                    ultimate_data.append(f"‚ö° ETH Dominance: {eth_dominance:.1f}%")
        except Exception as e:
            logger.error(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –û—à–∏–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    if not ultimate_data:
        ultimate_data = ["üìä –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"]
        logger.warning("[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    
    result = "\\n".join(ultimate_data)
    logger.info(f"[–£–õ–¨–¢–ò–ú–ï–ô–¢-–î–ê–ù–ù–´–ï] –°–æ–±—Ä–∞–Ω–æ {len(ultimate_data)} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
    return result
'''

# –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ analyze_trading_chart
insert_position = content.find('async def cryptosud_analysis(')
content = content[:insert_position] + ultimate_data_function + '\n' + content[insert_position:]

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é cryptosud_analysis –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ª—å—Ç–∏–º–µ–π—Ç –¥–∞–Ω–Ω—ã—Ö
old_crypto_news_call = '''        # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π
        await send_telegram_message(chat_id, "üì∞ –°–æ–±–∏—Ä–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞...", None)
        crypto_news = await fetch_crypto_news(crypto_terms)'''

new_crypto_news_call = '''        # 2. –ü–∞—Ä—Å–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        await send_telegram_message(chat_id, "üì∞ –°–æ–±–∏—Ä–∞—é –ú–ê–ö–°–ò–ú–£–ú –¥–∞–Ω–Ω—ã—Ö –æ —Ä—ã–Ω–∫–µ...", None)
        crypto_news = await fetch_crypto_news(crypto_terms)
        
        # 2.1. –ü–æ–ª—É—á–∞–µ–º —É–ª—å—Ç–∏–º–µ–π—Ç –¥–∞–Ω–Ω—ã–µ
        await send_telegram_message(chat_id, "üöÄ –ü–æ–¥–∫–ª—é—á–∞—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö...", None)
        ultimate_data = await fetch_ultimate_crypto_data(crypto_terms)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        full_market_data = f"{crypto_news}\\n\\nüî• –†–ê–°–®–ò–†–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï:\\n{ultimate_data}"'''

content = content.replace(old_crypto_news_call, new_crypto_news_call)

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
content = content.replace('üì∞ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\\n{crypto_news}', 'üì∞ –ü–æ–ª–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\\n{full_market_data}')

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('backend/api/telegram_polling.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("–î–æ–±–∞–≤–ª–µ–Ω –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤!")