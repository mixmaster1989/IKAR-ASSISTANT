import re

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('backend/api/telegram_polling.py', 'r', encoding='utf-8') as f:
    content = f.read()

# 1. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –ü–†–û–ú–ü–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ì–†–ê–§–ò–ö–ê - –§–û–ö–£–° –ù–ê –¶–ï–ù–ï
old_trading_prompt = '''        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        trading_prompt = """üìä –¢—ã ‚Äî –≠–ö–°–ü–ï–†–¢ –ü–û –¢–ï–•–ù–ò–ß–ï–°–ö–û–ú–£ –ê–ù–ê–õ–ò–ó–£ –ì–†–ê–§–ò–ö–û–í! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ:

üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò:
üí∞ ‚Äî –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ (–µ—Å–ª–∏ –≤–∏–¥–Ω–∞)
üìà ‚Äî –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–∫–∞–∫–∞—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞)
‚è∞ ‚Äî –¢–∞–π–º—Ñ—Ä–µ–π–º –≥—Ä–∞—Ñ–∏–∫–∞ (1m, 5m, 1h, 4h, 1D –∏ —Ç.–¥.)
üìä ‚Äî –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ (—Å–≤–µ—á–∏, –ª–∏–Ω–∏—è, –±–∞—Ä—ã)

üîç –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (–µ—Å–ª–∏ –µ—Å—Ç—å):
üìà ‚Äî –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (MA, EMA) - –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
üìä ‚Äî RSI - —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∑–æ–Ω—ã
üìâ ‚Äî MACD - —Å–∏–≥–Ω–∞–ª—ã –∏ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏–∏  
üéØ ‚Äî Bollinger Bands - –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã
üìä ‚Äî –û–±—ä–µ–º—ã - –∞–Ω–æ–º–∞–ª–∏–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
üîÑ ‚Äî –î—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã (Stoch, Williams %R –∏ —Ç.–¥.)

üìà –ü–ê–¢–¢–ï–†–ù–´ –ò –£–†–û–í–ù–ò:
üéØ ‚Äî –£—Ä–æ–≤–Ω–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω—ã)
üìê ‚Äî –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ª–∏–Ω–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã
üî∫ ‚Äî –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∏, —Ñ–ª–∞–≥–∏, –≥–æ–ª–æ–≤–∞-–ø–ª–µ—á–∏ –∏ —Ç.–¥.)
üìä ‚Äî –§–∏–±–æ–Ω–∞—á—á–∏ —É—Ä–æ–≤–Ω–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
üé™ ‚Äî –Ø–ø–æ–Ω—Å–∫–∏–µ —Å–≤–µ—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã

‚ö° –†–´–ù–û–ß–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
üìà ‚Äî –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–Ω–¥ (–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π)
üî• ‚Äî –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
üí• ‚Äî –ö–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
üéØ ‚Äî –¢–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞

–ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º! –£–∫–∞–∑—ã–≤–∞–π —Ü–∏—Ñ—Ä—ã, —É—Ä–æ–≤–Ω–∏, –ø—Ä–æ—Ü–µ–Ω—Ç—ã!"""'''

new_trading_prompt = '''        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ü–µ–Ω–µ
        trading_prompt = """üìä –¢—ã ‚Äî –≠–ö–°–ü–ï–†–¢ –ü–û –¢–ï–•–ù–ò–ß–ï–°–ö–û–ú–£ –ê–ù–ê–õ–ò–ó–£ –ì–†–ê–§–ò–ö–û–í! –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–æ—Ä–≥–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ:

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –¶–ï–ù–ê:
üí∞ ‚Äî –¢–ï–ö–£–©–ê–Ø –¶–ï–ù–ê: –ù–∞–π–¥–∏ –∏ —É–∫–∞–∂–∏ –¢–û–ß–ù–£–Æ —Ü–µ–Ω—É —Å–ø—Ä–∞–≤–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ (–ø–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è)
üí∞ ‚Äî –§–û–†–ú–ê–¢ –¶–ï–ù–´: –ï—Å–ª–∏ —Ü–µ–Ω–∞ –º–µ–Ω—å—à–µ $1, —É–∫–∞–∑—ã–≤–∞–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: $0.000021450)
üí∞ ‚Äî –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—å —Ü–µ–Ω—É –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–µ
üìà ‚Äî –¢–û–†–ì–û–í–ê–Ø –ü–ê–†–ê: –¢–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–∞—Ä—É (BTC/USDT, ETH/USDT, PEPE/USDT –∏ —Ç.–¥.)

üéØ –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï:
‚è∞ ‚Äî –¢–∞–π–º—Ñ—Ä–µ–π–º –≥—Ä–∞—Ñ–∏–∫–∞ (1m, 5m, 15m, 1h, 4h, 1D –∏ —Ç.–¥.)
üìä ‚Äî –¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ (—Å–≤–µ—á–∏, –ª–∏–Ω–∏—è, –±–∞—Ä—ã)
üìÖ ‚Äî –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏ (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)

üîç –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´ (–µ—Å–ª–∏ –µ—Å—Ç—å):
üìà ‚Äî –°–∫–æ–ª—å–∑—è—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ (MA, EMA) - –¢–û–ß–ù–´–ï –∑–Ω–∞—á–µ–Ω–∏—è
üìä ‚Äî RSI - —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: RSI = 67.2)
üìâ ‚Äî MACD - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
üéØ ‚Äî Bollinger Bands - –≤–µ—Ä—Ö–Ω—è—è/–Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü—ã
üìä ‚Äî –û–±—ä–µ–º—ã - —Ç–µ–∫—É—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
üîÑ ‚Äî –î—Ä—É–≥–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Å —á–∏—Å–ª–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

üìà –£–†–û–í–ù–ò –ò –ü–ê–¢–¢–ï–†–ù–´:
üéØ ‚Äî –ü–æ–¥–¥–µ—Ä–∂–∫–∞/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ (–¢–û–ß–ù–´–ï —Ü–µ–Ω—ã: $0.000019, $0.000023)
üìê ‚Äî –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ª–∏–Ω–∏–∏ (—É–≥–ª—ã –Ω–∞–∫–ª–æ–Ω–∞, —Ç–æ—á–∫–∏ –∫–∞—Å–∞–Ω–∏—è)
üî∫ ‚Äî –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Ä–∞–∑–º–µ—Ä—ã, –ø—Ä–æ–µ–∫—Ü–∏–∏)
üìä ‚Äî –§–∏–±–æ–Ω–∞—á—á–∏ —É—Ä–æ–≤–Ω–∏ (23.6%, 38.2%, 61.8%)

‚ö° –†–´–ù–û–ß–ù–ê–Ø –°–ò–¢–£–ê–¶–ò–Ø:
üìà ‚Äî –¢—Ä–µ–Ω–¥ (–≤–æ—Å—Ö–æ–¥—è—â–∏–π/–Ω–∏—Å—Ö–æ–¥—è—â–∏–π/–±–æ–∫–æ–≤–æ–π) + —Å–∏–ª–∞ —Ç—Ä–µ–Ω–¥–∞
üî• ‚Äî –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–≤—ã—Å–æ–∫–∞—è/—Å—Ä–µ–¥–Ω—è—è/–Ω–∏–∑–∫–∞—è)
üí• ‚Äî –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—Ö–æ–¥–∞/–≤—ã—Ö–æ–¥–∞

–í–ù–ò–ú–ê–ù–ò–ï! –¶–µ–Ω–∞ - —ç—Ç–æ –°–ê–ú–û–ï –í–ê–ñ–ù–û–ï! –ù–∞–π–¥–∏ –µ—ë –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ —Å–ø—Ä–∞–≤–∞ –∏ —É–∫–∞–∂–∏ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é!"""'''

content = content.replace(old_trading_prompt, new_trading_prompt)

# 2. –î–û–ë–ê–í–õ–Ø–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Æ –¶–ï–ù–´ –ß–ï–†–ï–ó API
price_validation_function = '''
async def validate_price_from_apis(trading_pair, chart_price):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ API."""
    import aiohttp
    
    logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–Ω—É {chart_price} –¥–ª—è –ø–∞—Ä—ã {trading_pair}")
    
    validated_prices = []
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è —Ä–∞–∑–Ω—ã—Ö API
    pair_mapping = {
        'PEPE/USDT': {'binance': 'PEPEUSDT', 'coingecko': 'pepe'},
        'BTC/USDT': {'binance': 'BTCUSDT', 'coingecko': 'bitcoin'},
        'ETH/USDT': {'binance': 'ETHUSDT', 'coingecko': 'ethereum'},
        'BNB/USDT': {'binance': 'BNBUSDT', 'coingecko': 'binancecoin'}
    }
    
    pair_info = pair_mapping.get(trading_pair.upper())
    if not pair_info:
        logger.warning(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–∞—Ä–∞: {trading_pair}")
        return chart_price, []
    
    async with aiohttp.ClientSession() as session:
        
        # 1. Binance API
        try:
            binance_symbol = pair_info['binance']
            url = f'https://api.binance.com/api/v3/ticker/price?symbol={binance_symbol}'
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    binance_price = float(data.get('price', 0))
                    validated_prices.append(('Binance', binance_price))
                    logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] Binance: {binance_price}")
        except Exception as e:
            logger.error(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –û—à–∏–±–∫–∞ Binance: {e}")
        
        # 2. CoinGecko API
        try:
            coingecko_id = pair_info['coingecko']
            url = f'https://api.coingecko.com/api/v3/simple/price?ids={coingecko_id}&vs_currencies=usd'
            async with session.get(url, timeout=5) as response:
                if response.status == 200:
                    data = await response.json()
                    coingecko_price = data.get(coingecko_id, {}).get('usd', 0)
                    if coingecko_price:
                        validated_prices.append(('CoinGecko', coingecko_price))
                        logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] CoinGecko: {coingecko_price}")
        except Exception as e:
            logger.error(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –û—à–∏–±–∫–∞ CoinGecko: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    if validated_prices:
        avg_price = sum(price for _, price in validated_prices) / len(validated_prices)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å –≥—Ä–∞—Ñ–∏–∫–∞
        if chart_price and chart_price > 0:
            deviation = abs(chart_price - avg_price) / avg_price * 100
            logger.info(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ì—Ä–∞—Ñ–∏–∫: {chart_price}, –°—Ä–µ–¥–Ω–µ–µ API: {avg_price:.8f}, –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: {deviation:.1f}%")
            
            if deviation > 10:  # –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ 10%
                logger.warning(f"[–í–ê–õ–ò–î–ê–¶–ò–Ø-–¶–ï–ù–´] –ë–æ–ª—å—à–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∏–∑ API")
                return avg_price, validated_prices
        
        return chart_price or avg_price, validated_prices
    
    return chart_price, []
'''

# –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ analyze_trading_chart
insert_position = content.find('async def fetch_ultimate_crypto_data(')
content = content[:insert_position] + price_validation_function + '\n' + content[insert_position:]

# 3. –ò–°–ü–†–ê–í–õ–Ø–ï–ú –õ–û–ì–ò–ö–£ –ü–ï–†–ï–ë–û–†–ê –ö–õ–Æ–ß–ï–ô –î–õ–Ø –ú–ï–ú–û–í
# –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é cryptosud_analysis –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –º–µ–º–æ–≤
old_meme_call = '''        crypto_memes = await llm_client.chat_completion(
            user_message=meme_prompt,
            system_prompt="üòÇ –¢—ã –∫—Ä–∏–ø—Ç–æ–º–µ–º–µ—Ä! –î–æ–±–∞–≤—å —é–º–æ—Ä–∞ –∏ –º–µ–º–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∏–ø—Ç–æ—Å–ª–µ–Ω–≥! üöÄ",
            chat_history=[],
            model="deepseek/deepseek-r1-0528:free",
            max_tokens=500
        )'''

new_meme_call = '''        try:
            crypto_memes = await llm_client.chat_completion(
                user_message=meme_prompt,
                system_prompt="üòÇ –¢—ã –∫—Ä–∏–ø—Ç–æ–º–µ–º–µ—Ä! –î–æ–±–∞–≤—å —é–º–æ—Ä–∞ –∏ –º–µ–º–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π –∫—Ä–∏–ø—Ç–æ—Å–ª–µ–Ω–≥! üöÄ",
                chat_history=[],
                model="deepseek/deepseek-r1-0528:free",
                max_tokens=500
            )
        except Exception as e:
            logger.error(f"[–ö–†–ò–ü–¢–û–°–£–î] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–º–æ–≤: {e}")
            crypto_memes = "üòÇ –ú–µ–º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –±—ã—á—å–µ! üöÄ HODL –∏ –Ω–∞ –ª—É–Ω—É! üíéüôå"'''

content = content.replace(old_meme_call, new_meme_call)

# 4. –î–û–ë–ê–í–õ–Ø–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Æ –¶–ï–ù–´ –í –ê–ù–ê–õ–ò–ó –ì–†–ê–§–ò–ö–ê
old_chart_analysis = '''                if response.status == 200:
                    result = await response.json()
                    chart_analysis = result.get('choices', [{}])[0].get('message', {}).get('content', '')
                    logger.info(f"[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –ü–æ–ª—É—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {chart_analysis[:100]}...")
                    return chart_analysis'''

new_chart_analysis = '''                if response.status == 200:
                    result = await response.json()
                    chart_analysis = result.get('choices', [{}])[0].get('message', {}).get('content', '')
                    logger.info(f"[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –ü–æ–ª—É—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {chart_analysis[:100]}...")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                    chart_price = None
                    trading_pair = None
                    
                    # –ò—â–µ–º —Ü–µ–Ω—É –≤ –∞–Ω–∞–ª–∏–∑–µ (–ø–∞—Ç—Ç–µ—Ä–Ω—ã: $0.000021, $65432.10)
                    price_match = re.search(r'\\$([0-9]+\\.?[0-9]*)', chart_analysis)
                    if price_match:
                        try:
                            chart_price = float(price_match.group(1))
                        except:
                            pass
                    
                    # –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                    pair_match = re.search(r'([A-Z]+/[A-Z]+)', chart_analysis)
                    if pair_match:
                        trading_pair = pair_match.group(1)
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API
                    if chart_price and trading_pair:
                        validated_price, price_sources = await validate_price_from_apis(trading_pair, chart_price)
                        
                        if price_sources:
                            validation_info = "\\n\\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–ù–´:\\n"
                            for source, price in price_sources:
                                validation_info += f"‚Ä¢ {source}: ${price:.8f}\\n"
                            chart_analysis += validation_info
                    
                    return chart_analysis'''

content = content.replace(old_chart_analysis, new_chart_analysis)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('backend/api/telegram_polling.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: –ª–æ–≥–∏–∫–∞ –∫–ª—é—á–µ–π –¥–ª—è –º–µ–º–æ–≤ + –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω —á–µ—Ä–µ–∑ API!")