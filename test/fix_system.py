#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã IKAR
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å Flask -> FastAPI –º–∏–≥—Ä–∞—Ü–∏–µ–π
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def print_step(step, description):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —à–∞–≥–∞"""
    print(f"\n{'='*60}")
    print(f"üîß –®–ê–ì {step}: {description}")
    print(f"{'='*60}")

def backup_file(file_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ —Ñ–∞–π–ª–∞"""
    backup_path = f"{file_path}.backup"
    if Path(file_path).exists():
        shutil.copy2(file_path, backup_path)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_path}")
        return True
    return False

def fix_main_py():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ main.py - –∑–∞–º–µ–Ω–∞ Flask –Ω–∞ FastAPI"""
    print_step(1, "–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï MAIN.PY")
    
    main_path = Path("backend/main.py")
    if not main_path.exists():
        print("‚ùå –§–∞–π–ª backend/main.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_file(main_path)
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
    with open(main_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ Flask –∏–º–ø–æ—Ä—Ç—ã
    if 'from flask import' not in content:
        print("‚úÖ –§–∞–π–ª —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç FastAPI")
        return True
    
    # –ù–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è main.py
    new_content = '''"""
–û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è IKAR - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
from pathlib import Path
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, FileResponse
from config import Config
from core.collective_mind import initialize_collective_mind
from api.collective_api import collective_router
from api.memory_api import memory_router

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    env_path = Path(__file__).parent.parent / '.env'
    load_dotenv(env_path)
    logging.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env")
except Exception as e:
    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")

from config import API_CONFIG
from api.routes import router
from api.telegram import init_telegram_bot, admin_router as telegram_admin_router
from api.admin_api import admin_router
from api.admin_triggers_autoposts import router as triggers_autoposts_router
from api.admin_logs import router as logs_router
from api.bingx_test_routes import router as bingx_test_router
from api.telegram_voice import get_tts_engine, get_stt_engine  # –ù–æ–≤—ã–µ –º–æ–¥—É–ª–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from utils.logger import setup_logging
setup_logging()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FastAPI
app = FastAPI(
    title="Chatumba API",
    description="API –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ß–∞—Ç—É–º–±–æ–π",
    version="0.1.0"
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(router, prefix="/api")
app.include_router(admin_router, prefix="/api")
app.include_router(triggers_autoposts_router, prefix="/api")
app.include_router(logs_router, prefix="/api")
app.include_router(bingx_test_router, prefix="/api")
app.include_router(telegram_admin_router, prefix="/api")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—É–º –∏ —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
app.include_router(collective_router, prefix="/api")
app.include_router(memory_router, prefix="/api")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞ (–Ω–æ–≤–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
init_telegram_bot(app)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–∞–º–∏
try:
    from api.telegram_group_patch import apply_group_patches
    apply_group_patches()
    logging.info("‚úÖ –ü–∞—Ç—á–∏ –¥–ª—è –≥—Ä—É–ø–ø —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
except Exception as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ç—á–µ–π –¥–ª—è –≥—Ä—É–ø–ø: {e}")

# –ü–∞–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
static_dir = Path(__file__).parent.parent / "frontend" / "public"
app.mount("/", StaticFiles(directory=static_dir, html=True), name="static")

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
temp_dir = Path(__file__).parent.parent / "temp"
temp_dir.mkdir(exist_ok=True)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤
@app.get("/api/audio/{filename}")
async def get_audio(filename: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞—É–¥–∏–æ —Ñ–∞–π–ª –ø–æ –∏–º–µ–Ω–∏.
    """
    file_path = temp_dir / filename
    if not file_path.exists():
        return JSONResponse(
            status_code=404,
            content={"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        )
    
    return FileResponse(
        path=file_path,
        media_type="audio/mpeg",
        filename=filename
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.
    """
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ {request.url}: {exc}")
    return JSONResponse(
        status_code=500,
        content={"error": str(exc)}
    )

async def initialize_systems():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º"""
    config = Config()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞
    try:
        collective_mind = await initialize_collective_mind(config)
        logging.info("–ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—É–º —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        asyncio.create_task(collective_mind.start_sync_daemon())
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö OpenRouter
    from config import OPENROUTER_API_KEYS
    print(f"üîë –ù–∞–π–¥–µ–Ω–æ API –∫–ª—é—á–µ–π OpenRouter: {len(OPENROUTER_API_KEYS)}")
    for i, key in enumerate(OPENROUTER_API_KEYS, 1):
        key_suffix = key[-10:] if len(key) > 10 else key
        print(f"   –ö–ª—é—á {i}: ...{key_suffix}")
    
    if not OPENROUTER_API_KEYS:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: API –∫–ª—é—á–∏ OpenRouter –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        print("   –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ OPENROUTER_API_KEY, OPENROUTER_API_KEY2, –∏ —Ç.–¥. –≤ —Ñ–∞–π–ª .env")
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–∞—Ö BingX
    from config import BINGX_API_KEY, BINGX_SECRET_KEY
    if BINGX_API_KEY and BINGX_SECRET_KEY:
        print(f"üìà BingX API –Ω–∞—Å—Ç—Ä–æ–µ–Ω:")
        print(f"   API Key: ...{BINGX_API_KEY[-8:] if len(BINGX_API_KEY) > 8 else BINGX_API_KEY}")
        print(f"   Secret Key: ...{BINGX_SECRET_KEY[-8:] if len(BINGX_SECRET_KEY) > 8 else BINGX_SECRET_KEY}")
    else:
        print("‚ö†Ô∏è  BingX API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
        print("   –î–æ–±–∞–≤—å—Ç–µ BINGX_API_KEY –∏ BINGX_SECRET_KEY –≤ —Ñ–∞–π–ª .env –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")

@app.on_event("startup")
async def startup_event():
    """–°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await initialize_systems()

if __name__ == "__main__":
    import uvicorn
    config = Config()
    uvicorn.run(
        "main:app",
        host=config.HOST,
        port=config.PORT,
        reload=config.DEBUG
    )
'''
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    with open(main_path, 'w', encoding='utf-8') as f:
        f.write(new_content)
    
    print("‚úÖ –§–∞–π–ª backend/main.py —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    return True

def check_and_create_missing_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print_step(2, "–ü–†–û–í–ï–†–ö–ê –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –§–ê–ô–õ–û–í")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º config.py
    config_path = Path("backend/config.py")
    if not config_path.exists():
        print("‚ö†Ô∏è –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º...")
        config_content = '''"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è IKAR
"""

import os
from pathlib import Path

class Config:
    """–ö–ª–∞—Å—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.HOST = os.getenv("HOST", "0.0.0.0")
        self.PORT = int(os.getenv("PORT", 6666))
        self.DEBUG = os.getenv("DEBUG", "false").lower() == "true"
        
        # –ü—É—Ç–∏
        self.BASE_DIR = Path(__file__).parent.parent
        self.DATA_DIR = self.BASE_DIR / "data"
        self.TEMP_DIR = self.BASE_DIR / "temp"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.DATA_DIR.mkdir(exist_ok=True)
        self.TEMP_DIR.mkdir(exist_ok=True)
        
        # –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—ã–π —Ä–∞–∑—É–º
        self.COLLECTIVE_MIND_DB = self.DATA_DIR / "collective_mind.db"
        self.SYNC_INTERVAL = int(os.getenv("COLLECTIVE_SYNC_INTERVAL", "300"))
        self.MAX_MEMORIES_PER_SYNC = int(os.getenv("MAX_MEMORIES_PER_SYNC", "50"))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_CONFIG = {
    "host": os.getenv("HOST", "0.0.0.0"),
    "port": int(os.getenv("PORT", 6666)),
    "debug": os.getenv("DEBUG", "false").lower() == "true"
}

# OpenRouter API –∫–ª—é—á–∏
OPENROUTER_API_KEYS = []
for i in range(1, 11):  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ 10 –∫–ª—é—á–µ–π
    key_name = f"OPENROUTER_API_KEY{i if i > 1 else ''}"
    key_value = os.getenv(key_name)
    if key_value:
        OPENROUTER_API_KEYS.append(key_value)

# BingX API
BINGX_API_KEY = os.getenv("BINGX_API_KEY")
BINGX_SECRET_KEY = os.getenv("BINGX_SECRET_KEY")
'''
        
        with open(config_path, 'w', encoding='utf-8') as f:
            f.write(config_content)
        print("‚úÖ –§–∞–π–ª config.py —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚úÖ –§–∞–π–ª config.py –Ω–∞–π–¥–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º core/collective_mind.py
    collective_path = Path("backend/core/collective_mind.py")
    if not collective_path.exists():
        print("‚ö†Ô∏è –§–∞–π–ª collective_mind.py –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É...")
        collective_path.parent.mkdir(exist_ok=True)
        
        collective_content = '''"""
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞
"""

import asyncio
import logging

class CollectiveMind:
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞"""
    
    def __init__(self, config):
        self.config = config
        
    async def start_sync_daemon(self):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        logging.info("–î–µ–º–æ–Ω —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ –∑–∞–ø—É—â–µ–Ω")
        
async def initialize_collective_mind(config):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞"""
    return CollectiveMind(config)
'''
        
        with open(collective_path, 'w', encoding='utf-8') as f:
            f.write(collective_content)
        print("‚úÖ –§–∞–π–ª collective_mind.py —Å–æ–∑–¥–∞–Ω")
    else:
        print("‚úÖ –§–∞–π–ª collective_mind.py –Ω–∞–π–¥–µ–Ω")

def update_requirements():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements.txt"""
    print_step(3, "–û–ë–ù–û–í–õ–ï–ù–ò–ï REQUIREMENTS.TXT")
    
    req_path = Path("requirements.txt")
    if not req_path.exists():
        print("‚ùå –§–∞–π–ª requirements.txt –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    with open(req_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –£–¥–∞–ª—è–µ–º Flask –µ—Å–ª–∏ –µ—Å—Ç—å
    lines = content.split('\n')
    new_lines = []
    
    for line in lines:
        if line.strip() and not line.strip().startswith('#'):
            if 'flask' in line.lower() and 'flask' == line.strip().split('=')[0].split('>')[0].split('<')[0].lower():
                print(f"‚ùå –£–¥–∞–ª—è–µ–º Flask: {line}")
                continue
        new_lines.append(line)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
    required_packages = [
        'fastapi>=0.95.0',
        'uvicorn[standard]>=0.20.0',
        'pydantic>=2.0.0',
        'starlette>=0.27.0',
        'typing-extensions>=4.0.0'
    ]
    
    content_lower = content.lower()
    for package in required_packages:
        package_name = package.split('>=')[0].split('==')[0]
        if package_name not in content_lower:
            print(f"‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç: {package}")
            new_lines.append(package)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(req_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(new_lines))
    
    print("‚úÖ –§–∞–π–ª requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω")
    return True

def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_step(4, "–£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    
    try:
        result = subprocess.run([
            sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        return False

def test_imports():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print_step(5, "–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í")
    
    test_modules = ['fastapi', 'uvicorn', 'pydantic', 'starlette']
    
    for module in test_modules:
        try:
            __import__(module)
            print(f"‚úÖ {module} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            print(f"‚ùå {module} –ù–ï –ò–ú–ü–û–†–¢–ò–†–£–ï–¢–°–Ø: {e}")
            return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–ò–°–¢–ï–ú–´ IKAR")
    print("=" * 60)
    
    success = True
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏
    if not fix_main_py():
        success = False
    
    check_and_create_missing_files()
    
    if not update_requirements():
        success = False
    
    if not install_dependencies():
        success = False
    
    if not test_imports():
        success = False
    
    print_step("–§–ò–ù–ê–õ", "–†–ï–ó–£–õ–¨–¢–ê–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    
    if success:
        print("‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. sudo systemctl restart chatumba")
        print("2. sudo journalctl -u chatumba -f")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –£–î–ê–õ–ò–°–¨!")
        print("\nüîç –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ diagnose_system.py –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏")
        print("3. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é")

if __name__ == "__main__":
    main() 