#!/usr/bin/env python3
"""
üìä –ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê
–£–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –¥–ª—è –¥–µ–±–∞–≥–∞
"""

import os
import sys
from pathlib import Path
from datetime import datetime, timedelta
import re
import json
from typing import List, Dict, Any, Optional

def read_log_file(log_file: str = "internet_intelligence.log") -> List[str]:
    """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
    try:
        with open(log_file, 'r', encoding='utf-8') as f:
            return f.readlines()
    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
        return []

def parse_log_line(line: str) -> Optional[Dict[str, Any]]:
    """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞"""
    try:
        # –§–æ—Ä–º–∞—Ç: 2024-01-01 12:00:00 | INFO | internet_intelligence | function:123 | –°–æ–æ–±—â–µ–Ω–∏–µ
        pattern = r'(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}) \| (\w+) \| (\w+) \| ([^|]+) \| (.+)'
        match = re.match(pattern, line.strip())
        
        if match:
            timestamp, level, logger_name, location, message = match.groups()
            return {
                'timestamp': timestamp,
                'level': level,
                'logger_name': logger_name,
                'location': location,
                'message': message,
                'raw_line': line.strip()
            }
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏: {e}")
        return None

def filter_logs_by_type(logs: List[Dict[str, Any]], log_type: str = None) -> List[Dict[str, Any]]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É"""
    if not log_type:
        return logs
    
    filtered = []
    for log in logs:
        message = log.get('message', '')
        if log_type.lower() in message.lower():
            filtered.append(log)
    
    return filtered

def filter_logs_by_time(logs: List[Dict[str, Any]], hours: int = 24) -> List[Dict[str, Any]]:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    if hours <= 0:
        return logs
    
    cutoff_time = datetime.now() - timedelta(hours=hours)
    filtered = []
    
    for log in logs:
        try:
            log_time = datetime.strptime(log['timestamp'], '%Y-%m-%d %H:%M:%S')
            if log_time >= cutoff_time:
                filtered.append(log)
        except:
            continue
    
    return filtered

def analyze_logs(logs: List[Dict[str, Any]]) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤"""
    analysis = {
        'total_entries': len(logs),
        'error_count': 0,
        'warning_count': 0,
        'info_count': 0,
        'debug_count': 0,
        'operations': {},
        'errors': [],
        'performance': [],
        'search_requests': [],
        'telegram_integrations': []
    }
    
    for log in logs:
        level = log.get('level', '')
        message = log.get('message', '')
        
        # –ü–æ–¥—Å—á–µ—Ç —É—Ä–æ–≤–Ω–µ–π
        if level == 'ERROR':
            analysis['error_count'] += 1
            analysis['errors'].append(log)
        elif level == 'WARNING':
            analysis['warning_count'] += 1
        elif level == 'INFO':
            analysis['info_count'] += 1
        elif level == 'DEBUG':
            analysis['debug_count'] += 1
        
        # –ê–Ω–∞–ª–∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
        if 'üîç –ü–û–ò–°–ö–û–í–´–ô –ó–ê–ü–†–û–°' in message:
            analysis['search_requests'].append(log)
        elif 'üì± TELEGRAM –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø' in message:
            analysis['telegram_integrations'].append(log)
        elif '‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨' in message:
            analysis['performance'].append(log)
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
        for operation in ['–ü–û–ò–°–ö', '–ò–ó–í–õ–ï–ß–ï–ù–ò–ï', 'AI-–û–ë–†–ê–ë–û–¢–ö–ê', '–£–õ–£–ß–®–ï–ù–ò–ï', '–û–®–ò–ë–ö–ê']:
            if operation in message:
                analysis['operations'][operation] = analysis['operations'].get(operation, 0) + 1
    
    return analysis

def print_log_summary(analysis: Dict[str, Any]):
    """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –ª–æ–≥–æ–≤"""
    print("üìä –°–í–û–î–ö–ê –õ–û–ì–û–í –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê")
    print("=" * 60)
    print(f"üìà –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {analysis['total_entries']}")
    print(f"‚úÖ INFO: {analysis['info_count']}")
    print(f"‚ö†Ô∏è  WARNING: {analysis['warning_count']}")
    print(f"‚ùå ERROR: {analysis['error_count']}")
    print(f"üîß DEBUG: {analysis['debug_count']}")
    
    print(f"\nüîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {len(analysis['search_requests'])}")
    print(f"üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π: {len(analysis['telegram_integrations'])}")
    print(f"‚ö° –ó–∞–ø–∏—Å–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {len(analysis['performance'])}")
    
    if analysis['operations']:
        print(f"\nüìã –û–ü–ï–†–ê–¶–ò–ò:")
        for operation, count in analysis['operations'].items():
            print(f"   {operation}: {count}")
    
    if analysis['errors']:
        print(f"\n‚ùå –ü–û–°–õ–ï–î–ù–ò–ï –û–®–ò–ë–ö–ò:")
        for error in analysis['errors'][-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—à–∏–±–æ–∫
            print(f"   {error['timestamp']}: {error['message'][:100]}...")

def print_recent_logs(logs: List[Dict[str, Any]], count: int = 20):
    """–í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤"""
    print(f"\nüìù –ü–û–°–õ–ï–î–ù–ò–ï {count} –ó–ê–ü–ò–°–ï–ô:")
    print("=" * 60)
    
    for log in logs[-count:]:
        timestamp = log['timestamp']
        level = log['level']
        message = log['message']
        
        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —É—Ä–æ–≤–Ω–µ–π
        level_emoji = {
            'ERROR': '‚ùå',
            'WARNING': '‚ö†Ô∏è',
            'INFO': '‚ÑπÔ∏è',
            'DEBUG': 'üîß'
        }.get(level, 'üìù')
        
        print(f"{level_emoji} {timestamp} | {message}")

def print_search_requests(logs: List[Dict[str, Any]]):
    """–í—ã–≤–æ–¥ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print(f"\nüîç –ü–û–ò–°–ö–û–í–´–ï –ó–ê–ü–†–û–°–´:")
    print("=" * 60)
    
    for log in logs:
        message = log['message']
        if 'üîç –ü–û–ò–°–ö–û–í–´–ô –ó–ê–ü–†–û–°' in message:
            timestamp = log['timestamp']
            print(f"‚è∞ {timestamp}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
            lines = message.split('\n')
            for line in lines:
                if line.strip().startswith('   –ó–∞–ø—Ä–æ—Å:'):
                    query = line.replace('   –ó–∞–ø—Ä–æ—Å:', '').strip().strip("'")
                    print(f"   üîç {query}")
                elif line.strip().startswith('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:'):
                    user = line.replace('   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', '').strip()
                    print(f"   üë§ {user}")
                elif line.strip().startswith('   –ß–∞—Ç:'):
                    chat = line.replace('   –ß–∞—Ç:', '').strip()
                    print(f"   üí¨ {chat}")
            print()

def print_performance_logs(logs: List[Dict[str, Any]]):
    """–í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print(f"\n‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:")
    print("=" * 60)
    
    for log in logs:
        message = log['message']
        if '‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨' in message:
            timestamp = log['timestamp']
            print(f"‚è∞ {timestamp}")
            
            lines = message.split('\n')
            for line in lines:
                if line.strip().startswith('   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:'):
                    duration = line.replace('   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', '').strip()
                    print(f"   ‚è±Ô∏è  {duration}")
                elif line.strip().startswith('   '):
                    detail = line.strip()
                    print(f"   üìä {detail}")
            print()

def print_errors(logs: List[Dict[str, Any]], count: int = 10):
    """–í—ã–≤–æ–¥ –æ—à–∏–±–æ–∫"""
    print(f"\n‚ùå –ü–û–°–õ–ï–î–ù–ò–ï {count} –û–®–ò–ë–û–ö:")
    print("=" * 60)
    
    for log in logs[-count:]:
        timestamp = log['timestamp']
        message = log['message']
        location = log['location']
        
        print(f"‚è∞ {timestamp}")
        print(f"üìç {location}")
        print(f"‚ùå {message}")
        print()

def interactive_menu():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    while True:
        print("\nüéÆ –ú–ï–ù–Æ –ü–†–û–°–ú–û–¢–†–ê –õ–û–ì–û–í")
        print("=" * 40)
        print("1. üìä –û–±—â–∞—è —Å–≤–æ–¥–∫–∞")
        print("2. üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ (20)")
        print("3. üîç –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        print("4. ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        print("5. ‚ùå –û—à–∏–±–∫–∏")
        print("6. üîç –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É")
        print("7. ‚è∞ –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏")
        print("8. üìÅ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤")
        print("0. ‚ùå –í—ã—Ö–æ–¥")
        print("-" * 40)
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            logs = read_log_file()
            parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
            analysis = analyze_logs(parsed_logs)
            print_log_summary(analysis)
        elif choice == "2":
            logs = read_log_file()
            parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
            print_recent_logs(parsed_logs)
        elif choice == "3":
            logs = read_log_file()
            parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
            print_search_requests(parsed_logs)
        elif choice == "4":
            logs = read_log_file()
            parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
            print_performance_logs(parsed_logs)
        elif choice == "5":
            logs = read_log_file()
            parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
            errors = [log for log in parsed_logs if log.get('level') == 'ERROR']
            print_errors(errors)
        elif choice == "6":
            log_type = input("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–û–ò–°–ö, –û–®–ò–ë–ö–ê): ").strip()
            logs = read_log_file()
            parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
            filtered_logs = filter_logs_by_type(parsed_logs, log_type)
            print_recent_logs(filtered_logs, len(filtered_logs))
        elif choice == "7":
            try:
                hours = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ").strip())
                logs = read_log_file()
                parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
                filtered_logs = filter_logs_by_time(parsed_logs, hours)
                print_recent_logs(filtered_logs, len(filtered_logs))
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞")
        elif choice == "8":
            new_file = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤: ").strip()
            if os.path.exists(new_file):
                global current_log_file
                current_log_file = new_file
                print(f"‚úÖ –§–∞–π–ª –ª–æ–≥–æ–≤ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_file}")
            else:
                print("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
    log_file = "internet_intelligence.log"
    if not os.path.exists(log_file):
        print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ {log_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –±—ã–ª–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    file_size = os.path.getsize(log_file)
    file_mtime = datetime.fromtimestamp(os.path.getmtime(log_file))
    
    print(f"üìÅ –§–∞–π–ª: {log_file}")
    print(f"üìä –†–∞–∑–º–µ—Ä: {file_size:,} –±–∞–π—Ç")
    print(f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {file_mtime}")
    
    # –ë—ã—Å—Ç—Ä–∞—è —Å–≤–æ–¥–∫–∞
    logs = read_log_file(log_file)
    if logs:
        parsed_logs = [parse_log_line(line) for line in logs if parse_log_line(line)]
        analysis = analyze_logs(parsed_logs)
        print_log_summary(analysis)
        
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
        interactive_menu()
    else:
        print("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω")

if __name__ == "__main__":
    main() 