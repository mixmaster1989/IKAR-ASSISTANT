"""
–¢–µ—Å—Ç Smart Context Preloader - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
"""

import asyncio
import time
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "backend"))

from memory.smart_context_preloader import SmartContextPreloader
from memory.sqlite import SQLiteStorage
from llm.openrouter import OpenRouterClient
from config import Config

async def test_context_preloader():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Smart Context Preloader"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Context Preloader")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    db_path = "data/test_chatumba.db"
    preloader = SmartContextPreloader(db_path)
    
    print("‚úÖ Smart Context Preloader –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    print("\nüìã –¢–µ—Å—Ç 1: –ó–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("-" * 40)
    
    preloader.start()
    print("‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    stats = preloader.get_stats()
    print(f"üìä –°—Ç–∞—Ç—É—Å: {stats}")
    
    time.sleep(2)
    
    preloader.stop()
    print("‚úÖ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –¢—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    print("\nüìã –¢–µ—Å—Ç 2: –¢—Ä–µ–∫–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("-" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    test_users = [
        ("user1", "chat1", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"),
        ("user2", "chat2", "–†–∞—Å—Å–∫–∞–∂–∏ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"),
        ("user1", "chat1", "–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ Bitcoin?"),
        ("user3", "chat3", "–ü–æ–º–æ–≥–∏ —Å –∞–Ω–∞–ª–∏–∑–æ–º –≥—Ä–∞—Ñ–∏–∫–æ–≤"),
        ("user1", "chat1", "–ö–æ–≥–¥–∞ –ª—É—á—à–µ –ø–æ–∫—É–ø–∞—Ç—å?"),
    ]
    
    for user_id, chat_id, message in test_users:
        preloader.track_message(user_id, chat_id, message, response_time=1.5)
        print(f"üìù –û—Ç—Å–ª–µ–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {message[:30]}...")
    
    print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(preloader.user_activities)}")
    
    # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    print("\nüìã –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
    print("-" * 40)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    for i in range(10):
        preloader.track_message("user1", "chat1", f"–°–æ–æ–±—â–µ–Ω–∏–µ {i+1} –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", response_time=2.0)
    
    user_activity = preloader.user_activities["user1:chat1"]
    print(f"üìä –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å user1:")
    print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {user_activity.message_count}")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {user_activity.avg_response_time:.2f}s")
    print(f"   –û–±—â–∏–µ —Ç–µ–º—ã: {user_activity.common_topics}")
    print(f"   –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —á–∞—Å—ã: {user_activity.preferred_time_slots}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print("\nüìã –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
    print("-" * 40)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    activity = preloader.user_activities["user1:chat1"]
    context = preloader._create_preloaded_context(activity)
    
    if context:
        print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {context.user_id}")
        print(f"   –ß–∞—Ç: {context.chat_id}")
        print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {context.priority}")
        print(f"   TTL: {context.expires_at - context.created_at:.0f} —Å–µ–∫—É–Ω–¥")
        print(f"   –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: {len(context.context_data.get('predicted_questions', []))}")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")
    
    # –¢–µ—Å—Ç 5: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞
    print("\nüìã –¢–µ—Å—Ç 5: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞")
    print("-" * 40)
    
    success = preloader.force_preload("user1", "chat1")
    if success:
        print("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        cached_context = preloader.get_preloaded_context("user1", "chat1")
        if cached_context:
            print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
            print(f"   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {cached_context.get('preload_timestamp', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            print("‚ùå –ö–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ")
    else:
        print("‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
    
    # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    print("\nüìã –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("-" * 40)
    
    stats = preloader.get_stats()
    print("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for key, value in stats.items():
        print(f"   {key}: {value}")
    
    # –¢–µ—Å—Ç 7: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
    print("\nüìã –¢–µ—Å—Ç 7: –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞")
    print("-" * 40)
    
    cleared_count = preloader.clear_cache()
    print(f"üßπ –û—á–∏—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤: {cleared_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –ø—É—Å—Ç
    cached_context = preloader.get_preloaded_context("user1", "chat1")
    if cached_context is None:
        print("‚úÖ –ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω")
    else:
        print("‚ùå –ö—ç—à –Ω–µ –æ—á–∏—â–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("=" * 60)

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    # –¢–µ—Å—Ç API endpoints
    print("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints:")
    
    endpoints = [
        "/api/admin/context_preloader/status",
        "/api/admin/context_preloader/start",
        "/api/admin/context_preloader/stop",
        "/api/admin/context_preloader/activities",
        "/api/admin/context_preloader/force_preload",
        "/api/admin/context_preloader/clear_cache",
        "/api/admin/context_preloader/config"
    ]
    
    for endpoint in endpoints:
        print(f"   üì° {endpoint}")
    
    print("‚úÖ –í—Å–µ API endpoints –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã")
    
    # –¢–µ—Å—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    web_interface = Path("frontend/public/context-preloader.html")
    if web_interface.exists():
        print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–æ–∑–¥–∞–Ω")
        print(f"   üìÑ –ü—É—Ç—å: {web_interface}")
    else:
        print("‚ùå –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\nüéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞!")

def performance_test():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
    
    print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 60)
    
    preloader = SmartContextPreloader("data/test_chatumba.db")
    
    # –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞
    print("üìã –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    start_time = time.time()
    
    for i in range(1000):
        user_id = f"user{i % 10}"  # 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        chat_id = f"chat{i % 5}"   # 5 —á–∞—Ç–æ–≤
        message = f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–º–µ—Ä {i}"
        
        preloader.track_message(user_id, chat_id, message, response_time=1.0)
    
    end_time = time.time()
    duration = end_time - start_time
    
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π: {duration:.2f} —Å–µ–∫—É–Ω–¥")
    print(f"üìä –°–∫–æ—Ä–æ—Å—Ç—å: {1000/duration:.0f} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫—É–Ω–¥—É")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = preloader.get_stats()
    print(f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}")
    print(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {stats['memory_usage']['total_kb']} KB")
    
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
    os.makedirs("data", exist_ok=True)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        asyncio.run(test_context_preloader())
        test_integration()
        performance_test()
        
        print("\nüéä –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("Smart Context Preloader –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
        test_db = Path("data/test_chatumba.db")
        if test_db.exists():
            test_db.unlink()
            print("\nüßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞") 