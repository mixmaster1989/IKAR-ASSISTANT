import re

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª telegram_polling.py
with open('backend/api/telegram_polling.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback_query –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
old_update_handling = '''            for update in updates:
                if "message" in update:'''

new_update_handling = '''            for update in updates:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query (–Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫)
                if "callback_query" in update:
                    callback_query = update["callback_query"]
                    callback_data = callback_query.get("data", "")
                    chat_id = str(callback_query["message"]["chat"]["id"])
                    message_id = callback_query["message"]["message_id"]
                    
                    logger.info(f"[CALLBACK] –ü–æ–ª—É—á–µ–Ω callback: {callback_data} –≤ —á–∞—Ç–µ {chat_id}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ö–†–ò–ü–¢–û–°–£–î–ê
                    if callback_data.startswith("crypto_"):
                        await handle_crypto_callback(callback_query, callback_data, chat_id, message_id)
                    
                    continue
                
                if "message" in update:'''

content = content.replace(old_update_handling, new_update_handling)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ crypto callback'–æ–≤
callback_handler = '''
async def handle_crypto_callback(callback_query, callback_data, chat_id, message_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ö–†–ò–ü–¢–û–°–£–î–ê."""
    from api.telegram import send_telegram_message, llm_client
    
    try:
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        callback_id = callback_query["id"]
        answer_url = f"https://api.telegram.org/bot{TELEGRAM_CONFIG['token']}/answerCallbackQuery"
        
        import aiohttp
        async with aiohttp.ClientSession() as session:
            await session.post(answer_url, json={"callback_query_id": callback_id})
        
        # –ü–∞—Ä—Å–∏–º callback_data
        parts = callback_data.split("_")
        if len(parts) < 3:
            logger.error(f"[CALLBACK] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data: {callback_data}")
            return
        
        action = parts[1]  # yes –∏–ª–∏ no
        request_id = "_".join(parts[2:])  # –æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å ID
        
        logger.info(f"[CALLBACK] –î–µ–π—Å—Ç–≤–∏–µ: {action}, Request ID: {request_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –≤ pending_crypto_requests
        if request_id not in pending_crypto_requests:
            await send_telegram_message(chat_id, "‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", None)
            logger.warning(f"[CALLBACK] –ó–∞–ø—Ä–æ—Å {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ pending_crypto_requests")
            return
        
        request_data = pending_crypto_requests[request_id]
        
        if action == "yes":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª - –∑–∞–ø—É—Å–∫–∞–µ–º –ö–†–ò–ü–¢–û–°–£–î
            await send_telegram_message(chat_id, "‚úÖ –ó–∞–ø—É—Å–∫–∞—é –ö–†–ò–ü–¢–û–°–£–î! –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...", None)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            image_description = request_data['image_description']
            crypto_terms = request_data['crypto_terms']
            message = request_data['message']
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            temp_image_path = None
            photos = message.get("photo", [])
            if photos:
                photo = photos[-1]
                file_id = photo.get("file_id")
                if file_id:
                    from api.telegram import download_telegram_file
                    temp_image_path = await download_telegram_file(file_id)
            
            # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥—Ä–∞—Ñ–∏–∫–∞
            detailed_chart_analysis = None
            if temp_image_path:
                await send_telegram_message(chat_id, "üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é...", None)
                detailed_chart_analysis = await analyze_trading_chart(temp_image_path)
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    import os
                    os.remove(temp_image_path)
                except:
                    pass
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ö–†–ò–ü–¢–û–°–£–î
            try:
                await cryptosud_analysis(chat_id, image_description, crypto_terms, detailed_chart_analysis)
                logger.info(f"[CALLBACK] ‚úÖ –ö–†–ò–ü–¢–û–°–£–î —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {request_id}")
            except Exception as e:
                logger.error(f"[CALLBACK] ‚ùå –û—à–∏–±–∫–∞ –≤ –ö–†–ò–ü–¢–û–°–£–î–ï: {e}")
                await send_telegram_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ö–†–ò–ü–¢–û–°–£–î–ê: {e}", None)
        
        elif action == "no":
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è
            await send_telegram_message(chat_id, "‚ùå –ö–†–ò–ü–¢–û–°–£–î –æ—Ç–º–µ–Ω–µ–Ω. –†–µ—Å—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", None)
            logger.info(f"[CALLBACK] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –ö–†–ò–ü–¢–û–°–£–î–ê –¥–ª—è {request_id}")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ pending
        del pending_crypto_requests[request_id]
        logger.info(f"[CALLBACK] –ó–∞–ø—Ä–æ—Å {request_id} —É–¥–∞–ª–µ–Ω –∏–∑ pending")
        
    except Exception as e:
        logger.error(f"[CALLBACK] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await send_telegram_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", None)
'''

# –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏–∑–∞
insert_position = content.find('async def process_telegram_photo_with_crypto_detection(')
content = content[:insert_position] + callback_handler + '\n' + content[insert_position:]

# –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç TELEGRAM_CONFIG –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
if 'from config import TELEGRAM_CONFIG' not in content:
    import_position = content.find('from pathlib import Path')
    content = content[:import_position] + 'from config import TELEGRAM_CONFIG\n' + content[import_position:]

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('backend/api/telegram_polling.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ö–†–ò–ü–¢–û–°–£–î–ê!")