"""
–¢–µ—Å—Ç –¥–ª—è LazyMemory - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–º–µ–Ω—ã vector_store
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(str(Path(__file__).parent.parent / "backend"))

from memory.lazy_memory import LazyMemory, get_lazy_memory
from utils.component_manager import get_component_manager


def test_lazy_memory_basic():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç LazyMemory"""
    print("üß™ –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª LazyMemory")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        lazy_memory = LazyMemory()
        print("‚úÖ LazyMemory —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
        user_id = "test_user_123"
        chat_id = "test_chat_456"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        lazy_memory.add_message(user_id, chat_id, "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        lazy_memory.add_message(user_id, chat_id, "–Ø –∏–∑—É—á–∞—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        lazy_memory.add_message(user_id, chat_id, "Bitcoin —Å–µ–≥–æ–¥–Ω—è —Ä–∞—Å—Ç–µ—Ç")
        lazy_memory.add_message(user_id, chat_id, "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è")
        
        print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        results = lazy_memory.get_relevant_history(user_id, "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", limit=5)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã': –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        for i, result in enumerate(results):
            print(f"  {i+1}. {result['content'][:50]}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ø–æ Bitcoin
        results = lazy_memory.get_relevant_history(user_id, "Bitcoin", limit=3)
        print(f"‚úÖ –ü–æ–∏—Å–∫ –ø–æ 'Bitcoin': –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = lazy_memory.get_memory_stats(user_id)
        print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞–∑–æ–≤–æ–º —Ç–µ—Å—Ç–µ: {e}")
        return False


def test_lazy_memory_singleton():
    """–¢–µ—Å—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞ LazyMemory"""
    print("\nüß™ –¢–µ—Å—Ç 2: –°–∏–Ω–≥–ª—Ç–æ–Ω LazyMemory")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        instance1 = get_lazy_memory()
        instance2 = get_lazy_memory()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –æ–±—ä–µ–∫—Ç
        if instance1 is instance2:
            print("‚úÖ –°–∏–Ω–≥–ª—Ç–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print("‚ùå –°–∏–Ω–≥–ª—Ç–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞: {e}")
        return False


def test_component_manager_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ComponentManager"""
    print("\nüß™ –¢–µ—Å—Ç 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ComponentManager")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ComponentManager
        component_manager = get_component_manager()
        
        # –ü–æ–ª—É—á–∞–µ–º LazyMemory —á–µ—Ä–µ–∑ ComponentManager
        lazy_memory = component_manager.get_lazy_memory()
        print("‚úÖ LazyMemory –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ ComponentManager")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ get_vector_store –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LazyMemory
        vector_store = component_manager.get_vector_store()
        if hasattr(vector_store, 'get_relevant_history'):
            print("‚úÖ get_vector_store –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LazyMemory (–æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)")
            return True
        else:
            print("‚ùå get_vector_store –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç LazyMemory")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False


def test_memory_injector_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MemoryInjector"""
    print("\nüß™ –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å MemoryInjector")
    
    try:
        from core.memory_injector import get_memory_injector
        
        # –ü–æ–ª—É—á–∞–µ–º MemoryInjector
        memory_injector = get_memory_injector()
        print("‚úÖ MemoryInjector –ø–æ–ª—É—á–µ–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—ä–µ–∫—Ü–∏—é –ø–∞–º—è—Ç–∏
        user_id = "test_user_456"
        query = "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ LazyMemory
        lazy_memory = get_lazy_memory()
        lazy_memory.add_message(user_id, "chat", "–Ø –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏")
        lazy_memory.add_message(user_id, "chat", "Bitcoin –∏ Ethereum –ø–æ–ø—É–ª—è—Ä–Ω—ã")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –ø–∞–º—è—Ç–∏
        memories = asyncio.run(memory_injector.select_relevant_memories(
            query, "", user_id, max_memories=5
        ))
        
        print(f"‚úÖ MemoryInjector –Ω–∞—à–µ–ª {len(memories)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ MemoryInjector: {e}")
        return False


def test_api_routes_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å API routes"""
    print("\nüß™ –¢–µ—Å—Ç 5: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å API routes")
    
    try:
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É API routes
        from memory.lazy_memory import get_lazy_memory
        
        lazy_memory = get_lazy_memory()
        user_id = "test_user_789"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        lazy_memory.add_message(user_id, "chat", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?")
        lazy_memory.add_message(user_id, "chat", "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∫–∞–∫ –≤ routes.py
        memory_query = "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"
        memories = lazy_memory.get_relevant_history(user_id, memory_query, limit=3)
        
        print(f"‚úÖ API routes –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {len(memories)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
        if memories and 'content' in memories[0]:
            print("‚úÖ –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π")
            return True
        else:
            print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ API routes: {e}")
        return False


def cleanup_test_data():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        import os
        if os.path.exists("chatumba.db"):
            os.remove("chatumba.db")
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à LazyMemory
        lazy_memory = get_lazy_memory()
        lazy_memory.cache.clear()
        print("‚úÖ –ö—ç—à LazyMemory –æ—á–∏—â–µ–Ω")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í LazyMemory")
    print("=" * 50)
    
    tests = [
        test_lazy_memory_basic,
        test_lazy_memory_singleton,
        test_component_manager_integration,
        test_memory_injector_integration,
        test_api_routes_integration
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test.__name__}: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! LazyMemory —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
        return False


if __name__ == "__main__":
    success = main()
    cleanup_test_data()
    
    if success:
        print("\n‚úÖ LazyMemory –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("üîÑ –ú–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –º–µ—Ä—Ç–≤—ã–π –∫–æ–¥ vector_store")
    else:
        print("\n‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å LazyMemory. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º vector_store")
    
    sys.exit(0 if success else 1) 