import re

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('backend/api/telegram_polling.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é fetch_crypto_news
old_function = '''async def fetch_crypto_news(crypto_terms):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º."""
    import aiohttp
    import json
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        news_data = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS –∏–ª–∏ API
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ CoinGecko trending
            try:
                async with session.get('https://api.coingecko.com/api/v3/search/trending', timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        trending = data.get('coins', [])
                        for coin in trending[:5]:  # –¢–æ–ø 5 —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö
                            coin_data = coin.get('item', {})
                            news_data.append(f"üìà Trending: {coin_data.get('name', 'Unknown')} ({coin_data.get('symbol', 'N/A')})")
            except:
                pass
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            try:
                async with session.get('https://api.coingecko.com/api/v3/global', timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        global_data = data.get('data', {})
                        market_cap = global_data.get('total_market_cap', {}).get('usd', 0)
                        btc_dominance = global_data.get('market_cap_percentage', {}).get('btc', 0)
                        news_data.append(f"üí∞ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap:,.0f}")
                        news_data.append(f"‚Çø –î–æ–º–∏–Ω–∞—Ü–∏—è Bitcoin: {btc_dominance:.1f}%")
            except:
                pass
        
        if not news_data:
            news_data = ["üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
        
        return "\\n".join(news_data)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return "üìä –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ"'''

new_function = '''async def fetch_crypto_news(crypto_terms):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Ç–µ—Ä–º–∏–Ω–∞–º."""
    import aiohttp
    import json
    
    logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤: {crypto_terms[:5]}")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        news_data = []
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS –∏–ª–∏ API
        async with aiohttp.ClientSession() as session:
            # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ CoinGecko trending
            try:
                logger.info("[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã —Å CoinGecko...")
                async with session.get('https://api.coingecko.com/api/v3/search/trending', timeout=10) as response:
                    logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] Trending API —Å—Ç–∞—Ç—É—Å: {response.status}")
                    if response.status == 200:
                        data = await response.json()
                        trending = data.get('coins', [])
                        logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ü–æ–ª—É—á–µ–Ω–æ {len(trending)} —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç")
                        for coin in trending[:5]:  # –¢–æ–ø 5 —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö
                            coin_data = coin.get('item', {})
                            coin_name = coin_data.get('name', 'Unknown')
                            coin_symbol = coin_data.get('symbol', 'N/A')
                            news_data.append(f"üìà Trending: {coin_name} ({coin_symbol})")
                            logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –î–æ–±–∞–≤–ª–µ–Ω–∞ –º–æ–Ω–µ—Ç–∞: {coin_name} ({coin_symbol})")
                    else:
                        logger.warning(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] Trending API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
            except Exception as e:
                logger.error(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –º–æ–Ω–µ—Ç: {e}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—ã–Ω–∫–µ
            try:
                logger.info("[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä—ã–Ω–∫–∞...")
                async with session.get('https://api.coingecko.com/api/v3/global', timeout=10) as response:
                    logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] Global API —Å—Ç–∞—Ç—É—Å: {response.status}")
                    if response.status == 200:
                        data = await response.json()
                        global_data = data.get('data', {})
                        market_cap = global_data.get('total_market_cap', {}).get('usd', 0)
                        btc_dominance = global_data.get('market_cap_percentage', {}).get('btc', 0)
                        news_data.append(f"üí∞ –û–±—â–∞—è –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap:,.0f}")
                        news_data.append(f"‚Çø –î–æ–º–∏–Ω–∞—Ü–∏—è Bitcoin: {btc_dominance:.1f}%")
                        logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${market_cap:,.0f}, BTC –¥–æ–º–∏–Ω–∞—Ü–∏—è: {btc_dominance:.1f}%")
                    else:
                        logger.warning(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] Global API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
            except Exception as e:
                logger.error(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        if not news_data:
            news_data = ["üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"]
            logger.warning("[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
        
        result = "\\n".join(news_data)
        logger.info(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ({len(news_data)} —Å—Ç—Ä–æ–∫): {result[:100]}...")
        return result
        
    except Exception as e:
        logger.error(f"[–ö–†–ò–ü–¢–û–ù–û–í–û–°–¢–ò] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return "üìä –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ"'''

# –ó–∞–º–µ–Ω—è–µ–º
content = content.replace(old_function, new_function)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('backend/api/telegram_polling.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("–î–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–Ω–æ–≤–æ—Å—Ç–µ–π!")