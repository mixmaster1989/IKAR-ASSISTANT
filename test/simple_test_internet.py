#!/usr/bin/env python3
"""
üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê
–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "backend"))

async def test_basic_functionality():
    """–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("üß™ –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê")
    print("=" * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç
        print("üì¶ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã...")
        
        try:
            from internet_intelligence_system import InternetIntelligenceSystem
            print("‚úÖ InternetIntelligenceSystem –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ InternetIntelligenceSystem: {e}")
            return False
        
        try:
            from ikar_internet_integration import IKARInternetIntegration
            print("‚úÖ IKARInternetIntegration –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ IKARInternetIntegration: {e}")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞
        print("\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫...")
        system = InternetIntelligenceSystem()
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
        query = "–Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
        print(f"–ü–æ–∏—Å–∫: '{query}'")
        
        results = await system.search_internet(query, max_total_results=3)
        
        if results:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for i, result in enumerate(results[:2], 1):
                print(f"  {i}. {result.title}")
                print(f"     URL: {result.url}")
                print(f"     –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source}")
                print()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            print("üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
            results_with_content = await system.extract_content(results[:1])
            
            if results_with_content and results_with_content[0].content:
                print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑–≤–ª–µ—á–µ–Ω ({len(results_with_content[0].content)} —Å–∏–º–≤–æ–ª–æ–≤)")
            else:
                print("‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É
            print("üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º AI –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            processed_info = await system.process_with_ai(query, results_with_content)
            
            print(f"‚úÖ AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {processed_info.confidence_score:.2f}")
            print(f"   –ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {len(processed_info.key_points)}")
            print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processed_info.processing_time:.2f}—Å")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print(f"\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢:")
            print(processed_info.ai_summary[:200] + "...")
            
        else:
            print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        await system.close()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        print("\nüîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é...")
        integration = IKARInternetIntegration()
        
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        test_queries = [
            ("–ö–∞–∫ –¥–µ–ª–∞?", False),
            ("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏", True),
            ("–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç", False)
        ]
        
        for query, expected in test_queries:
            needs_search, search_query, confidence = integration.needs_internet_search(query)
            status = "‚úÖ" if needs_search == expected else "‚ùå"
            print(f"{status} '{query}' -> –ù—É–∂–µ–Ω –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {needs_search} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
        
        await integration.close()
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
        import gc
        gc.collect()
        
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_enhancement():
    """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤"""
    print("\nüöÄ –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ò–Ø –û–¢–í–ï–¢–û–í")
    print("=" * 40)
    
    try:
        from integrate_with_ikar import enhance_ikar_message
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        test_cases = [
            {
                "query": "–ö–∞–∫ –¥–µ–ª–∞?",
                "response": "–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ!",
                "description": "–û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
            },
            {
                "query": "–ö–∞–∫–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?",
                "response": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è.",
                "description": "–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π"
            }
        ]
        
        for case in test_cases:
            print(f"\nüìù –¢–µ—Å—Ç: {case['description']}")
            print(f"–ó–∞–ø—Ä–æ—Å: '{case['query']}'")
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{case['response']}'")
            
            enhanced = await enhance_ikar_message(case['query'], case['response'], "test_user")
            
            improvement = len(enhanced) / len(case['response'])
            print(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç ({improvement:.2f}x):")
            print(f"'{enhanced[:150]}{'...' if len(enhanced) > 150 else ''}'")
        
        print("\n‚úÖ –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ —É–ª—É—á—à–µ–Ω–∏—è: {e}")
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ó–ê–ü–£–°–ö –ü–†–û–°–¢–û–ì–û –¢–ï–°–¢–ê –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    basic_success = await test_basic_functionality()
    
    if basic_success:
        # –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
        enhancement_success = await test_enhancement()
        
        if enhancement_success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("\nüìã –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
            print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ IKAR: python run_ikar_with_internet.py")
            print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:6666/internet-intelligence.html")
            print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ Telegram –∏–ª–∏ —á–µ—Ä–µ–∑ API")
        else:
            print("\n‚ö†Ô∏è  –¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    else:
        print("\n‚ùå –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_internet_minimal.txt")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 