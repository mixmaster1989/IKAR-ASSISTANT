#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_weather_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã"""
    print("üå§Ô∏è –¢–ï–°–¢ –£–õ–£–ß–®–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê –ü–û–ì–û–î–´")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
        from internet_intelligence_system import InternetIntelligenceSystem
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
        system = InternetIntelligenceSystem()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —à–∞—Ö—Ç–∞—Ö?",
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –º–æ—Å–∫–≤–µ",
            "–ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞ –≤ —Å–ø–±",
            "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ —Ä–æ—Å—Ç–æ–≤–µ –Ω–∞ –¥–æ–Ω—É"
        ]
        
        for query in test_queries:
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: '{query}'")
            print("-" * 40)
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
                results = await system.search_internet(query, max_total_results=10)
                
                if results:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                    
                    for i, result in enumerate(results[:5], 1):
                        print(f"\n{i}. {result.title}")
                        print(f"   URL: {result.url}")
                        print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {result.source}")
                        print(f"   –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.relevance_score:.2f}")
                        print(f"   –°–Ω–∏–ø–ø–µ—Ç: {result.snippet[:100]}...")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
                        if result.relevance_score < 0.3:
                            print(f"   ‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å!")
                        elif result.relevance_score > 0.7:
                            print(f"   ‚úÖ –í—ã—Å–æ–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å!")
                else:
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        print(f"\nüèôÔ∏è –¢–ï–°–¢ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ì–û–†–û–î–ê")
        print("-" * 40)
        
        test_city_queries = [
            "–ø–æ–≥–æ–¥–∞ –≤ —à–∞—Ö—Ç–∞—Ö",
            "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Å–∫–≤–∞",
            "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ —Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
            "–ø–æ–≥–æ–¥–∞ —Ä–æ—Å—Ç–æ–≤ –Ω–∞ –¥–æ–Ω—É"
        ]
        
        for query in test_city_queries:
            city = system._extract_city_from_query(query)
            print(f"–ó–∞–ø—Ä–æ—Å: '{query}' -> –ì–æ—Ä–æ–¥: '{city}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        print(f"\nüéØ –¢–ï–°–¢ –ü–†–û–í–ï–†–ö–ò –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò")
        print("-" * 40)
        
        test_relevance_cases = [
            ("–ü–æ–≥–æ–¥–∞ –≤ –®–∞—Ö—Ç–∞—Ö —Å–µ–≥–æ–¥–Ω—è", "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ —à–∞—Ö—Ç–∞—Ö", True),
            ("Breakdown of Code analysis", "–∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ —à–∞—Ö—Ç–∞—Ö", False),
            ("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –ú–æ—Å–∫–≤–µ +15 –≥—Ä–∞–¥—É—Å–æ–≤", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Å–∫–≤–∞", True),
            ("GitHub API documentation", "—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –º–æ—Å–∫–≤–∞", False),
        ]
        
        for title, query, expected in test_relevance_cases:
            is_relevant = system._is_result_relevant(title, "", query)
            relevance_score = system._calculate_relevance(title, "", query)
            status = "‚úÖ" if is_relevant == expected else "‚ùå"
            print(f"{status} '{title}' –¥–ª—è '{query}': —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å={is_relevant} (–æ–∂–∏–¥–∞–ª–æ—Å—å {expected}), —Å–∫–æ—Ä={relevance_score:.2f}")
        
        await system.close()
        print(f"\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_weather_search()) 