#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å DeepAI API
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
sys.path.append(str(Path(__file__).parent / "backend"))

async def test_deepai_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å DeepAI API"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° DEEPAI")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    api_key = os.environ.get("DEEPAI_API_KEY", "")
    if not api_key:
        print("‚ùå DEEPAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –î–æ–±–∞–≤—å—Ç–µ DEEPAI_API_KEY=your_key –≤ —Ñ–∞–π–ª .env")
        return False
    
    print(f"‚úÖ API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω: ...{api_key[-8:] if len(api_key) > 8 else api_key}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        from vision.image_generator import image_generator, get_available_models
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        models = get_available_models()
        for model_id, model_info in models.items():
            print(f"   ‚Ä¢ {model_id}: {model_info['name']} - {model_info['description']}")
        
        print(f"\nüé® –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        print("   –ü—Ä–æ–º–ø—Ç: 'a beautiful sunset over the ocean'")
        print("   –ú–æ–¥–µ–ª—å: text2img")
        print("   –†–∞–∑–º–µ—Ä: 512x512")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        result = await image_generator(
            prompt="a beautiful sunset over the ocean",
            model="text2img",
            width=512,
            height=512,
            timeout=300
        )
        
        if result:
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
            print(f"   –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {len(result)} bytes")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            test_image_path = Path("temp") / "test_deepai_image.png"
            test_image_path.parent.mkdir(exist_ok=True)
            
            with open(test_image_path, "wb") as f:
                f.write(result)
            
            print(f"   –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {test_image_path}")
            print(f"   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
            
            return True
        else:
            print("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            return False
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_translation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    print("\nüåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ï–†–ï–í–û–î–ê –ü–†–û–ú–ü–¢–û–í")
    print("=" * 40)
    
    try:
        from vision.image_generator import translate_prompt_to_english
        
        test_prompts = [
            "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –æ–∫–µ–∞–Ω–æ–º",
            "–∫–æ—Ç —Å–∏–¥–∏—Ç –Ω–∞ –∫—Ä—ã—à–µ –¥–æ–º–∞",
            "–∫–∏–±–µ—Ä–ø–∞–Ω–∫ –≥–æ—Ä–æ–¥ —Å –Ω–µ–æ–Ω–æ–≤—ã–º–∏ –æ–≥–Ω—è–º–∏",
            "a beautiful sunset over the ocean"  # —É–∂–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        ]
        
        for prompt in test_prompts:
            print(f"\nüìù –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{prompt}'")
            translated = await translate_prompt_to_english(prompt)
            print(f"üîÑ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: '{translated}'")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return False

async def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã"""
    
    print("\nüîå –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –≠–ù–î–ü–û–ò–ù–¢–û–í")
    print("=" * 40)
    
    try:
        import aiohttp
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –º–æ–¥–µ–ª–µ–π
        async with aiohttp.ClientSession() as session:
            async with session.get("http://localhost:6666/api/image/models") as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ GET /api/image/models - {len(data.get('models', []))} –º–æ–¥–µ–ª–µ–π")
                else:
                    print(f"‚ùå GET /api/image/models - —Å—Ç–∞—Ç—É—Å {response.status}")
                    return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í DEEPAI –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    test1_result = await test_deepai_integration()
    
    # –¢–µ—Å—Ç 2: –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–æ–≤
    test2_result = await test_translation()
    
    # –¢–µ—Å—Ç 3: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    try:
        test3_result = await test_api_endpoints()
    except:
        print("\n‚ö†Ô∏è  API —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
        test3_result = True
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"   –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ' if test1_result else '‚ùå'}")
    print(f"   –ü–µ—Ä–µ–≤–æ–¥ –ø—Ä–æ–º–ø—Ç–æ–≤: {'‚úÖ' if test2_result else '‚ùå'}")
    print(f"   API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: {'‚úÖ' if test3_result else '‚ùå'}")
    
    overall_result = test1_result and test2_result and test3_result
    
    if overall_result:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("   DeepAI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("\n‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏")
    
    return overall_result

if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1) 