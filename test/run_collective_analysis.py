#!/usr/bin/env python3
"""
üöÄ –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ IKAR
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
"""

import asyncio
import sys
import subprocess
from pathlib import Path
import argparse
from datetime import datetime, timedelta

def print_banner():
    """–í—ã–≤–æ–¥ –±–∞–Ω–Ω–µ—Ä–∞"""
    print("üß¨" + "="*60)
    print("üß¨ IKAR COLLECTIVE MIND ANALYSIS TOOLS")
    print("üß¨" + "="*60)
    print()

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'fastapi', 'uvicorn', 'pandas', 'matplotlib', 
        'seaborn', 'aiohttp', 'sqlite3'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'sqlite3':
                import sqlite3
            else:
                __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: pip install " + " ".join(missing_packages))
        return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    db_path = Path("data/collective_mind.db")
    
    if not db_path.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        return False
    
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
    return True

async def run_comprehensive_analysis():
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üìä –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        from collective_agents_analyzer import CollectiveAgentsAnalyzer
        
        analyzer = CollectiveAgentsAnalyzer()
        analyzer._init_database()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = await analyzer.generate_comprehensive_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path("reports/comprehensive_collective_report.txt")
        report_file.parent.mkdir(exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        await analyzer.generate_visual_report()
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        await analyzer.export_agent_data()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

async def run_live_monitor():
    """–ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
    print("üîç –ó–∞–ø—É—Å–∫ –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞...")
    
    try:
        from collective_monitor import CollectiveMonitor
        
        monitor = CollectiveMonitor()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∂–∏–≤–æ–π –æ—Ç—á–µ—Ç
        report = await monitor.generate_live_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path("reports/live_collective_report.txt")
        report_file.parent.mkdir(exist_ok=True)
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"üìä –ñ–∏–≤–æ–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä
        print("üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)...")
        monitor.run_terminal_monitor()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞: {e}")
        return False

def run_web_dashboard():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞"""
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        process = subprocess.Popen([
            sys.executable, "collective_web_dashboard.py"
        ])
        
        print("üåê –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω: http://localhost:8080")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            process.wait()
        except KeyboardInterrupt:
            process.terminate()
            print("\nüõë –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞: {e}")
        return False

def show_quick_report():
    """–ü–æ–∫–∞–∑–∞—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç"""
    print("üìã –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–º—É —Ä–∞–∑—É–º—É")
    print("-" * 50)
    
    try:
        import sqlite3
        from datetime import datetime
        
        db_path = Path("data/collective_mind.db")
        
        if not db_path.exists():
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(DISTINCT agent_id) FROM collective_memories")
        total_agents = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(*) FROM collective_memories")
        total_memories = cursor.fetchone()[0] or 0
        
        cursor.execute("SELECT COUNT(*) FROM evolution_events")
        total_evolution = cursor.fetchone()[0] or 0
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        day_ago = (datetime.now() - timedelta(days=1)).timestamp()
        cursor.execute("""
            SELECT COUNT(DISTINCT agent_id) 
            FROM collective_memories 
            WHERE timestamp > ?
        """, (day_ago,))
        active_agents = cursor.fetchone()[0] or 0
        
        # –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤
        cursor.execute("""
            SELECT agent_id, COUNT(*) as count
            FROM collective_memories
            GROUP BY agent_id
            ORDER BY count DESC
            LIMIT 3
        """)
        top_agents = cursor.fetchall()
        
        conn.close()
        
        print(f"ü§ñ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {total_agents}")
        print(f"üß† –û–±—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {total_memories}")
        print(f"üîÑ –°–æ–±—ã—Ç–∏–π —ç–≤–æ–ª—é—Ü–∏–∏: {total_evolution}")
        print(f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: {active_agents}")
        print()
        
        print("üèÜ –¢–æ–ø-3 –∞–≥–µ–Ω—Ç–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
        for i, (agent_id, count) in enumerate(top_agents, 1):
            print(f"  {i}. {agent_id[:16]}... - {count} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print_banner()
    
    parser = argparse.ArgumentParser(description='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ IKAR')
    parser.add_argument('--mode', choices=['comprehensive', 'live', 'web', 'quick'], 
                       default='quick', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--check-only', action='store_true', 
                       help='–¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_dependencies():
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not check_database():
        return
    
    if args.check_only:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return
    
    # –ó–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if args.mode == 'comprehensive':
        print("üìä –†–µ–∂–∏–º: –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        success = await run_comprehensive_analysis()
        if success:
            print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    
    elif args.mode == 'live':
        print("üîç –†–µ–∂–∏–º: –ñ–∏–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä")
        success = await run_live_monitor()
        if success:
            print("‚úÖ –ñ–∏–≤–æ–π –º–æ–Ω–∏—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∂–∏–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞")
    
    elif args.mode == 'web':
        print("üåê –†–µ–∂–∏–º: –í–µ–±-–¥–∞—à–±–æ—Ä–¥")
        success = run_web_dashboard()
        if success:
            print("‚úÖ –í–µ–±-–¥–∞—à–±–æ—Ä–¥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–¥–∞—à–±–æ—Ä–¥–∞")
    
    elif args.mode == 'quick':
        print("üìã –†–µ–∂–∏–º: –ë—ã—Å—Ç—Ä—ã–π –æ—Ç—á–µ—Ç")
        show_quick_report()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 