#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ß–∞—Ç—É–º–±–µ.
"""

import asyncio
import sys
import os
import re
import json

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

async def test_parse_and_generate_image():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    
    # –ú–æ–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é parse_and_generate_image
    async def mock_parse_and_generate_image(response_text: str, chat_id: str):
        """–ú–æ–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é parse_and_generate_image."""
        print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç: {response_text}")
        
        # –ò—â–µ–º JSON —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º IMAGE!
        image_pattern = r'IMAGE!\s*(\{[^}]+\})'
        match = re.search(image_pattern, response_text, re.IGNORECASE)
        
        if not match:
            print("‚ùå JSON —Å IMAGE! –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return response_text
            
        json_str = match.group(1)
        
        try:
            image_data = json.loads(json_str)
            description = image_data.get("description", "")
            
            if not description:
                print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                return re.sub(image_pattern, "", response_text, flags=re.IGNORECASE).strip()
            
            print(f"üé® –ù–∞–π–¥–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {description}")
            print(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ —á–∞—Ç: {chat_id}")
            print("üñºÔ∏è [–ú–û–ö–ê–ï–ú] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
            # –£–¥–∞–ª—è–µ–º JSON –∏–∑ —Ç–µ–∫—Å—Ç–∞
            cleaned_text = re.sub(image_pattern, "", response_text, flags=re.IGNORECASE).strip()
            print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {cleaned_text}")
            return cleaned_text
            
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return response_text
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        {
            "name": "–ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "response": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞? IMAGE!{\"description\": \"–∫–æ—Ç —Å–∏–¥–∏—Ç –Ω–∞ –∫—Ä—ã—à–µ –ø–æ–¥ –¥–æ–∂–¥–µ–º\"}",
            "expected_contains": "–∫–æ—Ç —Å–∏–¥–∏—Ç –Ω–∞ –∫—Ä—ã—à–µ –ø–æ–¥ –¥–æ–∂–¥–µ–º"
        },
        {
            "name": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π",
            "response": "–ñ–∏–∑–Ω—å —Å–ª–æ–∂–Ω–∞, –¥—Ä—É–≥ –º–æ–π... IMAGE!{\"description\": \"–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π, —Ç–µ–º–Ω—ã–µ —Ç–æ–Ω–∞\"} –ù–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–¥—Ç–∏.",
            "expected_contains": "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π"
        },
        {
            "name": "–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "response": "–ü—Ä–æ—Å—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫.",
            "expected_contains": None
        },
        {
            "name": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π JSON",
            "response": "–ü—Ä–∏–≤–µ—Ç! IMAGE!{\"description\": \"broken json} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π",
            "expected_contains": None
        }
    ]
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")
    
    for i, test_case in enumerate(test_cases, 1):
        print(f"üìã –¢–µ—Å—Ç {i}: {test_case['name']}")
        print(f"üìù –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: {test_case['response']}")
        
        result = await mock_parse_and_generate_image(test_case['response'], f"test_chat_{i}")
        
        if test_case['expected_contains']:
            if test_case['expected_contains'] in test_case['response']:
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            else:
                print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        else:
            if result == test_case['response']:
                print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω - –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–∫–∞–∫ –æ–∂–∏–¥–∞–ª–æ—Å—å)")
            else:
                print("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω - –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞")
        
        print("‚îÄ" * 50)
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

async def test_prompt_updates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã."""
    
    print("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –ø—Ä–æ–º–ø—Ç–∞—Ö –µ—Å—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    try:
        with open("backend/admin_prompts.json", "r", encoding="utf-8") as f:
            prompts = json.load(f)
        
        image_instruction_count = 0
        for prompt_name, prompt_data in prompts.items():
            system_prompt = prompt_data.get("system_prompt", "")
            if "–ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô" in system_prompt and "IMAGE!" in system_prompt:
                image_instruction_count += 1
                print(f"‚úÖ {prompt_name}: —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        
        print(f"\nüìä –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏: {image_instruction_count}")
        
        if image_instruction_count > 0:
            print("üé® –ü—Ä–æ–º–ø—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        else:
            print("‚ùå –ü—Ä–æ–º–ø—Ç—ã –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Ç–∏–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ß–∞—Ç—É–º–±–µ")
    print("=" * 60)
    
    await test_parse_and_generate_image()
    print("\n" + "=" * 60)
    await test_prompt_updates()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main()) 