#!/usr/bin/env python3
"""
–ñ–∏–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API BingX –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.
–ó–∞–ø—É—Å–∫–∞–π—Ç–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API.
"""

import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

async def test_bingx_live():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É API BingX –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏."""
    print("üöÄ –ñ–∏–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API BingX")
    print("=" * 50)
    
    try:
        from utils.import_helper import get_bingx_client, get_crypto_integration
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        bingx_client = get_bingx_client()
        crypto_integration = get_crypto_integration()
        
        if not bingx_client:
            print("‚ùå BingX –∫–ª–∏–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
        
        print("‚úÖ BingX –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        # –¢–µ—Å—Ç 1: –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞
        print("\nüìÖ –¢–µ—Å—Ç 1: –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞ BingX")
        try:
            server_time = bingx_client.get_server_time()
            print(f"‚úÖ –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {server_time}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        
        # –¢–µ—Å—Ç 2: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC
        print("\nüìä –¢–µ—Å—Ç 2: –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BTC-USDT")
        try:
            ticker = bingx_client.get_ticker_24hr("BTC-USDT")
            if ticker and isinstance(ticker, dict):
                price = ticker.get('lastPrice', 'N/A')
                change = ticker.get('priceChangePercent', 'N/A')
                volume = ticker.get('volume', 'N/A')
                print(f"‚úÖ BTC-USDT: ${price} ({change}%) | –û–±—ä–µ–º: {volume}")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {ticker}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ä–∞: {e}")
        
        # –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
        print("\nüéØ –¢–µ—Å—Ç 3: –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ä—ã–Ω–∫–∞")
        try:
            sentiment = bingx_client.analyze_market_sentiment("BTC-USDT", "1h")
            if sentiment and 'sentiment' in sentiment:
                print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏—è BTC-USDT: {sentiment['sentiment']}")
                print(f"   –¢—Ä–µ–Ω–¥: {sentiment.get('trend', 'N/A')}")
                print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã: {sentiment.get('price_change_24h', 'N/A')}%")
            else:
                print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {sentiment}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: {e}")
        
        # –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫—Ä–∏–ø—Ç–æ—Å—É–¥–æ–º
        print("\n‚öñÔ∏è –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫—Ä–∏–ø—Ç–æ—Å—É–¥–æ–º")
        if crypto_integration:
            try:
                sud_data = crypto_integration.get_crypto_sud_data(['BTC-USDT', 'ETH-USDT'])
                if 'symbols' in sud_data:
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫—Ä–∏–ø—Ç–æ—Å—É–¥–∞ –ø–æ–ª—É—á–µ–Ω—ã: {len(sud_data['symbols'])} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ä—ã
                    trending_pairs = sud_data.get('trending_pairs', [])
                    if trending_pairs:
                        print("üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –ø–∞—Ä—ã:")
                        for pair in trending_pairs[:3]:
                            print(f"   - {pair['symbol']}: {pair['sentiment']} ({pair['price_change']:.2f}%)")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞
                    risk_assessment = sud_data.get('risk_assessment', {})
                    print(f"‚ö†Ô∏è –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞: {risk_assessment.get('overall_risk', 'unknown')}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ—Å—É–¥–∞: {sud_data}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∫—Ä–∏–ø—Ç–æ—Å—É–¥–æ–º: {e}")
        else:
            print("‚ùå Crypto integration –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –¢–µ—Å—Ç 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
        print("\nüí∞ –¢–µ—Å—Ç 5: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
        if crypto_integration:
            try:
                recommendation = crypto_integration.get_position_recommendations('BTC-USDT', user_balance=1000)
                if 'action' in recommendation:
                    print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è BTC-USDT: {recommendation['action']}")
                    print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {recommendation.get('confidence', 0):.2f}")
                    print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {recommendation.get('risk_level', 'unknown')}")
                    
                    if recommendation.get('position_size'):
                        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${recommendation['position_size']:.2f}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {recommendation}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {e}")
        
        print("\n" + "=" * 50)
        print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def test_telegram_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Telegram."""
    print("\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram")
    print("=" * 30)
    
    print("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Telegram:")
    print("1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É —Å–æ–æ–±—â–µ–Ω–∏–µ '–ß–ê–¢–£–ú–ë–ê'")
    print("2. –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö")
    
    print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ—Å—É–¥–∞:")
    print("1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ –≥—Ä—É–ø–ø—É —Ñ–æ—Ç–æ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
    print("2. –ù–∞–∂–º–∏—Ç–µ '–î–∞' –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")
    print("3. –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–ø–∞—Ç–µ—Ä–Ω—ã, –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∏ –∫—Ä–∏–ø—Ç–æ—Å—É–¥–∞")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –ñ–∏–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API BingX –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
    api_ok = await test_bingx_live()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Telegram
    test_telegram_integration()
    
    if api_ok:
        print("\n‚úÖ API BingX —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞")
    else:
        print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API BingX")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")

if __name__ == "__main__":
    asyncio.run(main()) 