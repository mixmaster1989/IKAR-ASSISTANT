#!/usr/bin/env python3
"""
üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê –° –û–°–ù–û–í–ù–û–ô –°–ò–°–¢–ï–ú–û–ô IKAR
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import sys
import shutil
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def integrate_with_main_system():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π IKAR"""
    print("üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê –° IKAR")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
    if not Path("backend").exists():
        print("‚ùå –ü–∞–ø–∫–∞ 'backend' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ IKAR.")
        return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –≤ –Ω—É–∂–Ω—ã–µ –º–µ—Å—Ç–∞
    files_to_copy = [
        ("internet_intelligence_system.py", "backend/"),
        ("ikar_internet_integration.py", "backend/"),
        ("integrate_with_ikar.py", "backend/"),
        ("internet_api.py", "backend/api/"),
        ("test_internet_intelligence.py", "./"),
        ("run_internet_intelligence.py", "./"),
        ("INTERNET_INTELLIGENCE_README.md", "./"),
        ("requirements_internet_intelligence.txt", "./")
    ]
    
    print("üìÅ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...")
    for src, dst in files_to_copy:
        if Path(src).exists():
            dst_path = Path(dst)
            dst_path.mkdir(parents=True, exist_ok=True)
            
            shutil.copy2(src, dst_path / Path(src).name)
            print(f"‚úÖ {src} -> {dst}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª {src} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if Path("frontend/public/internet-intelligence.html").exists():
        print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–∂–µ –Ω–∞ –º–µ—Å—Ç–µ")
    else:
        print("‚ö†Ô∏è  –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
    print("üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    update_requirements()
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    data_dir = Path("data")
    data_dir.mkdir(exist_ok=True)
    print("‚úÖ –ü–∞–ø–∫–∞ data —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ IKAR
    print("üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏...")
    integrate_with_routes()
    integrate_with_telegram()
    integrate_with_main()
    
    print("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements_internet_intelligence.txt")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç: python run_internet_intelligence.py")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:6666/internet-intelligence.html")
    print("4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ IKAR")
    
    return True

def update_requirements():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ requirements.txt"""
    try:
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        main_req_file = Path("requirements.txt")
        internet_req_file = Path("requirements_internet_intelligence.txt")
        
        if main_req_file.exists() and internet_req_file.exists():
            with open(main_req_file, 'r', encoding='utf-8') as f:
                main_deps = f.read()
            
            with open(internet_req_file, 'r', encoding='utf-8') as f:
                internet_deps = f.read()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            if "# –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" not in main_deps:
                with open(main_req_file, 'a', encoding='utf-8') as f:
                    f.write("\n# –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n")
                    f.write("aiohttp>=3.8.0\n")
                    f.write("beautifulsoup4>=4.11.0\n")
                    f.write("feedparser>=6.0.0\n")
                    f.write("trafilatura>=5.0.0\n")
                    f.write("newspaper3k>=0.2.8\n")
                    f.write("flask>=2.3.0\n")
                
                print("‚úÖ requirements.txt –æ–±–Ω–æ–≤–ª–µ–Ω")
            else:
                print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements.txt: {e}")

def integrate_with_routes():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å routes.py"""
    try:
        routes_file = Path("backend/api/routes.py")
        if not routes_file.exists():
            print("‚ö†Ô∏è  routes.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(routes_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if "internet_api" in content:
            print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-API —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ routes.py")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        if "from . import internet_api" not in content:
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            import_section = content.find("from . import")
            if import_section != -1:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–æ–≤
                end_import = content.find("\n\n", import_section)
                if end_import != -1:
                    new_content = (
                        content[:end_import] + 
                        "\nfrom . import internet_api" +
                        content[end_import:]
                    )
                    
                    with open(routes_file, 'w', encoding='utf-8') as f:
                        f.write(new_content)
                    
                    print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-API –¥–æ–±–∞–≤–ª–µ–Ω –≤ routes.py")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å routes.py: {e}")

def integrate_with_telegram():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å telegram.py"""
    try:
        telegram_file = Path("backend/api/telegram.py")
        if not telegram_file.exists():
            print("‚ö†Ô∏è  telegram.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(telegram_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if "enhance_telegram_message" in content:
            print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ telegram.py")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        if "from integrate_with_ikar import enhance_telegram_message" not in content:
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            import_section = content.find("import")
            if import_section != -1:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–æ–≤
                end_import = content.find("\n\n", import_section)
                if end_import != -1:
                    new_content = (
                        content[:end_import] + 
                        "\nfrom integrate_with_ikar import enhance_telegram_message" +
                        content[end_import:]
                    )
                    
                    # –ù–∞—Ö–æ–¥–∏–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
                    message_handler = content.find("async def handle_message")
                    if message_handler != -1:
                        # –î–æ–±–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
                        response_section = content.find("await bot.send_message", message_handler)
                        if response_section != -1:
                            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏
                            func_end = content.find("\n\n", response_section)
                            if func_end != -1:
                                # –í—Å—Ç–∞–≤–ª—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                                enhanced_content = (
                                    new_content[:response_section] +
                                    "\n        # –£–ª—É—á—à–∞–µ–º –æ—Ç–≤–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n" +
                                    "        enhanced_response = await enhance_telegram_message(message.text, response, str(message.from_user.id))\n" +
                                    "        response = enhanced_response\n" +
                                    new_content[response_section:func_end] +
                                    new_content[func_end:]
                                )
                                
                                with open(telegram_file, 'w', encoding='utf-8') as f:
                                    f.write(enhanced_content)
                                
                                print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ telegram.py")
                                return
        
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ telegram.py")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å telegram.py: {e}")

def integrate_with_main():
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å main.py"""
    try:
        main_file = Path("backend/main.py")
        if not main_file.exists():
            print("‚ö†Ô∏è  main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        with open(main_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        if "register_internet_api" in content:
            print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-API —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        if "from api.internet_api import register_internet_api" not in content:
            # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
            import_section = content.find("from api import")
            if import_section != -1:
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–æ–≤
                end_import = content.find("\n\n", import_section)
                if end_import != -1:
                    new_content = (
                        content[:end_import] + 
                        "\nfrom api.internet_api import register_internet_api" +
                        content[end_import:]
                    )
                    
                    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ API
                    app_creation = new_content.find("app = Flask")
                    if app_creation != -1:
                        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                        init_end = new_content.find("\n\n", app_creation)
                        if init_end != -1:
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é API
                            final_content = (
                                new_content[:init_end] +
                                "\n\n# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-API\nregister_internet_api(app)" +
                                new_content[init_end:]
                            )
                            
                            with open(main_file, 'w', encoding='utf-8') as f:
                                f.write(final_content)
                            
                            print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-API –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
                            return
        
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.py")
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å main.py: {e}")

def create_integration_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    script_content = '''#!/usr/bin/env python3
"""
üöÄ –ë–´–°–¢–†–´–ô –ó–ê–ü–£–°–ö IKAR –° –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–û–ú
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent / "backend"))

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É IKAR
        from main import app
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
        from integrate_with_ikar import get_ikar_enhancer
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
        enhancer = await get_ikar_enhancer()
        print("‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("üöÄ –ó–∞–ø—É—Å–∫ IKAR —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º...")
        app.run(host='0.0.0.0', port=6666, debug=False)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
'''
    
    with open("run_ikar_with_internet.py", 'w', encoding='utf-8') as f:
        f.write(script_content)
    
    print("‚úÖ –°–∫—Ä–∏–ø—Ç run_ikar_with_internet.py —Å–æ–∑–¥–∞–Ω")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîó –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê –° IKAR")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("README.md").exists():
        print("‚ùå README.md –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ IKAR.")
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    if integrate_with_main_system():
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
        create_integration_script()
        
        print("\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–û–õ–ù–û–°–¢–¨–Æ –ó–ê–í–ï–†–®–ï–ù–ê!")
        print("\nüìã –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ü–£–°–ö–ê:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:")
        print("   pip install -r requirements_internet_intelligence.txt")
        print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:")
        print("   python run_internet_intelligence.py")
        print("\n3. –ó–∞–ø—É—Å–∫ IKAR —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º:")
        print("   python run_ikar_with_internet.py")
        print("\n4. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:")
        print("   http://localhost:6666/internet-intelligence.html")
        
        print("\nüåü –¢–µ–ø–µ—Ä—å IKAR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã —Å–≤–µ–∂–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!")

if __name__ == "__main__":
    main() 