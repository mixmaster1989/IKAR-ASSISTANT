#!/usr/bin/env python3
"""
üîç –ú–æ–Ω–∏—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ IKAR
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import sqlite3
import json
import time
import asyncio
from datetime import datetime, timedelta
from typing import Dict, List, Any
from pathlib import Path
import curses
import threading
from collections import defaultdict, Counter

class CollectiveMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, db_path: str = "data/collective_mind.db"):
        self.db_path = Path(db_path)
        self.running = False
        self.last_check = datetime.now()
        self.agents_cache = {}
        self.network_stats = {}
        
    def get_current_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("SELECT COUNT(DISTINCT agent_id) FROM collective_memories")
            total_agents = cursor.fetchone()[0] or 0
            
            cursor.execute("SELECT COUNT(*) FROM collective_memories")
            total_memories = cursor.fetchone()[0] or 0
            
            cursor.execute("SELECT COUNT(*) FROM evolution_events")
            total_evolution = cursor.fetchone()[0] or 0
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            hour_ago = (datetime.now() - timedelta(hours=1)).timestamp()
            cursor.execute("""
                SELECT COUNT(DISTINCT agent_id) 
                FROM collective_memories 
                WHERE timestamp > ?
            """, (hour_ago,))
            active_agents_hour = cursor.fetchone()[0] or 0
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            day_ago = (datetime.now() - timedelta(days=1)).timestamp()
            cursor.execute("""
                SELECT COUNT(DISTINCT agent_id) 
                FROM collective_memories 
                WHERE timestamp > ?
            """, (day_ago,))
            active_agents_day = cursor.fetchone()[0] or 0
            
            # –ù–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cursor.execute("""
                SELECT COUNT(DISTINCT agent_id) 
                FROM collective_memories 
                WHERE agent_id NOT IN (
                    SELECT DISTINCT agent_id 
                    FROM collective_memories 
                    WHERE timestamp <= ?
                )
            """, (day_ago,))
            new_agents_day = cursor.fetchone()[0] or 0
            
            # –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            cursor.execute("""
                SELECT agent_id, COUNT(*) as memory_count
                FROM collective_memories
                WHERE timestamp > ?
                GROUP BY agent_id
                ORDER BY memory_count DESC
                LIMIT 5
            """, (day_ago,))
            top_agents = cursor.fetchall()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–∞–º—è—Ç–∏
            cursor.execute("""
                SELECT memory_type, COUNT(*) 
                FROM collective_memories 
                WHERE timestamp > ?
                GROUP BY memory_type
                ORDER BY COUNT(*) DESC
            """, (day_ago,))
            memory_types = dict(cursor.fetchall())
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
            cursor.execute("""
                SELECT agent_id, memory_type, timestamp
                FROM collective_memories
                ORDER BY timestamp DESC
                LIMIT 10
            """)
            recent_events = cursor.fetchall()
            
            conn.close()
            
            return {
                'total_agents': total_agents,
                'total_memories': total_memories,
                'total_evolution': total_evolution,
                'active_agents_hour': active_agents_hour,
                'active_agents_day': active_agents_day,
                'new_agents_day': new_agents_day,
                'top_agents': top_agents,
                'memory_types': memory_types,
                'recent_events': recent_events,
                'last_update': datetime.now()
            }
            
        except Exception as e:
            return {
                'error': str(e),
                'last_update': datetime.now()
            }
    
    def get_agent_details(self, agent_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            cursor.execute("""
                SELECT MIN(timestamp), MAX(timestamp), COUNT(*)
                FROM collective_memories
                WHERE agent_id = ?
            """, (agent_id,))
            
            first_seen, last_seen, total_memories = cursor.fetchone()
            
            # –¢–∏–ø—ã –ø–∞–º—è—Ç–∏
            cursor.execute("""
                SELECT memory_type, COUNT(*)
                FROM collective_memories
                WHERE agent_id = ?
                GROUP BY memory_type
            """, (agent_id,))
            
            memory_types = dict(cursor.fetchall())
            
            # –≠–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            cursor.execute("""
                SELECT COUNT(*)
                FROM evolution_events
                WHERE agent_id = ?
            """, (agent_id,))
            
            evolution_count = cursor.fetchone()[0] or 0
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            cursor.execute("""
                SELECT memory_type, content, importance, timestamp
                FROM collective_memories
                WHERE agent_id = ?
                ORDER BY timestamp DESC
                LIMIT 5
            """, (agent_id,))
            
            recent_memories = cursor.fetchall()
            
            conn.close()
            
            return {
                'agent_id': agent_id,
                'first_seen': datetime.fromtimestamp(first_seen) if first_seen else None,
                'last_seen': datetime.fromtimestamp(last_seen) if last_seen else None,
                'total_memories': total_memories,
                'memory_types': memory_types,
                'evolution_count': evolution_count,
                'recent_memories': recent_memories
            }
            
        except Exception as e:
            return {'error': str(e)}
    
    def run_terminal_monitor(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞"""
        def monitor_loop():
            while self.running:
                try:
                    stats = self.get_current_stats()
                    self.display_stats(stats)
                    time.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                except KeyboardInterrupt:
                    break
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(10)
        
        self.running = True
        monitor_thread = threading.Thread(target=monitor_loop)
        monitor_thread.start()
        
        try:
            monitor_thread.join()
        except KeyboardInterrupt:
            self.running = False
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def display_stats(self, stats: Dict[str, Any]):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ"""
        # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
        print("\033[2J\033[H")
        
        print("üß¨ **–ú–û–ù–ò–¢–û–† –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ì–û –†–ê–ó–£–ú–ê IKAR**")
        print("=" * 60)
        print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {stats['last_update'].strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        if 'error' in stats:
            print(f"‚ùå –û—à–∏–±–∫–∞: {stats['error']}")
            return
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**")
        print("-" * 30)
        print(f"ü§ñ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {stats['total_agents']}")
        print(f"üß† –û–±—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total_memories']}")
        print(f"üîÑ –°–æ–±—ã—Ç–∏–π —ç–≤–æ–ª—é—Ü–∏–∏: {stats['total_evolution']}")
        print()
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        print("‚ö° **–ê–ö–¢–ò–í–ù–û–°–¢–¨**")
        print("-" * 30)
        print(f"üïê –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å: {stats['active_agents_hour']} –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"üìÖ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: {stats['active_agents_day']} –∞–≥–µ–Ω—Ç–æ–≤")
        print(f"üÜï –ù–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å: {stats['new_agents_day']}")
        print()
        
        # –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤
        print("üèÜ **–¢–û–ü-5 –ê–ì–ï–ù–¢–û–í –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò (24—á)**")
        print("-" * 30)
        for i, (agent_id, count) in enumerate(stats['top_agents'], 1):
            print(f"{i}. {agent_id[:16]}... - {count} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        print()
        
        # –¢–∏–ø—ã –ø–∞–º—è—Ç–∏
        print("üß† **–¢–ò–ü–´ –ü–ê–ú–Ø–¢–ò (24—á)**")
        print("-" * 30)
        for mem_type, count in stats['memory_types'].items():
            print(f"‚Ä¢ {mem_type}: {count}")
        print()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        print("üïê **–ü–û–°–õ–ï–î–ù–ò–ï –°–û–ë–´–¢–ò–Ø**")
        print("-" * 30)
        for agent_id, mem_type, timestamp in stats['recent_events']:
            time_str = datetime.fromtimestamp(timestamp).strftime('%H:%M:%S')
            print(f"‚Ä¢ {time_str} - {agent_id[:16]}... ({mem_type})")
        print()
        
        print("=" * 60)
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    async def generate_live_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        stats = self.get_current_stats()
        
        if 'error' in stats:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {stats['error']}"
        
        report = []
        report.append("üß¨ **–ñ–ò–í–û–ô –û–¢–ß–ï–¢ –ö–û–õ–õ–ï–ö–¢–ò–í–ù–û–ì–û –†–ê–ó–£–ú–ê**")
        report.append("=" * 60)
        report.append(f"üìÖ –í—Ä–µ–º—è: {stats['last_update'].strftime('%Y-%m-%d %H:%M:%S')}")
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üìä **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**")
        report.append("-" * 30)
        report.append(f"ü§ñ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {stats['total_agents']}")
        report.append(f"üß† –û–±—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {stats['total_memories']}")
        report.append(f"üîÑ –°–æ–±—ã—Ç–∏–π —ç–≤–æ–ª—é—Ü–∏–∏: {stats['total_evolution']}")
        report.append("")
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        report.append("‚ö° **–ê–ö–¢–ò–í–ù–û–°–¢–¨ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï 24 –ß–ê–°–ê**")
        report.append("-" * 30)
        report.append(f"üïê –ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {stats['active_agents_day']}")
        report.append(f"üÜï –ù–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: {stats['new_agents_day']}")
        report.append("")
        
        # –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤
        report.append("üèÜ **–¢–û–ü-5 –ê–ì–ï–ù–¢–û–í –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò**")
        report.append("-" * 30)
        for i, (agent_id, count) in enumerate(stats['top_agents'], 1):
            report.append(f"{i}. **{agent_id[:16]}...** - {count} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        report.append("")
        
        # –¢–∏–ø—ã –ø–∞–º—è—Ç–∏
        report.append("üß† **–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú –ü–ê–ú–Ø–¢–ò**")
        report.append("-" * 30)
        total_memories_24h = sum(stats['memory_types'].values())
        for mem_type, count in stats['memory_types'].items():
            percentage = (count / total_memories_24h * 100) if total_memories_24h > 0 else 0
            report.append(f"‚Ä¢ {mem_type.upper()}: {count} ({percentage:.1f}%)")
        report.append("")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        report.append("üïê **–ü–û–°–õ–ï–î–ù–ò–ï 10 –°–û–ë–´–¢–ò–ô**")
        report.append("-" * 30)
        for agent_id, mem_type, timestamp in stats['recent_events']:
            time_str = datetime.fromtimestamp(timestamp).strftime('%H:%M:%S')
            report.append(f"‚Ä¢ {time_str} - {agent_id[:16]}... ({mem_type})")
        report.append("")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        report.append("üìà **–ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í**")
        report.append("-" * 30)
        
        if stats['new_agents_day'] > 0:
            report.append("üü¢ –†–æ—Å—Ç —Å–µ—Ç–∏ - –Ω–æ–≤—ã–µ –∞–≥–µ–Ω—Ç—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è")
        else:
            report.append("üü° –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å - –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        
        if stats['active_agents_day'] > stats['total_agents'] * 0.5:
            report.append("üü¢ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω—ã")
        elif stats['active_agents_day'] > stats['total_agents'] * 0.2:
            report.append("üü° –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
        else:
            report.append("üî¥ –ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã")
        
        report.append("")
        report.append("=" * 60)
        
        return "\n".join(report)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ IKAR")
    print("=" * 60)
    
    monitor = CollectiveMonitor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not monitor.db_path.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {monitor.db_path}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
        return
    
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∂–∏–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    report = await monitor.generate_live_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = Path("reports/live_collective_report.txt")
    report_file.parent.mkdir(exist_ok=True)
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ reports/live_collective_report.txt")
    print("\n" + "=" * 60)
    print(report)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞
    print("\nüîç –ó–∞–ø—É—Å–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        monitor.run_terminal_monitor()
    except KeyboardInterrupt:
        print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main()) 