#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import asyncio
import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ Python path
sys.path.insert(0, str(Path(__file__).parent / "backend"))

from backend.api.group_image_trigger import GroupImageTrigger

async def mock_send_telegram_photo(chat_id: str, photo_path: str, caption: str = None):
    """Mock —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    print(f"üì∏ MOCK: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ —á–∞—Ç {chat_id}")
    print(f"üìÅ –§–∞–π–ª: {photo_path}")
    print(f"üìù –ü–æ–¥–ø–∏—Å—å: {caption}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(photo_path):
        file_size = os.path.getsize(photo_path)
        print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} bytes")
        return True
    else:
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
        return False

async def test_prompt_extraction():
    """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    print("\nüß™ –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:")
    
    trigger = GroupImageTrigger()
    
    test_cases = [
        ("–±–æ—Ç–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞ –Ω–∞ –∫—Ä—ã—à–µ", "–∫–æ—Ç–∞ –Ω–∞ –∫—Ä—ã—à–µ"),
        ("–ë–û–¢–ù–ê–†–ò–°–£–ô –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç", "–∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç"),
        ("–≠–π, –±–æ—Ç–Ω–∞—Ä–∏—Å—É–π —Ä–æ–±–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ!", "—Ä–æ–±–æ—Ç–∞ –≤ –∫–æ—Å–º–æ—Å–µ"),
        ("–±–æ—Ç–Ω–∞—Ä–∏—Å—É–π", ""),
        ("–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º", ""),
        ("–±–æ—Ç–Ω–∞—Ä–∏—Å—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –¥—Ä–∞–∫–æ–Ω–æ–º –∏ –∑–∞–º–∫–æ–º", "–∫–∞—Ä—Ç–∏–Ω–∫—É —Å –¥—Ä–∞–∫–æ–Ω–æ–º –∏ –∑–∞–º–∫–æ–º"),
    ]
    
    for message, expected in test_cases:
        result = trigger._extract_prompt(message)
        status = "‚úÖ" if result == expected else "‚ùå"
        print(f"{status} '{message}' ‚Üí '{result}' (–æ–∂–∏–¥–∞–ª–æ—Å—å: '{expected}')")

async def test_trigger_activation():
    """–¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞."""
    print("\nüß™ –¢–µ—Å—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞:")
    
    trigger = GroupImageTrigger()
    
    test_cases = [
        ("–±–æ—Ç–Ω–∞—Ä–∏—Å—É–π –∫–æ—Ç–∞", True),
        ("–ë–û–¢–ù–ê–†–ò–°–£–ô —Ä–æ–±–æ—Ç–∞", True),
        ("–≠–π, –±–æ—Ç–Ω–∞—Ä–∏—Å—É–π —á—Ç–æ-—Ç–æ", True),
        ("–ø—Ä–∏–≤–µ—Ç –≤—Å–µ–º", False),
        ("–≥–æ–≤–æ—Ä–∏–º –æ –±–æ—Ç–∞—Ö", False),
        ("–±–æ—Ç–Ω–∞—Ä–∏—Å—É–π", True),  # –î–æ–ª–∂–µ–Ω —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    ]
    
    for message, should_trigger in test_cases:
        result = await trigger.try_trigger("test_chat", message, mock_send_telegram_photo)
        status = "‚úÖ" if result == should_trigger else "‚ùå"
        print(f"{status} '{message}' ‚Üí {result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {should_trigger})")

async def test_cooldown():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã cooldown."""
    print("\nüß™ –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã cooldown:")
    
    trigger = GroupImageTrigger()
    trigger.cooldown_sec = 2  # –ö–æ—Ä–æ—Ç–∫–∏–π cooldown –¥–ª—è —Ç–µ—Å—Ç–∞
    
    chat_id = "test_chat_cooldown"
            message = "–∫–∞—Ä—Ç–∏–Ω–∫–∞: —Ç–µ—Å—Ç"
    
    print("1. –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    result1 = await trigger.try_trigger(chat_id, message, mock_send_telegram_photo)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1}")
    
    print("2. –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω):")
    result2 = await trigger.try_trigger(chat_id, message, mock_send_telegram_photo)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2}")
    
    print("3. –ñ–¥–µ–º cooldown...")
    await asyncio.sleep(3)
    
    print("4. –¢—Ä–µ—Ç–∏–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏):")
    result3 = await trigger.try_trigger(chat_id, message, mock_send_telegram_photo)
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result3}")

async def test_instruction_message():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
    print("\nüß™ –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π:")
    
    trigger = GroupImageTrigger()
    
    # –¢–µ—Å—Ç —Å –ø—É—Å—Ç—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            result = await trigger.try_trigger("test_chat", "–∫–∞—Ä—Ç–∏–Ω–∫–∞:", mock_send_telegram_photo)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {result}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 60)
    
    try:
        await test_prompt_extraction()
        await test_trigger_activation()
        await test_cooldown()
        await test_instruction_message()
        
        print("\n" + "=" * 60)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        print("\nüìù –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print("1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ STABLE_HORDE_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ .env")
        print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run.py")
        print("3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –≥—Ä—É–ø–ø–µ Telegram: '–∫–∞—Ä—Ç–∏–Ω–∫–∞: –∫–æ—Ç'")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main()) 