import re

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('backend/llm/openrouter.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
new_method = '''
    async def chat_completion_with_image(
        self, 
        user_message: str, 
        image_base64: str,
        system_prompt: str = "",
        model: str = "qwen/qwen2.5-vl-72b-instruct:free",
        max_tokens: int = 2000
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
        """
        if not self.api_keys:
            logger.error("‚ùå OPENROUTER API –ö–õ–Æ–ß–ò –ù–ï –ù–ê–°–¢–†–û–ï–ù–´!")
            return None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è vision –º–æ–¥–µ–ª–∏
        messages = []
        if system_prompt:
            messages.append({"role": "system", "content": system_prompt})
        
        messages.append({
            "role": "user",
            "content": [
                {
                    "type": "text",
                    "text": user_message
                },
                {
                    "type": "image_url",
                    "image_url": {
                        "url": f"data:image/jpeg;base64,{image_base64}"
                    }
                }
            ]
        })
        
        params = {"max_tokens": max_tokens}
        
        logger.info(f"üñºÔ∏è –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú –ö {model}")
        
        # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –∫–ª—é—á–∏
        for api_key in self.api_keys:
            key_suffix = api_key[-10:] if len(api_key) > 10 else api_key
            logger.info(f"üîë –ü–†–û–ë–£–ï–ú –ö–õ–Æ–ß: ...{key_suffix}")
            
            result = await self._try_model_with_key(model, messages, params, api_key)
            
            if result and result != "RATE_LIMIT_EXCEEDED":
                logger.info(f"‚úÖ –ü–û–õ–£–ß–ï–ù –û–¢–í–ï–¢ –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï–ú: {result[:100]}...")
                return result
            elif result == "RATE_LIMIT_EXCEEDED":
                logger.warning(f"‚ö†Ô∏è –õ–ò–ú–ò–¢ –ò–°–ß–ï–†–ü–ê–ù –¥–ª—è –∫–ª—é—á–∞ ...{key_suffix}")
                continue
            
            await asyncio.sleep(1)
        
        logger.error("‚ùå –í–°–ï –ö–õ–Æ–ß–ò –ù–ï–î–û–°–¢–£–ü–ù–´ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô")
        return None'''

# –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º –º–µ—Ç–æ–¥–æ–º chat_completion
insert_position = content.rfind('    async def chat_completion(')
content = content[:insert_position] + new_method + '\n\n' + content[insert_position:]

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('backend/llm/openrouter.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("–î–æ–±–∞–≤–ª–µ–Ω –º–µ—Ç–æ–¥ chat_completion_with_image –≤ OpenRouter –∫–ª–∏–µ–Ω—Ç!")