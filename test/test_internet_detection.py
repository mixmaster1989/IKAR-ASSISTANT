#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ò–ù–¢–ï–†–ù–ï–¢-–ü–û–ò–°–ö–ê
–ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from ikar_internet_integration import IKARInternetIntegration

async def test_internet_detection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–∏—Å–∫–∞"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ò–ù–¢–ï–†–ù–ï–¢-–ü–û–ò–°–ö–ê")
    print("=" * 50)
    
    integration = IKARInternetIntegration()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        # –ó–∞–ø—Ä–æ—Å—ã –∏–∑ –ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        "–ë–æ—Ç, —á—Ç–æ —Å –∏—Ä–∞–Ω–æ–º –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å?",
        "–ë–û–¢, —á—Ç–æ –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º —Å–µ–≥–æ–¥–Ω—è?",
        "–ë–æ—Ç, –ø–æ—Å–º–æ—Ç—Ä–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —á—Ç–æ –∑–∞ –º–æ–Ω–µ—Ç–∞ XRP?",
        "–ë–æ—Ç! –∑–∞–ª–µ–∑—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ —Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –º–æ–Ω–µ—Ç—É >",
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –º–∏—Ä–µ —Å–µ–≥–æ–¥–Ω—è?",
        "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏?",
        "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?",
        "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –†–æ—Å—Å–∏–µ–π?",
        "–ö–∞–∫ –¥–µ–ª–∞ —Å –£–∫—Ä–∞–∏–Ω–æ–π?",
        "–ß—Ç–æ —Ç–≤–æ—Ä–∏—Ç—Å—è –≤ –º–∏—Ä–µ?",
        "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
        "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å?",
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è",
        "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ?",
        
        # –ó–∞–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–æ–ª–∂–Ω—ã —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
        "–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏?",
        "–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ –ª—é–±–æ–≤—å?",
    ]
    
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("-" * 50)
    
    for i, query in enumerate(test_queries, 1):
        needs_search, search_query, confidence = integration.needs_internet_search(query)
        
        status = "‚úÖ –î–ê" if needs_search else "‚ùå –ù–ï–¢"
        print(f"{i:2d}. {status} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        print(f"    –ó–∞–ø—Ä–æ—Å: '{query}'")
        if needs_search:
            print(f"    –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{search_query}'")
        print()
    
    print("=" * 50)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    
    total_queries = len(test_queries)
    internet_queries = sum(1 for query in test_queries 
                          if integration.needs_internet_search(query)[0])
    
    print(f"–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}")
    print(f"–¢—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {internet_queries}")
    print(f"–ù–µ —Ç—Ä–µ–±—É—é—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç: {total_queries - internet_queries}")
    print(f"–ü—Ä–æ—Ü–µ–Ω—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑–∞–ø—Ä–æ—Å–æ–≤: {(internet_queries/total_queries)*100:.1f}%")

if __name__ == "__main__":
    asyncio.run(test_internet_detection()) 