#!/usr/bin/env python3
"""
üöÄ –ë–´–°–¢–†–´–ô –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê IKAR
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def demo_internet_intelligence():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    print("üåê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê IKAR")
    print("=" * 80)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from internet_intelligence_system import InternetIntelligenceSystem
        from ikar_internet_integration import IKARInternetIntegration
        from integrate_with_ikar import enhance_ikar_message
        
        print("‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 1: –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
        print("\nüîç –î–ï–ú–û 1: –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
        print("-" * 40)
        
        system = InternetIntelligenceSystem()
        
        query = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
        print(f"–ü–æ–∏—Å–∫: '{query}'")
        
        results = await system.search_internet(query, max_total_results=5)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        if results:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            results_with_content = await system.extract_content(results[:3])
            
            # AI –æ–±—Ä–∞–±–æ—Ç–∫–∞
            processed_info = await system.process_with_ai(query, results_with_content)
            
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
            print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {processed_info.confidence_score:.2f}")
            print(f"   –ö–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤: {len(processed_info.key_points)}")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(processed_info.sources)}")
            print(f"   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {processed_info.processing_time:.2f}—Å")
            
            print(f"\nüß† AI-–í–´–ñ–ò–ú–ö–ê:")
            print(processed_info.ai_summary[:300] + "...")
            
            print(f"\nüîë –ö–õ–Æ–ß–ï–í–´–ï –ú–û–ú–ï–ù–¢–´:")
            for i, point in enumerate(processed_info.key_points[:3], 1):
                print(f"{i}. {point}")
        
        await system.close()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IKAR
        print("\nü§ñ –î–ï–ú–û 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å IKAR")
        print("-" * 40)
        
        test_cases = [
            {
                "query": "–ö–∞–∫ –¥–µ–ª–∞?",
                "response": "–£ –º–µ–Ω—è –≤—Å–µ —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!",
                "description": "–û–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ —É–ª—É—á—à–µ–Ω–∏—è)"
            },
            {
                "query": "–ö–∞–∫–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö?",
                "response": "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ.",
                "description": "–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π (—Å —É–ª—É—á—à–µ–Ω–∏–µ–º)"
            },
            {
                "query": "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å Bitcoin —Å–µ–≥–æ–¥–Ω—è?",
                "response": "Bitcoin - —ç—Ç–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞, –Ω–æ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–Ω–∞ —Å–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.",
                "description": "–ö—Ä–∏–ø—Ç–æ-–∑–∞–ø—Ä–æ—Å (—Å —É–ª—É—á—à–µ–Ω–∏–µ–º)"
            }
        ]
        
        for i, case in enumerate(test_cases, 1):
            print(f"\nüìù –¢–µ—Å—Ç {i}: {case['description']}")
            print(f"–ó–∞–ø—Ä–æ—Å: '{case['query']}'")
            print(f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{case['response']}'")
            
            enhanced = await enhance_ikar_message(case['query'], case['response'], f"demo_user_{i}")
            
            improvement_ratio = len(enhanced) / len(case['response'])
            print(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç ({improvement_ratio:.2f}x):")
            print(f"'{enhanced[:200]}{'...' if len(enhanced) > 200 else ''}'")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è 3: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
        print("\nüî¨ –î–ï–ú–û 3: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤")
        print("-" * 40)
        
        integration = IKARInternetIntegration()
        
        test_queries = [
            "–ö–∞–∫ –¥–µ–ª–∞?",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏",
            "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
            "–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏?",
            "–ü–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è"
        ]
        
        for query in test_queries:
            needs_search, search_query, confidence = integration.needs_internet_search(query)
            status = "üåê –ù–£–ñ–ï–ù" if needs_search else "‚ùå –ù–ï –ù–£–ñ–ï–ù"
            print(f"'{query}' -> {status} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
        
        await integration.close()
        
        print("\nüéâ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    try:
        from integrate_with_ikar import enhance_ikar_message
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
        user_query = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
        bot_response = "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è."
        
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: '{user_query}'")
        
        enhanced = await enhance_ikar_message(user_query, bot_response, "quick_test")
        
        improvement = len(enhanced) / len(bot_response)
        print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –£–ª—É—á—à–µ–Ω–∏–µ: {improvement:.2f}x")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
        return False

async def start_web_interface():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üåê –ó–ê–ü–£–°–ö –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("=" * 40)
    
    try:
        from flask import Flask
        from internet_api import register_internet_api
        
        app = Flask(__name__)
        register_internet_api(app)
        
        print("‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω")
        print("üì± –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:6667")
        print("üîß –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: http://localhost:6666/internet-intelligence.html")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
        import threading
        
        def run_flask():
            app.run(host='0.0.0.0', port=6667, debug=False)
        
        thread = threading.Thread(target=run_flask, daemon=True)
        thread.start()
        
        print("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –æ–ø—Ü–∏–π"""
    print("\nüéÆ –ú–ï–ù–Æ –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê")
    print("=" * 50)
    print("1. üöÄ –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("2. ‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç")
    print("3. üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
    print("4. üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    print("5. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("6. üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print("-" * 50)

async def show_system_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    try:
        from integrate_with_ikar import get_internet_enhancement_status
        
        status = await get_internet_enhancement_status()
        
        print(f"–°—Ç–∞—Ç—É—Å: {status.get('status', 'unknown')}")
        print(f"–í–∫–ª—é—á–µ–Ω–∞: {status.get('enabled', False)}")
        print(f"–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: {status.get('auto_detect', False)}")
        print(f"–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {status.get('confidence_threshold', 0.0)}")
        
        if 'stats' in status:
            stats = status['stats']
            print(f"–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤: {stats.get('total_searches', 0)}")
            print(f"–£—Å–ø–µ—à–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π: {stats.get('successful_enhancements', 0)}")
            print(f"–°—Ä–µ–¥–Ω—è—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {stats.get('average_confidence', 0.0):.2f}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")

async def configure_system():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print("üîß –ù–ê–°–¢–†–û–ô–ö–ê –°–ò–°–¢–ï–ú–´")
    print("=" * 30)
    
    try:
        from integrate_with_ikar import configure_internet_enhancement
        
        print("–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print("1. –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
        print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
        print("4. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ").strip()
        
        if choice == "1":
            enabled = input("–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º—É? (y/n): ").lower() == 'y'
            configure_internet_enhancement(enabled=enabled)
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ {'–≤–∫–ª—é—á–µ–Ω–∞' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω–∞'}")
            
        elif choice == "2":
            auto_detect = input("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ? (y/n): ").lower() == 'y'
            configure_internet_enhancement(auto_detect=auto_detect)
            print(f"‚úÖ –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {'–≤–∫–ª—é—á–µ–Ω–æ' if auto_detect else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}")
            
        elif choice == "3":
            try:
                threshold = float(input("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ (0.0-1.0): "))
                configure_internet_enhancement(confidence_threshold=threshold)
                print(f"‚úÖ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {threshold}")
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                
        elif choice == "4":
            configure_internet_enhancement(
                enabled=True,
                auto_detect=True,
                confidence_threshold=0.3
            )
            print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –°–ò–°–¢–ï–ú–ê –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê IKAR")
    print("–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    print("=" * 80)
    
    while True:
        show_menu()
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
        
        if choice == "1":
            await demo_internet_intelligence()
            
        elif choice == "2":
            await quick_test()
            
        elif choice == "3":
            await start_web_interface()
            
        elif choice == "4":
            print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤...")
            try:
                from test_internet_intelligence import InternetIntelligenceTester
                tester = InternetIntelligenceTester()
                await tester.run_all_tests()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                
        elif choice == "5":
            await show_system_status()
            
        elif choice == "6":
            await configure_system()
            
        elif choice == "0":
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
            
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}") 