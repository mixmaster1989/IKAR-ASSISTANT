#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê
"""

import asyncio
import logging
from improved_content_extractor_fixed import FixedContentExtractor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_fixed_parsing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥"""
    print("üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    extractor = FixedContentExtractor()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ URL
    test_urls = [
        "https://www.rbc.ru/",
        "https://ria.ru/",
        "https://tass.ru/",
        "https://www.interfax.ru/"
    ]
    
    test_query = "–Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è"
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Å –∑–∞–ø—Ä–æ—Å–æ–º: '{test_query}'")
    print()
    
    for i, url in enumerate(test_urls, 1):
        print(f"üìÑ –¢–µ—Å—Ç {i}: {url}")
        
        try:
            content = await extractor.extract_content(url, test_query)
            
            if content:
                print(f"   ‚úÖ –£–°–ü–ï–•!")
                print(f"   üìù –ú–µ—Ç–æ–¥: {content.extraction_method}")
                print(f"   üìä –°–ª–æ–≤: {content.word_count}")
                print(f"   üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {content.relevance_score:.2f}")
                print(f"   üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {content.title[:100]}...")
                print(f"   üìÑ –¢–µ–∫—Å—Ç: {content.text[:200]}...")
            else:
                print(f"   ‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ò–ó–í–õ–ï–ß–¨ –ö–û–ù–¢–ï–ù–¢")
                
        except Exception as e:
            print(f"   üí• –û–®–ò–ë–ö–ê: {e}")
        
        print()
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    await extractor.close()
    
    print("‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

async def test_internet_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"""
    print("üåê –¢–ï–°–¢ –ü–û–õ–ù–û–ô –°–ò–°–¢–ï–ú–´ –ò–ù–¢–ï–†–ù–ï–¢-–ò–ù–¢–ï–õ–õ–ï–ö–¢–ê")
    print("=" * 50)
    
    try:
        from internet_intelligence_system import InternetIntelligenceSystem
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system = InternetIntelligenceSystem()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_query = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–≥–æ–¥–Ω—è"
        
        print(f"üîç –ó–∞–ø—Ä–æ—Å: '{test_query}'")
        print()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        result = await system.get_internet_intelligence(test_query)
        
        print(f"‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"   üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result.confidence_score:.2f}")
        print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.processing_time:.2f}—Å")
        print(f"   üì∞ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {len(result.sources)}")
        print(f"   üß† AI-–≤—ã–∂–∏–º–∫–∞: {result.ai_summary[:300]}...")
        print(f"   üîë –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:")
        for i, point in enumerate(result.key_points[:5], 1):
            print(f"      {i}. {point}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        await system.close()
        
    except Exception as e:
        print(f"üí• –û–®–ò–ë–ö–ê –°–ò–°–¢–ï–ú–´: {e}")
        import traceback
        traceback.print_exc()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ü–ê–†–°–ò–ù–ì–ê")
    print("=" * 60)
    
    # –¢–µ—Å—Ç 1: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    await test_fixed_parsing()
    
    print("\n" + "=" * 60)
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    await test_internet_system()
    
    print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")

if __name__ == "__main__":
    asyncio.run(main()) 