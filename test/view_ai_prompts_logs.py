#!/usr/bin/env python3
"""
üß† –ü–†–û–°–ú–û–¢–† –õ–û–ì–û–í –ü–†–û–ú–ü–¢–û–í AI –ú–û–î–ï–õ–ï–ô
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å AI –º–æ–¥–µ–ª—è–º–∏
"""

import os
import json
import re
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import argparse
from collections import defaultdict, Counter

class AIPromptsLogViewer:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä—â–∏–∫ –ª–æ–≥–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ AI –º–æ–¥–µ–ª–µ–π"""
    
    def __init__(self, log_file: str = "ai_prompts.log"):
        self.log_file = Path(log_file)
        self.prompts_dir = self.log_file.parent / "prompts"
        self.responses_dir = self.log_file.parent / "responses"
        self.conversations_dir = self.log_file.parent / "conversations"
        
    def read_log_file(self, lines: int = None) -> List[str]:
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤"""
        if not self.log_file.exists():
            print(f"‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.log_file}")
            return []
        
        try:
            with open(self.log_file, 'r', encoding='utf-8') as f:
                if lines:
                    return f.readlines()[-lines:]
                else:
                    return f.readlines()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: {e}")
            return []
    
    def parse_log_entry(self, line: str) -> Optional[Dict[str, Any]]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        try:
            # –§–æ—Ä–º–∞—Ç: timestamp | level | name | func:line | message
            parts = line.strip().split(' | ')
            if len(parts) < 5:
                return None
            
            timestamp_str = parts[0]
            level = parts[1]
            name = parts[2]
            func_line = parts[3]
            message = ' | '.join(parts[4:])
            
            # –ü–∞—Ä—Å–∏–º timestamp
            try:
                timestamp = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
            except:
                timestamp = None
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            operation_type = "unknown"
            if "üß† AI –ó–ê–ü–†–û–°:" in message:
                operation_type = "prompt_request"
            elif "‚úÖ AI –û–¢–í–ï–¢:" in message or "‚ùå AI –û–¢–í–ï–¢:" in message:
                operation_type = "prompt_response"
            elif "üí¨ AI –ë–ï–°–ï–î–ê:" in message:
                operation_type = "prompt_conversation"
            elif "üî¨ AI –ê–ù–ê–õ–ò–ó:" in message:
                operation_type = "prompt_analysis"
            elif "‚ö° AI –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:" in message:
                operation_type = "prompt_performance"
            elif "‚ùå AI –û–®–ò–ë–ö–ê:" in message:
                operation_type = "prompt_error"
            elif "‚öôÔ∏è –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ú–û–î–ï–õ–ò:" in message:
                operation_type = "model_config"
            elif "üìä –ö–ê–ß–ï–°–¢–í–û –ü–†–û–ú–ü–¢–ê:" in message:
                operation_type = "prompt_quality"
            
            return {
                "timestamp": timestamp,
                "timestamp_str": timestamp_str,
                "level": level,
                "name": name,
                "func_line": func_line,
                "message": message,
                "operation_type": operation_type
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø–∏—Å–∏: {e}")
            return None
    
    def get_logs_by_type(self, operation_type: str = None, hours: int = None) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        lines = self.read_log_file()
        logs = []
        
        for line in lines:
            entry = self.parse_log_entry(line)
            if not entry:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –æ–ø–µ—Ä–∞—Ü–∏–∏
            if operation_type and entry["operation_type"] != operation_type:
                continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            if hours and entry["timestamp"]:
                cutoff_time = datetime.now() - timedelta(hours=hours)
                if entry["timestamp"] < cutoff_time:
                    continue
            
            logs.append(entry)
        
        return logs
    
    def get_prompts_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        try:
            from ai_prompts_logger import get_ai_prompts_logger
            logger = get_ai_prompts_logger()
            return logger.get_prompts_stats()
        except ImportError:
            return self._calculate_stats_manually()
    
    def _calculate_stats_manually(self) -> Dict[str, Any]:
        """–†—É—á–Ω–æ–π —Ä–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        logs = self.get_logs_by_type()
        
        stats = {
            "total_prompts": 0,
            "total_responses": 0,
            "successful_responses": 0,
            "failed_responses": 0,
            "models_used": set(),
            "average_processing_time": 0.0,
            "total_tokens": 0,
            "operation_types": Counter(),
            "errors": []
        }
        
        processing_times = []
        
        for log in logs:
            stats["operation_types"][log["operation_type"]] += 1
            
            if log["operation_type"] == "prompt_request":
                stats["total_prompts"] += 1
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å
                model_match = re.search(r'–ú–æ–¥–µ–ª—å: (.+)', log["message"])
                if model_match:
                    stats["models_used"].add(model_match.group(1))
            
            elif log["operation_type"] == "prompt_response":
                stats["total_responses"] += 1
                
                if "‚úÖ" in log["message"]:
                    stats["successful_responses"] += 1
                else:
                    stats["failed_responses"] += 1
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—à–∏–±–∫—É
                    error_match = re.search(r'–û—à–∏–±–∫–∞: (.+)', log["message"])
                    if error_match:
                        stats["errors"].append(error_match.group(1))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                time_match = re.search(r'–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ([\d.]+)—Å', log["message"])
                if time_match:
                    processing_times.append(float(time_match.group(1)))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã
                tokens_match = re.search(r'–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: (\d+)', log["message"])
                if tokens_match:
                    stats["total_tokens"] += int(tokens_match.group(1))
        
        if processing_times:
            stats["average_processing_time"] = sum(processing_times) / len(processing_times)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º set –≤ list
        stats["models_used"] = list(stats["models_used"])
        
        return stats
    
    def show_summary(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ª–æ–≥–æ–≤"""
        print("üìä –°–í–û–î–ö–ê –õ–û–ì–û–í –ü–†–û–ú–ü–¢–û–í AI")
        print("=" * 50)
        
        stats = self.get_prompts_stats()
        
        print(f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {stats.get('total_prompts', 0)}")
        print(f"üí¨ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {stats.get('total_responses', 0)}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats.get('successful_responses', 0)}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {stats.get('failed_responses', 0)}")
        print(f"‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {stats.get('average_processing_time', 0):.2f}—Å")
        print(f"üî¢ –í—Å–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('total_tokens', 0)}")
        
        if stats.get('models_used'):
            print(f"ü§ñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏: {', '.join(stats['models_used'])}")
        
        print("\nüìà –¢–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π:")
        for op_type, count in stats.get('operation_types', {}).most_common():
            print(f"   {op_type}: {count}")
        
        if stats.get('errors'):
            print(f"\n‚ùå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏:")
            for error in stats['errors'][-5:]:
                print(f"   ‚Ä¢ {error}")
    
    def show_recent_prompts(self, count: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–º–ø—Ç—ã"""
        print(f"üß† –ü–û–°–õ–ï–î–ù–ò–ï {count} –ü–†–û–ú–ü–¢–û–í")
        print("=" * 50)
        
        logs = self.get_logs_by_type("prompt_request", hours=24)
        recent_logs = logs[-count:] if len(logs) > count else logs
        
        for i, log in enumerate(reversed(recent_logs), 1):
            print(f"\n{i}. {log['timestamp_str']}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å
            model_match = re.search(r'–ú–æ–¥–µ–ª—å: (.+)', log["message"])
            if model_match:
                print(f"   –ú–æ–¥–µ–ª—å: {model_match.group(1)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt_match = re.search(r'–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\s*\n\s*(.+)', log["message"], re.DOTALL)
            if system_prompt_match:
                system_prompt = system_prompt_match.group(1).strip()
                print(f"   üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {system_prompt[:200]}{'...' if len(system_prompt) > 200 else ''}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
            user_prompt_match = re.search(r'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:\s*\n\s*(.+)', log["message"], re.DOTALL)
            if user_prompt_match:
                user_prompt = user_prompt_match.group(1).strip()
                print(f"   üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç: {user_prompt[:200]}{'...' if len(user_prompt) > 200 else ''}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            request_id_match = re.search(r'AI –ó–ê–ü–†–û–°: (.+)', log["message"])
            if request_id_match:
                request_id = request_id_match.group(1)
                self._show_full_prompt_from_file(request_id, show_full=False)
    
    def show_recent_responses(self, count: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–≤–µ—Ç—ã"""
        print(f"üí¨ –ü–û–°–õ–ï–î–ù–ò–ï {count} –û–¢–í–ï–¢–û–í")
        print("=" * 50)
        
        logs = self.get_logs_by_type("prompt_response", hours=24)
        recent_logs = logs[-count:] if len(logs) > count else logs
        
        for i, log in enumerate(reversed(recent_logs), 1):
            print(f"\n{i}. {log['timestamp_str']}")
            
            # –°—Ç–∞—Ç—É—Å
            if "‚úÖ" in log["message"]:
                print("   ‚úÖ –£—Å–ø–µ—à–Ω–æ")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å
            model_match = re.search(r'–ú–æ–¥–µ–ª—å: (.+)', log["message"])
            if model_match:
                print(f"   –ú–æ–¥–µ–ª—å: {model_match.group(1)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            time_match = re.search(r'–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ([\d.]+)—Å', log["message"])
            if time_match:
                print(f"   –í—Ä–µ–º—è: {time_match.group(1)}—Å")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            tokens_match = re.search(r'–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: (\d+)', log["message"])
            if tokens_match:
                print(f"   –¢–æ–∫–µ–Ω—ã: {tokens_match.group(1)}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
            response_match = re.search(r'–û—Ç–≤–µ—Ç:\s*\n\s*(.+)', log["message"], re.DOTALL)
            if response_match:
                response = response_match.group(1).strip()
                print(f"   üí¨ –û—Ç–≤–µ—Ç: {response[:200]}{'...' if len(response) > 200 else ''}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
            request_id_match = re.search(r'AI –û–¢–í–ï–¢: (.+)', log["message"])
            if request_id_match:
                request_id = request_id_match.group(1)
                self._show_full_response_from_file(request_id, show_full=False)
    
    def show_errors(self, count: int = 10):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫–∏"""
        print(f"‚ùå –ü–û–°–õ–ï–î–ù–ò–ï {count} –û–®–ò–ë–û–ö")
        print("=" * 50)
        
        logs = self.get_logs_by_type("prompt_error", hours=24)
        recent_logs = logs[-count:] if len(logs) > count else logs
        
        for i, log in enumerate(reversed(recent_logs), 1):
            print(f"\n{i}. {log['timestamp_str']}")
            print(f"   {log['message']}")
    
    def show_performance(self, hours: int = 24):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"""
        print(f"‚ö° –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ó–ê –ü–û–°–õ–ï–î–ù–ò–ï {hours} –ß–ê–°–û–í")
        print("=" * 50)
        
        logs = self.get_logs_by_type("prompt_performance", hours=hours)
        
        if not logs:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ–ø–µ—Ä–∞—Ü–∏—è–º
        operations = defaultdict(list)
        for log in logs:
            op_match = re.search(r'AI –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: (.+)', log["message"])
            if op_match:
                operation = op_match.group(1)
                time_match = re.search(r'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ([\d.]+)—Å', log["message"])
                if time_match:
                    operations[operation].append(float(time_match.group(1)))
        
        for operation, times in operations.items():
            avg_time = sum(times) / len(times)
            min_time = min(times)
            max_time = max(times)
            print(f"\n{operation}:")
            print(f"   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_time:.2f}—Å")
            print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {min_time:.2f}—Å")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_time:.2f}—Å")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {len(times)}")
    
    def search_logs(self, query: str, hours: int = 24):
        """–ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö"""
        print(f"üîç –ü–û–ò–°–ö –í –õ–û–ì–ê–•: '{query}'")
        print("=" * 50)
        
        logs = self.get_logs_by_type(hours=hours)
        matching_logs = []
        
        for log in logs:
            if query.lower() in log["message"].lower():
                matching_logs.append(log)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(matching_logs)}")
        
        for i, log in enumerate(matching_logs[-10:], 1):
            print(f"\n{i}. {log['timestamp_str']} - {log['operation_type']}")
            print(f"   {log['message'][:200]}...")
    
    def _show_full_prompt_from_file(self, request_id: str, show_full: bool = True):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        prompt_file = self.prompts_dir / f"{request_id}_prompt.json"
        
        if prompt_file.exists():
            try:
                with open(prompt_file, 'r', encoding='utf-8') as f:
                    prompt_data = json.load(f)
                
                if show_full:
                    print(f"\nüìÑ –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢: {request_id}")
                    print("=" * 50)
                    print(f"üïê –í—Ä–µ–º—è: {prompt_data.get('timestamp', 'N/A')}")
                    print(f"ü§ñ –ú–æ–¥–µ–ª—å: {prompt_data.get('model', 'N/A')}")
                    print(f"\nüìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:")
                    print(prompt_data.get('system_prompt', 'N/A'))
                    print(f"\nüí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç:")
                    print(prompt_data.get('user_prompt', 'N/A'))
                    
                    if prompt_data.get('context'):
                        print(f"\nüîß –ö–æ–Ω—Ç–µ–∫—Å—Ç:")
                        print(json.dumps(prompt_data['context'], ensure_ascii=False, indent=2))
                else:
                    # –ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥
                    system_prompt = prompt_data.get('system_prompt', '')
                    user_prompt = prompt_data.get('user_prompt', '')
                    print(f"   üìù –°–∏—Å—Ç–µ–º–Ω—ã–π: {system_prompt[:100]}{'...' if len(system_prompt) > 100 else ''}")
                    print(f"   üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π: {user_prompt[:100]}{'...' if len(user_prompt) > 100 else ''}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
        else:
            if show_full:
                print("‚ùå –§–∞–π–ª –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def _show_full_response_from_file(self, request_id: str, show_full: bool = True):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        response_file = self.responses_dir / f"{request_id}_response.json"
        
        if response_file.exists():
            try:
                with open(response_file, 'r', encoding='utf-8') as f:
                    response_data = json.load(f)
                
                if show_full:
                    print(f"\nüí¨ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢: {request_id}")
                    print("=" * 50)
                    print(f"üïê –í—Ä–µ–º—è: {response_data.get('timestamp', 'N/A')}")
                    print(f"‚úÖ –£—Å–ø–µ—Ö: {response_data.get('success', 'N/A')}")
                    
                    if response_data.get('processing_time'):
                        print(f"‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response_data['processing_time']:.2f}—Å")
                    
                    if response_data.get('tokens_used'):
                        print(f"üî¢ –¢–æ–∫–µ–Ω–æ–≤: {response_data['tokens_used']}")
                    
                    if response_data.get('error'):
                        print(f"‚ùå –û—à–∏–±–∫–∞: {response_data['error']}")
                    
                    print(f"\nüìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
                    print(response_data.get('response', 'N/A'))
                else:
                    # –ö—Ä–∞—Ç–∫–∏–π –≤–∏–¥
                    response = response_data.get('response', '')
                    print(f"   üí¨ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {response[:100]}{'...' if len(response) > 100 else ''}")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {e}")
        else:
            if show_full:
                print("‚ùå –§–∞–π–ª –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    def show_full_prompt(self, request_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –æ—Ç–≤–µ—Ç"""
        print(f"üìÑ –ü–û–õ–ù–´–ô –ü–†–û–ú–ü–¢ –ò –û–¢–í–ï–¢: {request_id}")
        print("=" * 50)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç
        self._show_full_prompt_from_file(request_id, show_full=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        self._show_full_response_from_file(request_id, show_full=True)

def main():
    parser = argparse.ArgumentParser(description="–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ AI –º–æ–¥–µ–ª–µ–π")
    parser.add_argument("--log-file", default="ai_prompts.log", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤")
    parser.add_argument("--action", choices=["summary", "prompts", "responses", "errors", "performance", "search", "full"], 
                       default="summary", help="–î–µ–π—Å—Ç–≤–∏–µ")
    parser.add_argument("--count", type=int, default=10, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π")
    parser.add_argument("--hours", type=int, default=24, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    parser.add_argument("--query", help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    parser.add_argument("--request-id", help="ID –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
    
    args = parser.parse_args()
    
    viewer = AIPromptsLogViewer(args.log_file)
    
    if args.action == "summary":
        viewer.show_summary()
    elif args.action == "prompts":
        viewer.show_recent_prompts(args.count)
    elif args.action == "responses":
        viewer.show_recent_responses(args.count)
    elif args.action == "errors":
        viewer.show_errors(args.count)
    elif args.action == "performance":
        viewer.show_performance(args.hours)
    elif args.action == "search":
        if not args.query:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å --query")
            return
        viewer.search_logs(args.query, args.hours)
    elif args.action == "full":
        if not args.request_id:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø—Ä–æ—Å–∞ —Å --request-id")
            return
        viewer.show_full_prompt(args.request_id)

if __name__ == "__main__":
    main() 