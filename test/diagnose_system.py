#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã IKAR
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
"""

import os
import sys
import subprocess
import importlib.util
from pathlib import Path

def print_section(title):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–µ–∫—Ü–∏–∏"""
    print(f"\n{'='*60}")
    print(f"üîç {title}")
    print(f"{'='*60}")

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_section("–ü–†–û–í–ï–†–ö–ê PYTHON")
    print(f"Python –≤–µ—Ä—Å–∏—è: {sys.version}")
    print(f"Python –ø—É—Ç—å: {sys.executable}")
    print(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")

def check_main_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print_section("–ü–†–û–í–ï–†–ö–ê MAIN.PY")
    
    main_path = Path("backend/main.py")
    if not main_path.exists():
        print("‚ùå –§–∞–π–ª backend/main.py –ù–ï –ù–ê–ô–î–ï–ù!")
        return False
    
    print(f"‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: {main_path.absolute()}")
    
    # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫
    with open(main_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()[:20]
    
    print("\nüìÑ –ü–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫ —Ñ–∞–π–ª–∞:")
    for i, line in enumerate(lines, 1):
        print(f"{i:2d}: {line.rstrip()}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    flask_imports = [line for line in lines if 'from flask import' in line or 'import flask' in line]
    fastapi_imports = [line for line in lines if 'from fastapi import' in line or 'import fastapi' in line]
    
    print(f"\nüîç Flask –∏–º–ø–æ—Ä—Ç—ã: {len(flask_imports)}")
    for imp in flask_imports:
        print(f"   ‚ùå {imp.strip()}")
    
    print(f"üîç FastAPI –∏–º–ø–æ—Ä—Ç—ã: {len(fastapi_imports)}")
    for imp in fastapi_imports:
        print(f"   ‚úÖ {imp.strip()}")
    
    return len(flask_imports) == 0 and len(fastapi_imports) > 0

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print_section("–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
    req_path = Path("requirements.txt")
    if req_path.exists():
        print("‚úÖ requirements.txt –Ω–∞–π–¥–µ–Ω")
        with open(req_path, 'r') as f:
            reqs = f.read()
        
        if 'flask' in reqs.lower():
            print("‚ùå –í requirements.txt –Ω–∞–π–¥–µ–Ω Flask!")
        if 'fastapi' in reqs.lower():
            print("‚úÖ –í requirements.txt –Ω–∞–π–¥–µ–Ω FastAPI")
    else:
        print("‚ùå requirements.txt –ù–ï –ù–ê–ô–î–ï–ù!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
    critical_packages = ['fastapi', 'uvicorn', 'pydantic', 'starlette']
    
    for package in critical_packages:
        try:
            spec = importlib.util.find_spec(package)
            if spec is not None:
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ùå {package} –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")
        except ImportError:
            print(f"‚ùå {package} –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù!")

def check_systemd_service():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞"""
    print_section("–ü–†–û–í–ï–†–ö–ê SYSTEMD –°–ï–†–í–ò–°–ê")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
        result = subprocess.run(['systemctl', 'is-active', 'chatumba'], 
                              capture_output=True, text=True)
        print(f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {result.stdout.strip()}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
        result = subprocess.run(['systemctl', 'cat', 'chatumba'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞:")
            print(result.stdout)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ systemd: {e}")

def check_logs():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤"""
    print_section("–ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í")
    
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤
        result = subprocess.run(['journalctl', '-u', 'chatumba', '-n', '10', '--no-pager'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:")
            print(result.stdout)
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")

def check_file_permissions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    print_section("–ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê")
    
    files_to_check = [
        "backend/main.py",
        "backend/config.py",
        "backend/api/collective_api.py",
        "backend/api/memory_api.py",
        "requirements.txt"
    ]
    
    for file_path in files_to_check:
        path = Path(file_path)
        if path.exists():
            stat = path.stat()
            print(f"‚úÖ {file_path}: {oct(stat.st_mode)[-3:]}")
        else:
            print(f"‚ùå {file_path}: –ù–ï –ù–ê–ô–î–ï–ù")

def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ Python"""
    print_section("–ü–†–û–í–ï–†–ö–ê –ò–ú–ü–û–†–¢–û–í")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    test_imports = [
        'fastapi',
        'uvicorn',
        'pydantic',
        'starlette',
        'aiohttp',
        'aiosqlite'
    ]
    
    for module in test_imports:
        try:
            __import__(module)
            print(f"‚úÖ {module} –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        except ImportError as e:
            print(f"‚ùå {module} –ù–ï –ò–ú–ü–û–†–¢–ò–†–£–ï–¢–°–Ø: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üöÄ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ IKAR")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    check_python_version()
    check_main_file()
    check_requirements()
    check_file_permissions()
    check_imports()
    check_systemd_service()
    check_logs()
    
    print_section("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å main.py
    main_path = Path("backend/main.py")
    if main_path.exists():
        with open(main_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'from flask import' in content:
            print("üîß –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:")
            print("   1. –§–∞–π–ª backend/main.py —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º–ø–æ—Ä—Ç—ã Flask")
            print("   2. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –¥–æ –≤–µ—Ä—Å–∏–∏ —Å FastAPI")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: git pull –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        else:
            print("‚úÖ –§–∞–π–ª backend/main.py –≤—ã–≥–ª—è–¥–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    print("\nüîÑ –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("1. git pull                           # –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
    print("2. pip install -r requirements.txt   # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
    print("3. sudo systemctl restart chatumba   # –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å")
    print("4. sudo journalctl -u chatumba -f    # –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏")

if __name__ == "__main__":
    main() 