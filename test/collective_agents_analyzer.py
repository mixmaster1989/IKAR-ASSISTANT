#!/usr/bin/env python3
"""
üß¨ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ IKAR
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import sqlite3
import json
import time
import hashlib
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
from pathlib import Path
import asyncio
import aiohttp
from dataclasses import dataclass
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import defaultdict, Counter

@dataclass
class AgentInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ"""
    agent_id: str
    first_seen: datetime
    last_seen: datetime
    total_memories: int
    memory_types: Dict[str, int]
    evolution_events: int
    network_nodes: List[str]
    success_rate: float
    activity_level: str
    personality_traits: Dict[str, Any]
    collective_contributions: int
    wisdom_score: float
    network_influence: float

class CollectiveAgentsAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞"""
    
    def __init__(self, db_path: str = "data/collective_mind.db"):
        self.db_path = Path(db_path)
        self.db_path.parent.mkdir(exist_ok=True)
        self.agents_data = {}
        self.network_stats = {}
        
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS agent_tracking (
                agent_id TEXT PRIMARY KEY,
                first_seen REAL,
                last_seen REAL,
                total_memories INTEGER DEFAULT 0,
                evolution_events INTEGER DEFAULT 0,
                network_nodes TEXT,
                success_rate REAL DEFAULT 0.0,
                personality_traits TEXT,
                collective_contributions INTEGER DEFAULT 0,
                wisdom_score REAL DEFAULT 0.0,
                network_influence REAL DEFAULT 0.0,
                activity_level TEXT DEFAULT 'low'
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞–º—è—Ç–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS agent_memory_analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                agent_id TEXT,
                memory_type TEXT,
                content_preview TEXT,
                importance REAL,
                timestamp REAL,
                verification_count INTEGER,
                success_rate REAL,
                tags TEXT,
                FOREIGN KEY (agent_id) REFERENCES agent_tracking (agent_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–≤–æ–ª—é—Ü–∏–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS agent_evolution_analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                agent_id TEXT,
                old_traits TEXT,
                new_traits TEXT,
                trigger_event TEXT,
                success_metrics TEXT,
                timestamp REAL,
                validation_score REAL,
                FOREIGN KEY (agent_id) REFERENCES agent_tracking (agent_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–µ—Ç–µ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS network_interactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                source_agent TEXT,
                target_agent TEXT,
                interaction_type TEXT,
                data_size INTEGER,
                timestamp REAL,
                success BOOLEAN,
                FOREIGN KEY (source_agent) REFERENCES agent_tracking (agent_id),
                FOREIGN KEY (target_agent) REFERENCES agent_tracking (agent_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    async def scan_collective_database(self) -> Dict[str, AgentInfo]:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞...")
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        cursor.execute('''
            SELECT DISTINCT agent_id FROM collective_memories
            UNION
            SELECT DISTINCT agent_id FROM evolution_events
        ''')
        
        agent_ids = [row[0] for row in cursor.fetchall()]
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(agent_ids)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        
        agents_info = {}
        
        for agent_id in agent_ids:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–∞: {agent_id[:16]}...")
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≥–µ–Ω—Ç–µ
            agent_info = await self._analyze_agent(cursor, agent_id)
            agents_info[agent_id] = agent_info
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            self._save_agent_tracking(cursor, agent_info)
        
        conn.commit()
        conn.close()
        
        return agents_info
    
    async def _analyze_agent(self, cursor, agent_id: str) -> AgentInfo:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        
        # –ê–Ω–∞–ª–∏–∑ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        cursor.execute('''
            SELECT memory_type, content, importance, timestamp, 
                   verification_count, success_rate, tags
            FROM collective_memories 
            WHERE agent_id = ?
            ORDER BY timestamp DESC
        ''', (agent_id,))
        
        memories = cursor.fetchall()
        
        # –ê–Ω–∞–ª–∏–∑ —ç–≤–æ–ª—é—Ü–∏–∏
        cursor.execute('''
            SELECT old_traits, new_traits, trigger_event, 
                   success_metrics, timestamp
            FROM evolution_events 
            WHERE agent_id = ?
            ORDER BY timestamp DESC
        ''', (agent_id,))
        
        evolution_events = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–∞–º—è—Ç–∏
        memory_types = Counter()
        total_importance = 0
        total_verifications = 0
        total_success = 0
        
        for memory in memories:
            memory_type = memory[0]
            memory_types[memory_type] += 1
            total_importance += memory[2] or 0
            total_verifications += memory[4] or 0
            total_success += memory[5] or 0
        
        # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
        avg_importance = total_importance / len(memories) if memories else 0
        avg_verifications = total_verifications / len(memories) if memories else 0
        avg_success = total_success / len(memories) if memories else 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        if len(memories) > 100:
            activity_level = "very_high"
        elif len(memories) > 50:
            activity_level = "high"
        elif len(memories) > 20:
            activity_level = "medium"
        elif len(memories) > 5:
            activity_level = "low"
        else:
            activity_level = "inactive"
        
        # –ê–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏ (–∏–∑ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π)
        personality_traits = {}
        if evolution_events:
            latest_evolution = evolution_events[0]
            try:
                new_traits = json.loads(latest_evolution[1])
                personality_traits = new_traits
            except:
                pass
        
        # –†–∞—Å—á–µ—Ç –º—É–¥—Ä–æ—Å—Ç–∏ –∏ –≤–ª–∏—è–Ω–∏—è
        wisdom_score = (avg_importance * 0.4 + avg_verifications * 0.3 + avg_success * 0.3)
        network_influence = len(memories) * avg_verifications * 0.1
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        timestamps = [m[3] for m in memories] + [e[4] for e in evolution_events]
        if timestamps:
            first_seen = datetime.fromtimestamp(min(timestamps))
            last_seen = datetime.fromtimestamp(max(timestamps))
        else:
            first_seen = last_seen = datetime.now()
        
        return AgentInfo(
            agent_id=agent_id,
            first_seen=first_seen,
            last_seen=last_seen,
            total_memories=len(memories),
            memory_types=dict(memory_types),
            evolution_events=len(evolution_events),
            network_nodes=[],  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ
            success_rate=avg_success,
            activity_level=activity_level,
            personality_traits=personality_traits,
            collective_contributions=len(memories),
            wisdom_score=wisdom_score,
            network_influence=network_influence
        )
    
    def _save_agent_tracking(self, cursor, agent_info: AgentInfo):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≥–µ–Ω—Ç–µ –≤ —Ç–∞–±–ª–∏—Ü—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        cursor.execute('''
            INSERT OR REPLACE INTO agent_tracking 
            (agent_id, first_seen, last_seen, total_memories, evolution_events,
             network_nodes, success_rate, personality_traits, 
             collective_contributions, wisdom_score, network_influence, activity_level)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            agent_info.agent_id,
            agent_info.first_seen.timestamp(),
            agent_info.last_seen.timestamp(),
            agent_info.total_memories,
            agent_info.evolution_events,
            json.dumps(agent_info.network_nodes),
            agent_info.success_rate,
            json.dumps(agent_info.personality_traits),
            agent_info.collective_contributions,
            agent_info.wisdom_score,
            agent_info.network_influence,
            agent_info.activity_level
        ))
    
    async def generate_comprehensive_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –∞–≥–µ–Ω—Ç–∞–º"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        agents_info = await self.scan_collective_database()
        
        if not agents_info:
            return "‚ùå –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report = []
        report.append("üß¨ **–û–¢–ß–ï–¢ –û –†–ï–ê–õ–¨–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´ IKAR**")
        report.append("=" * 60)
        report.append("")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        report.append("üìà **–û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê**")
        report.append("-" * 30)
        total_memories = sum(agent.total_memories for agent in agents_info.values())
        total_evolution = sum(agent.evolution_events for agent in agents_info.values())
        avg_wisdom = sum(agent.wisdom_score for agent in agents_info.values()) / len(agents_info)
        
        report.append(f"ü§ñ **–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤:** {len(agents_info)}")
        report.append(f"üß† **–û–±—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:** {total_memories}")
        report.append(f"üîÑ **–°–æ–±—ã—Ç–∏–π —ç–≤–æ–ª—é—Ü–∏–∏:** {total_evolution}")
        report.append(f"üìä **–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –º—É–¥—Ä–æ—Å—Ç–∏:** {avg_wisdom:.2f}")
        report.append("")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_stats = Counter(agent.activity_level for agent in agents_info.values())
        report.append("‚ö° **–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –ê–ö–¢–ò–í–ù–û–°–¢–ò**")
        report.append("-" * 30)
        for level, count in activity_stats.most_common():
            percentage = (count / len(agents_info)) * 100
            report.append(f"‚Ä¢ {level.upper()}: {count} –∞–≥–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)")
        report.append("")
        
        # –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –º—É–¥—Ä–æ—Å—Ç–∏
        report.append("üèÜ **–¢–û–ü-5 –ê–ì–ï–ù–¢–û–í –ü–û –ú–£–î–†–û–°–¢–ò**")
        report.append("-" * 30)
        top_wisdom = sorted(agents_info.values(), key=lambda x: x.wisdom_score, reverse=True)[:5]
        for i, agent in enumerate(top_wisdom, 1):
            report.append(f"{i}. **{agent.agent_id[:16]}...**")
            report.append(f"   üß† –ú—É–¥—Ä–æ—Å—Ç—å: {agent.wisdom_score:.2f}")
            report.append(f"   üìù –í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {agent.total_memories}")
            report.append(f"   üîÑ –≠–≤–æ–ª—é—Ü–∏–π: {agent.evolution_events}")
            report.append(f"   ‚ö° –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {agent.activity_level}")
            report.append("")
        
        # –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –≤–ª–∏—è–Ω–∏—é
        report.append("üåü **–¢–û–ü-5 –ê–ì–ï–ù–¢–û–í –ü–û –°–ï–¢–ï–í–û–ú–£ –í–õ–ò–Ø–ù–ò–Æ**")
        report.append("-" * 30)
        top_influence = sorted(agents_info.values(), key=lambda x: x.network_influence, reverse=True)[:5]
        for i, agent in enumerate(top_influence, 1):
            report.append(f"{i}. **{agent.agent_id[:16]}...**")
            report.append(f"   üåê –í–ª–∏—è–Ω–∏–µ: {agent.network_influence:.2f}")
            report.append(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {agent.success_rate:.2f}")
            report.append(f"   üèÜ –í–∫–ª–∞–¥: {agent.collective_contributions}")
            report.append("")
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –ø–∞–º—è—Ç–∏
        report.append("üß† **–ê–ù–ê–õ–ò–ó –¢–ò–ü–û–í –ü–ê–ú–Ø–¢–ò**")
        report.append("-" * 30)
        all_memory_types = Counter()
        for agent in agents_info.values():
            all_memory_types.update(agent.memory_types)
        
        for memory_type, count in all_memory_types.most_common():
            percentage = (count / total_memories) * 100
            report.append(f"‚Ä¢ {memory_type.upper()}: {count} ({percentage:.1f}%)")
        report.append("")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
        report.append("üîç **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ê–ì–ï–ù–¢–û–í**")
        report.append("=" * 60)
        
        for agent_id, agent in agents_info.items():
            report.append(f"ü§ñ **–ê–ì–ï–ù–¢: {agent_id[:16]}...**")
            report.append(f"üìÖ –ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ: {agent.first_seen.strftime('%Y-%m-%d %H:%M:%S')}")
            report.append(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {agent.last_seen.strftime('%Y-%m-%d %H:%M:%S')}")
            report.append(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {agent.last_seen - agent.first_seen}")
            report.append(f"üìù –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {agent.total_memories}")
            report.append(f"üîÑ –°–æ–±—ã—Ç–∏–π —ç–≤–æ–ª—é—Ü–∏–∏: {agent.evolution_events}")
            report.append(f"üß† –£—Ä–æ–≤–µ–Ω—å –º—É–¥—Ä–æ—Å—Ç–∏: {agent.wisdom_score:.2f}")
            report.append(f"üåü –°–µ—Ç–µ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ: {agent.network_influence:.2f}")
            report.append(f"üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {agent.success_rate:.2f}")
            report.append(f"‚ö° –£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {agent.activity_level}")
            
            if agent.memory_types:
                report.append("üìö –¢–∏–ø—ã –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:")
                for mem_type, count in agent.memory_types.items():
                    report.append(f"   ‚Ä¢ {mem_type}: {count}")
            
            if agent.personality_traits:
                report.append("üé≠ –ß–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏:")
                for trait, value in agent.personality_traits.items():
                    report.append(f"   ‚Ä¢ {trait}: {value}")
            
            report.append("-" * 40)
            report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**")
        report.append("=" * 30)
        
        inactive_agents = [a for a in agents_info.values() if a.activity_level == "inactive"]
        if inactive_agents:
            report.append(f"‚ö†Ô∏è {len(inactive_agents)} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
        
        low_wisdom_agents = [a for a in agents_info.values() if a.wisdom_score < 0.3]
        if low_wisdom_agents:
            report.append(f"üìö {len(low_wisdom_agents)} –∞–≥–µ–Ω—Ç–æ–≤ —Å –Ω–∏–∑–∫–æ–π –º—É–¥—Ä–æ—Å—Ç—å—é –Ω—É–∂–¥–∞—é—Ç—Å—è –≤ –æ–±—É—á–µ–Ω–∏–∏")
        
        high_influence_agents = [a for a in agents_info.values() if a.network_influence > 10]
        if high_influence_agents:
            report.append(f"üåü {len(high_influence_agents)} –≤—ã—Å–æ–∫–æ–≤–ª–∏—è—Ç–µ–ª—å–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ - –∫–ª—é—á–µ–≤—ã–µ —É–∑–ª—ã —Å–µ—Ç–∏")
        
        report.append("")
        report.append("üìä **–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:** " + datetime.now().strftime('%Y-%m-%d %H:%M:%S'))
        
        return "\n".join(report)
    
    async def generate_visual_report(self, output_dir: str = "reports"):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        agents_info = await self.scan_collective_database()
        
        if not agents_info:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            return
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        data = []
        for agent in agents_info.values():
            data.append({
                'agent_id': agent.agent_id[:16],
                'total_memories': agent.total_memories,
                'evolution_events': agent.evolution_events,
                'wisdom_score': agent.wisdom_score,
                'network_influence': agent.network_influence,
                'success_rate': agent.success_rate,
                'activity_level': agent.activity_level,
                'days_active': (agent.last_seen - agent.first_seen).days
            })
        
        df = pd.DataFrame(data)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        plt.style.use('dark_background')
        fig, axes = plt.subplots(2, 3, figsize=(18, 12))
        fig.suptitle('üß¨ –ê–Ω–∞–ª–∏–∑ –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ IKAR', fontsize=16, color='white')
        
        # 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        activity_counts = df['activity_level'].value_counts()
        axes[0, 0].pie(activity_counts.values, labels=activity_counts.index, autopct='%1.1f%%')
        axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white')
        
        # 2. –ú—É–¥—Ä–æ—Å—Ç—å vs –í–ª–∏—è–Ω–∏–µ
        axes[0, 1].scatter(df['wisdom_score'], df['network_influence'], alpha=0.7)
        axes[0, 1].set_xlabel('–£—Ä–æ–≤–µ–Ω—å –º—É–¥—Ä–æ—Å—Ç–∏', color='white')
        axes[0, 1].set_ylabel('–°–µ—Ç–µ–≤–æ–µ –≤–ª–∏—è–Ω–∏–µ', color='white')
        axes[0, 1].set_title('–ú—É–¥—Ä–æ—Å—Ç—å vs –í–ª–∏—è–Ω–∏–µ', color='white')
        axes[0, 1].grid(True, alpha=0.3)
        
        # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        axes[0, 2].hist(df['total_memories'], bins=10, alpha=0.7, color='cyan')
        axes[0, 2].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π', color='white')
        axes[0, 2].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≥–µ–Ω—Ç–æ–≤', color='white')
        axes[0, 2].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π', color='white')
        axes[0, 2].grid(True, alpha=0.3)
        
        # 4. –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        success_by_activity = df.groupby('activity_level')['success_rate'].mean()
        axes[1, 0].bar(success_by_activity.index, success_by_activity.values, color='green')
        axes[1, 0].set_xlabel('–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white')
        axes[1, 0].set_ylabel('–°—Ä–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å', color='white')
        axes[1, 0].set_title('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white')
        axes[1, 0].grid(True, alpha=0.3)
        
        # 5. –≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        axes[1, 1].scatter(df['days_active'], df['evolution_events'], alpha=0.7, color='orange')
        axes[1, 1].set_xlabel('–î–Ω–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white')
        axes[1, 1].set_ylabel('–°–æ–±—ã—Ç–∏—è —ç–≤–æ–ª—é—Ü–∏–∏', color='white')
        axes[1, 1].set_title('–≠–≤–æ–ª—é—Ü–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏', color='white')
        axes[1, 1].grid(True, alpha=0.3)
        
        # 6. –¢–æ–ø –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –º—É–¥—Ä–æ—Å—Ç–∏
        top_agents = df.nlargest(10, 'wisdom_score')
        axes[1, 2].barh(top_agents['agent_id'], top_agents['wisdom_score'], color='purple')
        axes[1, 2].set_xlabel('–£—Ä–æ–≤–µ–Ω—å –º—É–¥—Ä–æ—Å—Ç–∏', color='white')
        axes[1, 2].set_title('–¢–æ–ø-10 –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ –º—É–¥—Ä–æ—Å—Ç–∏', color='white')
        axes[1, 2].grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_path / 'collective_agents_analysis.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –í–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_path / 'collective_agents_analysis.png'}")
    
    async def export_agent_data(self, output_dir: str = "reports") -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –≤ JSON –∏ CSV"""
        print("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        agents_info = await self.scan_collective_database()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        json_data = {}
        for agent_id, agent in agents_info.items():
            json_data[agent_id] = {
                'agent_id': agent.agent_id,
                'first_seen': agent.first_seen.isoformat(),
                'last_seen': agent.last_seen.isoformat(),
                'total_memories': agent.total_memories,
                'memory_types': agent.memory_types,
                'evolution_events': agent.evolution_events,
                'network_nodes': agent.network_nodes,
                'success_rate': agent.success_rate,
                'activity_level': agent.activity_level,
                'personality_traits': agent.personality_traits,
                'collective_contributions': agent.collective_contributions,
                'wisdom_score': agent.wisdom_score,
                'network_influence': agent.network_influence
            }
        
        json_file = output_path / 'agents_data.json'
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(json_data, f, indent=2, ensure_ascii=False)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
        csv_data = []
        for agent in agents_info.values():
            csv_data.append({
                'agent_id': agent.agent_id,
                'first_seen': agent.first_seen,
                'last_seen': agent.last_seen,
                'total_memories': agent.total_memories,
                'evolution_events': agent.evolution_events,
                'success_rate': agent.success_rate,
                'activity_level': agent.activity_level,
                'wisdom_score': agent.wisdom_score,
                'network_influence': agent.network_influence,
                'collective_contributions': agent.collective_contributions
            })
        
        df = pd.DataFrame(csv_data)
        csv_file = output_path / 'agents_data.csv'
        df.to_csv(csv_file, index=False, encoding='utf-8')
        
        print(f"üì§ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
        print(f"   JSON: {json_file}")
        print(f"   CSV: {csv_file}")
        
        return f"–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {json_file}, {csv_file}"

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ IKAR")
    print("=" * 60)
    
    analyzer = CollectiveAgentsAnalyzer()
    analyzer._init_database()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report = await analyzer.generate_comprehensive_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = Path("reports/collective_agents_report.txt")
    report_file.parent.mkdir(exist_ok=True)
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print("üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ reports/collective_agents_report.txt")
    print("\n" + "=" * 60)
    print(report)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    await analyzer.generate_visual_report()
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    await analyzer.export_agent_data()
    
    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(main()) 