import re

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
with open('backend/api/telegram_polling.py', 'r', encoding='utf-8') as f:
    content = f.read()

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é analyze_trading_chart - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –∫–ª—é—á–µ–π
old_chart_function = '''            headers = {
                "Authorization": "Bearer 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",
                "Content-Type": "application/json"
            }
            
            logger.info("[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ qwen2.5-vl-72b...")
            
            async with session.post("https://openrouter.ai/api/v1/chat/completions", 
                                  json=payload, headers=headers, timeout=30) as response:'''

new_chart_function = '''            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é –ª–æ–≥–∏–∫—É –∫–ª—é—á–µ–π –∏–∑ llm_client
            from api.telegram import llm_client
            
            logger.info("[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ qwen2.5-vl-72b —á–µ—Ä–µ–∑ LLM –∫–ª–∏–µ–Ω—Ç...")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ LLM –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π
            try:
                result = await llm_client.chat_completion_with_image(
                    user_message=trading_prompt,
                    image_base64=img_base64,
                    system_prompt="üìä –¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É –≥—Ä–∞—Ñ–∏–∫–æ–≤! –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–µ—Ç–∞–ª—å–Ω–æ!",
                    model="qwen/qwen2.5-vl-72b-instruct:free",
                    max_tokens=2000
                )
                
                if result:
                    logger.info(f"[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –ü–æ–ª—É—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {result[:100]}...")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                    chart_price = None
                    trading_pair = None
                    
                    # –ò—â–µ–º —Ü–µ–Ω—É –≤ –∞–Ω–∞–ª–∏–∑–µ (–ø–∞—Ç—Ç–µ—Ä–Ω—ã: $0.000021, $65432.10)
                    price_match = re.search(r'\\$([0-9]+\\.?[0-9]*)', result)
                    if price_match:
                        try:
                            chart_price = float(price_match.group(1))
                        except:
                            pass
                    
                    # –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                    pair_match = re.search(r'([A-Z]+/[A-Z]+)', result)
                    if pair_match:
                        trading_pair = pair_match.group(1)
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API
                    if chart_price and trading_pair:
                        validated_price, price_sources = await validate_price_from_apis(trading_pair, chart_price)
                        
                        if price_sources:
                            validation_info = "\\n\\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–ù–´:\\n"
                            for source, price in price_sources:
                                validation_info += f"‚Ä¢ {source}: ${price:.8f}\\n"
                            result += validation_info
                    
                    return result
                else:
                    logger.error("[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] LLM –∫–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                    return None
                    
            except Exception as e:
                logger.error(f"[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –û—à–∏–±–∫–∞ LLM –∫–ª–∏–µ–Ω—Ç–∞: {e}")
                return None'''

content = content.replace(old_chart_function, new_chart_function)

# –£–¥–∞–ª—è–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è —á–∞—Å—Ç—å —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–∏
old_response_handling = '''                logger.info(f"[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")
                
                if response.status == 200:
                    result = await response.json()
                    chart_analysis = result.get('choices', [{}])[0].get('message', {}).get('content', '')
                    logger.info(f"[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –ü–æ–ª—É—á–µ–Ω –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {chart_analysis[:100]}...")
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏ —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
                    chart_price = None
                    trading_pair = None
                    
                    # –ò—â–µ–º —Ü–µ–Ω—É –≤ –∞–Ω–∞–ª–∏–∑–µ (–ø–∞—Ç—Ç–µ—Ä–Ω—ã: $0.000021, $65432.10)
                    price_match = re.search(r'\\$([0-9]+\\.?[0-9]*)', chart_analysis)
                    if price_match:
                        try:
                            chart_price = float(price_match.group(1))
                        except:
                            pass
                    
                    # –ò—â–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É
                    pair_match = re.search(r'([A-Z]+/[A-Z]+)', chart_analysis)
                    if pair_match:
                        trading_pair = pair_match.group(1)
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API
                    if chart_price and trading_pair:
                        validated_price, price_sources = await validate_price_from_apis(trading_pair, chart_price)
                        
                        if price_sources:
                            validation_info = "\\n\\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–ù–´:\\n"
                            for source, price in price_sources:
                                validation_info += f"‚Ä¢ {source}: ${price:.8f}\\n"
                            chart_analysis += validation_info
                    
                    return chart_analysis
                else:
                    error_text = await response.text()
                    logger.error(f"[–ì–†–ê–§–ò–ö-–ê–ù–ê–õ–ò–ó] –û—à–∏–±–∫–∞ API: {response.status} - {error_text}")
                    return None'''

content = content.replace(old_response_handling, '')

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
with open('backend/api/telegram_polling.py', 'w', encoding='utf-8') as f:
    f.write(content)

print("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –∞–Ω–∞–ª–∏–∑–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤!")